// ============================================
// Order Service - Prisma Schema
// ============================================

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client-order"
}

datasource db {
  provider = "postgresql"
  url      = env("ORDER_DB_URL")
}

// ============================================
// ORDER MANAGEMENT
// ============================================

model Order {
  id            String   @id @default(uuid())
  orderNumber   String   @unique
  customerId    String?
  status        String   @default("pending") // pending, confirmed, processing, completed, cancelled
  subtotal      Decimal  @db.Decimal(10, 2)
  discountTotal Decimal  @default(0) @db.Decimal(10, 2)
  taxTotal      Decimal  @default(0) @db.Decimal(10, 2)
  total         Decimal  @db.Decimal(10, 2)
  notes         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  customer  Customer?        @relation(fields: [customerId], references: [id])
  items     OrderItem[]
  payments  OrderPayment[]
  discounts OrderDiscount[]
  taxes     OrderTax[]

  @@map("orders")
  @@schema("order_schema")
}

model OrderItem {
  id          String  @id @default(uuid())
  orderId     String
  skuId       String // Reference to SKU in catalog service
  skuCode     String
  skuName     String
  quantity    Int
  unitPrice   Decimal @db.Decimal(10, 2)
  discount    Decimal @default(0) @db.Decimal(10, 2)
  tax         Decimal @default(0) @db.Decimal(10, 2)
  total       Decimal @db.Decimal(10, 2)
  createdAt   DateTime @default(now())

  // Relations
  order Order @relation(fields: [orderId], references: [id])

  @@map("order_items")
  @@schema("order_schema")
}

model OrderPayment {
  id            String   @id @default(uuid())
  orderId       String
  method        String // cash, credit_card, debit_card, pix, etc
  amount        Decimal  @db.Decimal(10, 2)
  transactionId String?
  status        String   @default("pending") // pending, approved, rejected, refunded
  paidAt        DateTime?
  createdAt     DateTime @default(now())

  // Relations
  order Order @relation(fields: [orderId], references: [id])

  @@map("order_payments")
  @@schema("order_schema")
}

model OrderDiscount {
  id          String   @id @default(uuid())
  orderId     String
  couponId    String?
  type        String // percentage, fixed
  value       Decimal  @db.Decimal(10, 2)
  amount      Decimal  @db.Decimal(10, 2)
  description String?
  createdAt   DateTime @default(now())

  // Relations
  order  Order   @relation(fields: [orderId], references: [id])
  coupon Coupon? @relation(fields: [couponId], references: [id])

  @@map("order_discounts")
  @@schema("order_schema")
}

model OrderTax {
  id        String   @id @default(uuid())
  orderId   String
  name      String
  rate      Decimal  @db.Decimal(5, 2)
  amount    Decimal  @db.Decimal(10, 2)
  createdAt DateTime @default(now())

  // Relations
  order Order @relation(fields: [orderId], references: [id])

  @@map("order_taxes")
  @@schema("order_schema")
}

model Customer {
  id           String   @id @default(uuid())
  name         String
  email        String?
  phone        String?
  documentType String? // CPF, CNPJ
  document     String?  @unique
  status       String   @default("active") // active, inactive, blocked
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  orders Order[]

  @@map("customers")
  @@schema("order_schema")
}

model Coupon {
  id          String   @id @default(uuid())
  code        String   @unique
  type        String // percentage, fixed
  value       Decimal  @db.Decimal(10, 2)
  minAmount   Decimal? @db.Decimal(10, 2)
  maxAmount   Decimal? @db.Decimal(10, 2)
  maxUses     Int?
  currentUses Int      @default(0)
  validFrom   DateTime @default(now())
  validTo     DateTime?
  status      String   @default("active") // active, inactive, expired
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  orderDiscounts OrderDiscount[]

  @@map("coupons")
  @@schema("order_schema")
}
