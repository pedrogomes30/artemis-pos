
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Product
 * 
 */
export type Product = $Result.DefaultSelection<Prisma.$ProductPayload>
/**
 * Model Sku
 * 
 */
export type Sku = $Result.DefaultSelection<Prisma.$SkuPayload>
/**
 * Model SkuImage
 * 
 */
export type SkuImage = $Result.DefaultSelection<Prisma.$SkuImagePayload>
/**
 * Model SkuPrice
 * 
 */
export type SkuPrice = $Result.DefaultSelection<Prisma.$SkuPricePayload>
/**
 * Model SkuStock
 * 
 */
export type SkuStock = $Result.DefaultSelection<Prisma.$SkuStockPayload>
/**
 * Model Warehouse
 * 
 */
export type Warehouse = $Result.DefaultSelection<Prisma.$WarehousePayload>
/**
 * Model PriceList
 * 
 */
export type PriceList = $Result.DefaultSelection<Prisma.$PriceListPayload>
/**
 * Model Category
 * 
 */
export type Category = $Result.DefaultSelection<Prisma.$CategoryPayload>
/**
 * Model SyncJob
 * 
 */
export type SyncJob = $Result.DefaultSelection<Prisma.$SyncJobPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Products
 * const products = await prisma.product.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  const U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Products
   * const products = await prisma.product.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.product`: Exposes CRUD operations for the **Product** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Products
    * const products = await prisma.product.findMany()
    * ```
    */
  get product(): Prisma.ProductDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.sku`: Exposes CRUD operations for the **Sku** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Skus
    * const skus = await prisma.sku.findMany()
    * ```
    */
  get sku(): Prisma.SkuDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.skuImage`: Exposes CRUD operations for the **SkuImage** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SkuImages
    * const skuImages = await prisma.skuImage.findMany()
    * ```
    */
  get skuImage(): Prisma.SkuImageDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.skuPrice`: Exposes CRUD operations for the **SkuPrice** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SkuPrices
    * const skuPrices = await prisma.skuPrice.findMany()
    * ```
    */
  get skuPrice(): Prisma.SkuPriceDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.skuStock`: Exposes CRUD operations for the **SkuStock** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SkuStocks
    * const skuStocks = await prisma.skuStock.findMany()
    * ```
    */
  get skuStock(): Prisma.SkuStockDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.warehouse`: Exposes CRUD operations for the **Warehouse** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Warehouses
    * const warehouses = await prisma.warehouse.findMany()
    * ```
    */
  get warehouse(): Prisma.WarehouseDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.priceList`: Exposes CRUD operations for the **PriceList** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PriceLists
    * const priceLists = await prisma.priceList.findMany()
    * ```
    */
  get priceList(): Prisma.PriceListDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.category`: Exposes CRUD operations for the **Category** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Categories
    * const categories = await prisma.category.findMany()
    * ```
    */
  get category(): Prisma.CategoryDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.syncJob`: Exposes CRUD operations for the **SyncJob** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SyncJobs
    * const syncJobs = await prisma.syncJob.findMany()
    * ```
    */
  get syncJob(): Prisma.SyncJobDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.17.1
   * Query Engine version: 272a37d34178c2894197e17273bf937f25acdeac
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Product: 'Product',
    Sku: 'Sku',
    SkuImage: 'SkuImage',
    SkuPrice: 'SkuPrice',
    SkuStock: 'SkuStock',
    Warehouse: 'Warehouse',
    PriceList: 'PriceList',
    Category: 'Category',
    SyncJob: 'SyncJob'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "product" | "sku" | "skuImage" | "skuPrice" | "skuStock" | "warehouse" | "priceList" | "category" | "syncJob"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Product: {
        payload: Prisma.$ProductPayload<ExtArgs>
        fields: Prisma.ProductFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProductFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProductFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          findFirst: {
            args: Prisma.ProductFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProductFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          findMany: {
            args: Prisma.ProductFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>[]
          }
          create: {
            args: Prisma.ProductCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          createMany: {
            args: Prisma.ProductCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProductCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>[]
          }
          delete: {
            args: Prisma.ProductDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          update: {
            args: Prisma.ProductUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          deleteMany: {
            args: Prisma.ProductDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProductUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ProductUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>[]
          }
          upsert: {
            args: Prisma.ProductUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          aggregate: {
            args: Prisma.ProductAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProduct>
          }
          groupBy: {
            args: Prisma.ProductGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProductGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProductCountArgs<ExtArgs>
            result: $Utils.Optional<ProductCountAggregateOutputType> | number
          }
        }
      }
      Sku: {
        payload: Prisma.$SkuPayload<ExtArgs>
        fields: Prisma.SkuFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SkuFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkuPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SkuFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkuPayload>
          }
          findFirst: {
            args: Prisma.SkuFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkuPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SkuFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkuPayload>
          }
          findMany: {
            args: Prisma.SkuFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkuPayload>[]
          }
          create: {
            args: Prisma.SkuCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkuPayload>
          }
          createMany: {
            args: Prisma.SkuCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SkuCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkuPayload>[]
          }
          delete: {
            args: Prisma.SkuDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkuPayload>
          }
          update: {
            args: Prisma.SkuUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkuPayload>
          }
          deleteMany: {
            args: Prisma.SkuDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SkuUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SkuUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkuPayload>[]
          }
          upsert: {
            args: Prisma.SkuUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkuPayload>
          }
          aggregate: {
            args: Prisma.SkuAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSku>
          }
          groupBy: {
            args: Prisma.SkuGroupByArgs<ExtArgs>
            result: $Utils.Optional<SkuGroupByOutputType>[]
          }
          count: {
            args: Prisma.SkuCountArgs<ExtArgs>
            result: $Utils.Optional<SkuCountAggregateOutputType> | number
          }
        }
      }
      SkuImage: {
        payload: Prisma.$SkuImagePayload<ExtArgs>
        fields: Prisma.SkuImageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SkuImageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkuImagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SkuImageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkuImagePayload>
          }
          findFirst: {
            args: Prisma.SkuImageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkuImagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SkuImageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkuImagePayload>
          }
          findMany: {
            args: Prisma.SkuImageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkuImagePayload>[]
          }
          create: {
            args: Prisma.SkuImageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkuImagePayload>
          }
          createMany: {
            args: Prisma.SkuImageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SkuImageCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkuImagePayload>[]
          }
          delete: {
            args: Prisma.SkuImageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkuImagePayload>
          }
          update: {
            args: Prisma.SkuImageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkuImagePayload>
          }
          deleteMany: {
            args: Prisma.SkuImageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SkuImageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SkuImageUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkuImagePayload>[]
          }
          upsert: {
            args: Prisma.SkuImageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkuImagePayload>
          }
          aggregate: {
            args: Prisma.SkuImageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSkuImage>
          }
          groupBy: {
            args: Prisma.SkuImageGroupByArgs<ExtArgs>
            result: $Utils.Optional<SkuImageGroupByOutputType>[]
          }
          count: {
            args: Prisma.SkuImageCountArgs<ExtArgs>
            result: $Utils.Optional<SkuImageCountAggregateOutputType> | number
          }
        }
      }
      SkuPrice: {
        payload: Prisma.$SkuPricePayload<ExtArgs>
        fields: Prisma.SkuPriceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SkuPriceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkuPricePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SkuPriceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkuPricePayload>
          }
          findFirst: {
            args: Prisma.SkuPriceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkuPricePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SkuPriceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkuPricePayload>
          }
          findMany: {
            args: Prisma.SkuPriceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkuPricePayload>[]
          }
          create: {
            args: Prisma.SkuPriceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkuPricePayload>
          }
          createMany: {
            args: Prisma.SkuPriceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SkuPriceCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkuPricePayload>[]
          }
          delete: {
            args: Prisma.SkuPriceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkuPricePayload>
          }
          update: {
            args: Prisma.SkuPriceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkuPricePayload>
          }
          deleteMany: {
            args: Prisma.SkuPriceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SkuPriceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SkuPriceUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkuPricePayload>[]
          }
          upsert: {
            args: Prisma.SkuPriceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkuPricePayload>
          }
          aggregate: {
            args: Prisma.SkuPriceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSkuPrice>
          }
          groupBy: {
            args: Prisma.SkuPriceGroupByArgs<ExtArgs>
            result: $Utils.Optional<SkuPriceGroupByOutputType>[]
          }
          count: {
            args: Prisma.SkuPriceCountArgs<ExtArgs>
            result: $Utils.Optional<SkuPriceCountAggregateOutputType> | number
          }
        }
      }
      SkuStock: {
        payload: Prisma.$SkuStockPayload<ExtArgs>
        fields: Prisma.SkuStockFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SkuStockFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkuStockPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SkuStockFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkuStockPayload>
          }
          findFirst: {
            args: Prisma.SkuStockFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkuStockPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SkuStockFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkuStockPayload>
          }
          findMany: {
            args: Prisma.SkuStockFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkuStockPayload>[]
          }
          create: {
            args: Prisma.SkuStockCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkuStockPayload>
          }
          createMany: {
            args: Prisma.SkuStockCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SkuStockCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkuStockPayload>[]
          }
          delete: {
            args: Prisma.SkuStockDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkuStockPayload>
          }
          update: {
            args: Prisma.SkuStockUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkuStockPayload>
          }
          deleteMany: {
            args: Prisma.SkuStockDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SkuStockUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SkuStockUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkuStockPayload>[]
          }
          upsert: {
            args: Prisma.SkuStockUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkuStockPayload>
          }
          aggregate: {
            args: Prisma.SkuStockAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSkuStock>
          }
          groupBy: {
            args: Prisma.SkuStockGroupByArgs<ExtArgs>
            result: $Utils.Optional<SkuStockGroupByOutputType>[]
          }
          count: {
            args: Prisma.SkuStockCountArgs<ExtArgs>
            result: $Utils.Optional<SkuStockCountAggregateOutputType> | number
          }
        }
      }
      Warehouse: {
        payload: Prisma.$WarehousePayload<ExtArgs>
        fields: Prisma.WarehouseFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WarehouseFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WarehousePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WarehouseFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WarehousePayload>
          }
          findFirst: {
            args: Prisma.WarehouseFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WarehousePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WarehouseFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WarehousePayload>
          }
          findMany: {
            args: Prisma.WarehouseFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WarehousePayload>[]
          }
          create: {
            args: Prisma.WarehouseCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WarehousePayload>
          }
          createMany: {
            args: Prisma.WarehouseCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WarehouseCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WarehousePayload>[]
          }
          delete: {
            args: Prisma.WarehouseDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WarehousePayload>
          }
          update: {
            args: Prisma.WarehouseUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WarehousePayload>
          }
          deleteMany: {
            args: Prisma.WarehouseDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WarehouseUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.WarehouseUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WarehousePayload>[]
          }
          upsert: {
            args: Prisma.WarehouseUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WarehousePayload>
          }
          aggregate: {
            args: Prisma.WarehouseAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWarehouse>
          }
          groupBy: {
            args: Prisma.WarehouseGroupByArgs<ExtArgs>
            result: $Utils.Optional<WarehouseGroupByOutputType>[]
          }
          count: {
            args: Prisma.WarehouseCountArgs<ExtArgs>
            result: $Utils.Optional<WarehouseCountAggregateOutputType> | number
          }
        }
      }
      PriceList: {
        payload: Prisma.$PriceListPayload<ExtArgs>
        fields: Prisma.PriceListFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PriceListFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PriceListPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PriceListFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PriceListPayload>
          }
          findFirst: {
            args: Prisma.PriceListFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PriceListPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PriceListFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PriceListPayload>
          }
          findMany: {
            args: Prisma.PriceListFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PriceListPayload>[]
          }
          create: {
            args: Prisma.PriceListCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PriceListPayload>
          }
          createMany: {
            args: Prisma.PriceListCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PriceListCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PriceListPayload>[]
          }
          delete: {
            args: Prisma.PriceListDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PriceListPayload>
          }
          update: {
            args: Prisma.PriceListUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PriceListPayload>
          }
          deleteMany: {
            args: Prisma.PriceListDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PriceListUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PriceListUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PriceListPayload>[]
          }
          upsert: {
            args: Prisma.PriceListUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PriceListPayload>
          }
          aggregate: {
            args: Prisma.PriceListAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePriceList>
          }
          groupBy: {
            args: Prisma.PriceListGroupByArgs<ExtArgs>
            result: $Utils.Optional<PriceListGroupByOutputType>[]
          }
          count: {
            args: Prisma.PriceListCountArgs<ExtArgs>
            result: $Utils.Optional<PriceListCountAggregateOutputType> | number
          }
        }
      }
      Category: {
        payload: Prisma.$CategoryPayload<ExtArgs>
        fields: Prisma.CategoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CategoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CategoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          findFirst: {
            args: Prisma.CategoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CategoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          findMany: {
            args: Prisma.CategoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>[]
          }
          create: {
            args: Prisma.CategoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          createMany: {
            args: Prisma.CategoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CategoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>[]
          }
          delete: {
            args: Prisma.CategoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          update: {
            args: Prisma.CategoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          deleteMany: {
            args: Prisma.CategoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CategoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CategoryUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>[]
          }
          upsert: {
            args: Prisma.CategoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          aggregate: {
            args: Prisma.CategoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCategory>
          }
          groupBy: {
            args: Prisma.CategoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<CategoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.CategoryCountArgs<ExtArgs>
            result: $Utils.Optional<CategoryCountAggregateOutputType> | number
          }
        }
      }
      SyncJob: {
        payload: Prisma.$SyncJobPayload<ExtArgs>
        fields: Prisma.SyncJobFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SyncJobFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SyncJobPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SyncJobFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SyncJobPayload>
          }
          findFirst: {
            args: Prisma.SyncJobFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SyncJobPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SyncJobFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SyncJobPayload>
          }
          findMany: {
            args: Prisma.SyncJobFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SyncJobPayload>[]
          }
          create: {
            args: Prisma.SyncJobCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SyncJobPayload>
          }
          createMany: {
            args: Prisma.SyncJobCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SyncJobCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SyncJobPayload>[]
          }
          delete: {
            args: Prisma.SyncJobDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SyncJobPayload>
          }
          update: {
            args: Prisma.SyncJobUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SyncJobPayload>
          }
          deleteMany: {
            args: Prisma.SyncJobDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SyncJobUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SyncJobUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SyncJobPayload>[]
          }
          upsert: {
            args: Prisma.SyncJobUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SyncJobPayload>
          }
          aggregate: {
            args: Prisma.SyncJobAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSyncJob>
          }
          groupBy: {
            args: Prisma.SyncJobGroupByArgs<ExtArgs>
            result: $Utils.Optional<SyncJobGroupByOutputType>[]
          }
          count: {
            args: Prisma.SyncJobCountArgs<ExtArgs>
            result: $Utils.Optional<SyncJobCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Shorthand for `emit: 'stdout'`
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events only
     * log: [
     *   { emit: 'event', level: 'query' },
     *   { emit: 'event', level: 'info' },
     *   { emit: 'event', level: 'warn' }
     *   { emit: 'event', level: 'error' }
     * ]
     * 
     * / Emit as events and log to stdout
     * og: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * 
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Instance of a Driver Adapter, e.g., like one provided by `@prisma/adapter-planetscale`
     */
    adapter?: runtime.SqlDriverAdapterFactory | null
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    product?: ProductOmit
    sku?: SkuOmit
    skuImage?: SkuImageOmit
    skuPrice?: SkuPriceOmit
    skuStock?: SkuStockOmit
    warehouse?: WarehouseOmit
    priceList?: PriceListOmit
    category?: CategoryOmit
    syncJob?: SyncJobOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

  export type GetLogType<T> = CheckIsLogLevel<
    T extends LogDefinition ? T['level'] : T
  >;

  export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
    ? GetLogType<T[number]>
    : never;

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type ProductCountOutputType
   */

  export type ProductCountOutputType = {
    skus: number
  }

  export type ProductCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    skus?: boolean | ProductCountOutputTypeCountSkusArgs
  }

  // Custom InputTypes
  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductCountOutputType
     */
    select?: ProductCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeCountSkusArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SkuWhereInput
  }


  /**
   * Count Type SkuCountOutputType
   */

  export type SkuCountOutputType = {
    images: number
    prices: number
    stocks: number
  }

  export type SkuCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    images?: boolean | SkuCountOutputTypeCountImagesArgs
    prices?: boolean | SkuCountOutputTypeCountPricesArgs
    stocks?: boolean | SkuCountOutputTypeCountStocksArgs
  }

  // Custom InputTypes
  /**
   * SkuCountOutputType without action
   */
  export type SkuCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkuCountOutputType
     */
    select?: SkuCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SkuCountOutputType without action
   */
  export type SkuCountOutputTypeCountImagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SkuImageWhereInput
  }

  /**
   * SkuCountOutputType without action
   */
  export type SkuCountOutputTypeCountPricesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SkuPriceWhereInput
  }

  /**
   * SkuCountOutputType without action
   */
  export type SkuCountOutputTypeCountStocksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SkuStockWhereInput
  }


  /**
   * Count Type WarehouseCountOutputType
   */

  export type WarehouseCountOutputType = {
    stocks: number
  }

  export type WarehouseCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    stocks?: boolean | WarehouseCountOutputTypeCountStocksArgs
  }

  // Custom InputTypes
  /**
   * WarehouseCountOutputType without action
   */
  export type WarehouseCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WarehouseCountOutputType
     */
    select?: WarehouseCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * WarehouseCountOutputType without action
   */
  export type WarehouseCountOutputTypeCountStocksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SkuStockWhereInput
  }


  /**
   * Count Type PriceListCountOutputType
   */

  export type PriceListCountOutputType = {
    prices: number
  }

  export type PriceListCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    prices?: boolean | PriceListCountOutputTypeCountPricesArgs
  }

  // Custom InputTypes
  /**
   * PriceListCountOutputType without action
   */
  export type PriceListCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PriceListCountOutputType
     */
    select?: PriceListCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PriceListCountOutputType without action
   */
  export type PriceListCountOutputTypeCountPricesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SkuPriceWhereInput
  }


  /**
   * Count Type CategoryCountOutputType
   */

  export type CategoryCountOutputType = {
    children: number
    products: number
  }

  export type CategoryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    children?: boolean | CategoryCountOutputTypeCountChildrenArgs
    products?: boolean | CategoryCountOutputTypeCountProductsArgs
  }

  // Custom InputTypes
  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoryCountOutputType
     */
    select?: CategoryCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeCountChildrenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CategoryWhereInput
  }

  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeCountProductsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductWhereInput
  }


  /**
   * Count Type SyncJobCountOutputType
   */

  export type SyncJobCountOutputType = {
    products: number
  }

  export type SyncJobCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    products?: boolean | SyncJobCountOutputTypeCountProductsArgs
  }

  // Custom InputTypes
  /**
   * SyncJobCountOutputType without action
   */
  export type SyncJobCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SyncJobCountOutputType
     */
    select?: SyncJobCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SyncJobCountOutputType without action
   */
  export type SyncJobCountOutputTypeCountProductsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Product
   */

  export type AggregateProduct = {
    _count: ProductCountAggregateOutputType | null
    _min: ProductMinAggregateOutputType | null
    _max: ProductMaxAggregateOutputType | null
  }

  export type ProductMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
    categoryId: string | null
    syncJobId: string | null
  }

  export type ProductMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
    categoryId: string | null
    syncJobId: string | null
  }

  export type ProductCountAggregateOutputType = {
    id: number
    name: number
    description: number
    status: number
    createdAt: number
    updatedAt: number
    categoryId: number
    syncJobId: number
    _all: number
  }


  export type ProductMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    categoryId?: true
    syncJobId?: true
  }

  export type ProductMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    categoryId?: true
    syncJobId?: true
  }

  export type ProductCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    categoryId?: true
    syncJobId?: true
    _all?: true
  }

  export type ProductAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Product to aggregate.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Products
    **/
    _count?: true | ProductCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductMaxAggregateInputType
  }

  export type GetProductAggregateType<T extends ProductAggregateArgs> = {
        [P in keyof T & keyof AggregateProduct]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProduct[P]>
      : GetScalarType<T[P], AggregateProduct[P]>
  }




  export type ProductGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductWhereInput
    orderBy?: ProductOrderByWithAggregationInput | ProductOrderByWithAggregationInput[]
    by: ProductScalarFieldEnum[] | ProductScalarFieldEnum
    having?: ProductScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductCountAggregateInputType | true
    _min?: ProductMinAggregateInputType
    _max?: ProductMaxAggregateInputType
  }

  export type ProductGroupByOutputType = {
    id: string
    name: string
    description: string | null
    status: string
    createdAt: Date
    updatedAt: Date
    categoryId: string | null
    syncJobId: string | null
    _count: ProductCountAggregateOutputType | null
    _min: ProductMinAggregateOutputType | null
    _max: ProductMaxAggregateOutputType | null
  }

  type GetProductGroupByPayload<T extends ProductGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProductGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductGroupByOutputType[P]>
            : GetScalarType<T[P], ProductGroupByOutputType[P]>
        }
      >
    >


  export type ProductSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    categoryId?: boolean
    syncJobId?: boolean
    skus?: boolean | Product$skusArgs<ExtArgs>
    category?: boolean | Product$categoryArgs<ExtArgs>
    syncJob?: boolean | Product$syncJobArgs<ExtArgs>
    _count?: boolean | ProductCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["product"]>

  export type ProductSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    categoryId?: boolean
    syncJobId?: boolean
    category?: boolean | Product$categoryArgs<ExtArgs>
    syncJob?: boolean | Product$syncJobArgs<ExtArgs>
  }, ExtArgs["result"]["product"]>

  export type ProductSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    categoryId?: boolean
    syncJobId?: boolean
    category?: boolean | Product$categoryArgs<ExtArgs>
    syncJob?: boolean | Product$syncJobArgs<ExtArgs>
  }, ExtArgs["result"]["product"]>

  export type ProductSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    categoryId?: boolean
    syncJobId?: boolean
  }

  export type ProductOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "description" | "status" | "createdAt" | "updatedAt" | "categoryId" | "syncJobId", ExtArgs["result"]["product"]>
  export type ProductInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    skus?: boolean | Product$skusArgs<ExtArgs>
    category?: boolean | Product$categoryArgs<ExtArgs>
    syncJob?: boolean | Product$syncJobArgs<ExtArgs>
    _count?: boolean | ProductCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ProductIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    category?: boolean | Product$categoryArgs<ExtArgs>
    syncJob?: boolean | Product$syncJobArgs<ExtArgs>
  }
  export type ProductIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    category?: boolean | Product$categoryArgs<ExtArgs>
    syncJob?: boolean | Product$syncJobArgs<ExtArgs>
  }

  export type $ProductPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Product"
    objects: {
      skus: Prisma.$SkuPayload<ExtArgs>[]
      category: Prisma.$CategoryPayload<ExtArgs> | null
      syncJob: Prisma.$SyncJobPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      status: string
      createdAt: Date
      updatedAt: Date
      categoryId: string | null
      syncJobId: string | null
    }, ExtArgs["result"]["product"]>
    composites: {}
  }

  type ProductGetPayload<S extends boolean | null | undefined | ProductDefaultArgs> = $Result.GetResult<Prisma.$ProductPayload, S>

  type ProductCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProductFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProductCountAggregateInputType | true
    }

  export interface ProductDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Product'], meta: { name: 'Product' } }
    /**
     * Find zero or one Product that matches the filter.
     * @param {ProductFindUniqueArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProductFindUniqueArgs>(args: SelectSubset<T, ProductFindUniqueArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Product that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProductFindUniqueOrThrowArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProductFindUniqueOrThrowArgs>(args: SelectSubset<T, ProductFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Product that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindFirstArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProductFindFirstArgs>(args?: SelectSubset<T, ProductFindFirstArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Product that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindFirstOrThrowArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProductFindFirstOrThrowArgs>(args?: SelectSubset<T, ProductFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Products that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Products
     * const products = await prisma.product.findMany()
     * 
     * // Get first 10 Products
     * const products = await prisma.product.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const productWithIdOnly = await prisma.product.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProductFindManyArgs>(args?: SelectSubset<T, ProductFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Product.
     * @param {ProductCreateArgs} args - Arguments to create a Product.
     * @example
     * // Create one Product
     * const Product = await prisma.product.create({
     *   data: {
     *     // ... data to create a Product
     *   }
     * })
     * 
     */
    create<T extends ProductCreateArgs>(args: SelectSubset<T, ProductCreateArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Products.
     * @param {ProductCreateManyArgs} args - Arguments to create many Products.
     * @example
     * // Create many Products
     * const product = await prisma.product.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProductCreateManyArgs>(args?: SelectSubset<T, ProductCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Products and returns the data saved in the database.
     * @param {ProductCreateManyAndReturnArgs} args - Arguments to create many Products.
     * @example
     * // Create many Products
     * const product = await prisma.product.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Products and only return the `id`
     * const productWithIdOnly = await prisma.product.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProductCreateManyAndReturnArgs>(args?: SelectSubset<T, ProductCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Product.
     * @param {ProductDeleteArgs} args - Arguments to delete one Product.
     * @example
     * // Delete one Product
     * const Product = await prisma.product.delete({
     *   where: {
     *     // ... filter to delete one Product
     *   }
     * })
     * 
     */
    delete<T extends ProductDeleteArgs>(args: SelectSubset<T, ProductDeleteArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Product.
     * @param {ProductUpdateArgs} args - Arguments to update one Product.
     * @example
     * // Update one Product
     * const product = await prisma.product.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProductUpdateArgs>(args: SelectSubset<T, ProductUpdateArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Products.
     * @param {ProductDeleteManyArgs} args - Arguments to filter Products to delete.
     * @example
     * // Delete a few Products
     * const { count } = await prisma.product.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProductDeleteManyArgs>(args?: SelectSubset<T, ProductDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Products
     * const product = await prisma.product.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProductUpdateManyArgs>(args: SelectSubset<T, ProductUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Products and returns the data updated in the database.
     * @param {ProductUpdateManyAndReturnArgs} args - Arguments to update many Products.
     * @example
     * // Update many Products
     * const product = await prisma.product.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Products and only return the `id`
     * const productWithIdOnly = await prisma.product.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ProductUpdateManyAndReturnArgs>(args: SelectSubset<T, ProductUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Product.
     * @param {ProductUpsertArgs} args - Arguments to update or create a Product.
     * @example
     * // Update or create a Product
     * const product = await prisma.product.upsert({
     *   create: {
     *     // ... data to create a Product
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Product we want to update
     *   }
     * })
     */
    upsert<T extends ProductUpsertArgs>(args: SelectSubset<T, ProductUpsertArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductCountArgs} args - Arguments to filter Products to count.
     * @example
     * // Count the number of Products
     * const count = await prisma.product.count({
     *   where: {
     *     // ... the filter for the Products we want to count
     *   }
     * })
    **/
    count<T extends ProductCountArgs>(
      args?: Subset<T, ProductCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Product.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductAggregateArgs>(args: Subset<T, ProductAggregateArgs>): Prisma.PrismaPromise<GetProductAggregateType<T>>

    /**
     * Group by Product.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProductGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProductGroupByArgs['orderBy'] }
        : { orderBy?: ProductGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProductGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Product model
   */
  readonly fields: ProductFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Product.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProductClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    skus<T extends Product$skusArgs<ExtArgs> = {}>(args?: Subset<T, Product$skusArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SkuPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    category<T extends Product$categoryArgs<ExtArgs> = {}>(args?: Subset<T, Product$categoryArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    syncJob<T extends Product$syncJobArgs<ExtArgs> = {}>(args?: Subset<T, Product$syncJobArgs<ExtArgs>>): Prisma__SyncJobClient<$Result.GetResult<Prisma.$SyncJobPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Product model
   */
  interface ProductFieldRefs {
    readonly id: FieldRef<"Product", 'String'>
    readonly name: FieldRef<"Product", 'String'>
    readonly description: FieldRef<"Product", 'String'>
    readonly status: FieldRef<"Product", 'String'>
    readonly createdAt: FieldRef<"Product", 'DateTime'>
    readonly updatedAt: FieldRef<"Product", 'DateTime'>
    readonly categoryId: FieldRef<"Product", 'String'>
    readonly syncJobId: FieldRef<"Product", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Product findUnique
   */
  export type ProductFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product findUniqueOrThrow
   */
  export type ProductFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product findFirst
   */
  export type ProductFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Products.
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Products.
     */
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * Product findFirstOrThrow
   */
  export type ProductFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Products.
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Products.
     */
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * Product findMany
   */
  export type ProductFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Products to fetch.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Products.
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * Product create
   */
  export type ProductCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * The data needed to create a Product.
     */
    data: XOR<ProductCreateInput, ProductUncheckedCreateInput>
  }

  /**
   * Product createMany
   */
  export type ProductCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Products.
     */
    data: ProductCreateManyInput | ProductCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Product createManyAndReturn
   */
  export type ProductCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * The data used to create many Products.
     */
    data: ProductCreateManyInput | ProductCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Product update
   */
  export type ProductUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * The data needed to update a Product.
     */
    data: XOR<ProductUpdateInput, ProductUncheckedUpdateInput>
    /**
     * Choose, which Product to update.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product updateMany
   */
  export type ProductUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Products.
     */
    data: XOR<ProductUpdateManyMutationInput, ProductUncheckedUpdateManyInput>
    /**
     * Filter which Products to update
     */
    where?: ProductWhereInput
    /**
     * Limit how many Products to update.
     */
    limit?: number
  }

  /**
   * Product updateManyAndReturn
   */
  export type ProductUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * The data used to update Products.
     */
    data: XOR<ProductUpdateManyMutationInput, ProductUncheckedUpdateManyInput>
    /**
     * Filter which Products to update
     */
    where?: ProductWhereInput
    /**
     * Limit how many Products to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Product upsert
   */
  export type ProductUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * The filter to search for the Product to update in case it exists.
     */
    where: ProductWhereUniqueInput
    /**
     * In case the Product found by the `where` argument doesn't exist, create a new Product with this data.
     */
    create: XOR<ProductCreateInput, ProductUncheckedCreateInput>
    /**
     * In case the Product was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProductUpdateInput, ProductUncheckedUpdateInput>
  }

  /**
   * Product delete
   */
  export type ProductDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter which Product to delete.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product deleteMany
   */
  export type ProductDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Products to delete
     */
    where?: ProductWhereInput
    /**
     * Limit how many Products to delete.
     */
    limit?: number
  }

  /**
   * Product.skus
   */
  export type Product$skusArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sku
     */
    select?: SkuSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sku
     */
    omit?: SkuOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkuInclude<ExtArgs> | null
    where?: SkuWhereInput
    orderBy?: SkuOrderByWithRelationInput | SkuOrderByWithRelationInput[]
    cursor?: SkuWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SkuScalarFieldEnum | SkuScalarFieldEnum[]
  }

  /**
   * Product.category
   */
  export type Product$categoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    where?: CategoryWhereInput
  }

  /**
   * Product.syncJob
   */
  export type Product$syncJobArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SyncJob
     */
    select?: SyncJobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SyncJob
     */
    omit?: SyncJobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SyncJobInclude<ExtArgs> | null
    where?: SyncJobWhereInput
  }

  /**
   * Product without action
   */
  export type ProductDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
  }


  /**
   * Model Sku
   */

  export type AggregateSku = {
    _count: SkuCountAggregateOutputType | null
    _min: SkuMinAggregateOutputType | null
    _max: SkuMaxAggregateOutputType | null
  }

  export type SkuMinAggregateOutputType = {
    id: string | null
    productId: string | null
    code: string | null
    barcode: string | null
    name: string | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SkuMaxAggregateOutputType = {
    id: string | null
    productId: string | null
    code: string | null
    barcode: string | null
    name: string | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SkuCountAggregateOutputType = {
    id: number
    productId: number
    code: number
    barcode: number
    name: number
    status: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SkuMinAggregateInputType = {
    id?: true
    productId?: true
    code?: true
    barcode?: true
    name?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SkuMaxAggregateInputType = {
    id?: true
    productId?: true
    code?: true
    barcode?: true
    name?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SkuCountAggregateInputType = {
    id?: true
    productId?: true
    code?: true
    barcode?: true
    name?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SkuAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sku to aggregate.
     */
    where?: SkuWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Skus to fetch.
     */
    orderBy?: SkuOrderByWithRelationInput | SkuOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SkuWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Skus from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Skus.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Skus
    **/
    _count?: true | SkuCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SkuMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SkuMaxAggregateInputType
  }

  export type GetSkuAggregateType<T extends SkuAggregateArgs> = {
        [P in keyof T & keyof AggregateSku]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSku[P]>
      : GetScalarType<T[P], AggregateSku[P]>
  }




  export type SkuGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SkuWhereInput
    orderBy?: SkuOrderByWithAggregationInput | SkuOrderByWithAggregationInput[]
    by: SkuScalarFieldEnum[] | SkuScalarFieldEnum
    having?: SkuScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SkuCountAggregateInputType | true
    _min?: SkuMinAggregateInputType
    _max?: SkuMaxAggregateInputType
  }

  export type SkuGroupByOutputType = {
    id: string
    productId: string
    code: string
    barcode: string | null
    name: string
    status: string
    createdAt: Date
    updatedAt: Date
    _count: SkuCountAggregateOutputType | null
    _min: SkuMinAggregateOutputType | null
    _max: SkuMaxAggregateOutputType | null
  }

  type GetSkuGroupByPayload<T extends SkuGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SkuGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SkuGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SkuGroupByOutputType[P]>
            : GetScalarType<T[P], SkuGroupByOutputType[P]>
        }
      >
    >


  export type SkuSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    productId?: boolean
    code?: boolean
    barcode?: boolean
    name?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    product?: boolean | ProductDefaultArgs<ExtArgs>
    images?: boolean | Sku$imagesArgs<ExtArgs>
    prices?: boolean | Sku$pricesArgs<ExtArgs>
    stocks?: boolean | Sku$stocksArgs<ExtArgs>
    _count?: boolean | SkuCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sku"]>

  export type SkuSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    productId?: boolean
    code?: boolean
    barcode?: boolean
    name?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sku"]>

  export type SkuSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    productId?: boolean
    code?: boolean
    barcode?: boolean
    name?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sku"]>

  export type SkuSelectScalar = {
    id?: boolean
    productId?: boolean
    code?: boolean
    barcode?: boolean
    name?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type SkuOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "productId" | "code" | "barcode" | "name" | "status" | "createdAt" | "updatedAt", ExtArgs["result"]["sku"]>
  export type SkuInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    product?: boolean | ProductDefaultArgs<ExtArgs>
    images?: boolean | Sku$imagesArgs<ExtArgs>
    prices?: boolean | Sku$pricesArgs<ExtArgs>
    stocks?: boolean | Sku$stocksArgs<ExtArgs>
    _count?: boolean | SkuCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SkuIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }
  export type SkuIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }

  export type $SkuPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Sku"
    objects: {
      product: Prisma.$ProductPayload<ExtArgs>
      images: Prisma.$SkuImagePayload<ExtArgs>[]
      prices: Prisma.$SkuPricePayload<ExtArgs>[]
      stocks: Prisma.$SkuStockPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      productId: string
      code: string
      barcode: string | null
      name: string
      status: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["sku"]>
    composites: {}
  }

  type SkuGetPayload<S extends boolean | null | undefined | SkuDefaultArgs> = $Result.GetResult<Prisma.$SkuPayload, S>

  type SkuCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SkuFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SkuCountAggregateInputType | true
    }

  export interface SkuDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Sku'], meta: { name: 'Sku' } }
    /**
     * Find zero or one Sku that matches the filter.
     * @param {SkuFindUniqueArgs} args - Arguments to find a Sku
     * @example
     * // Get one Sku
     * const sku = await prisma.sku.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SkuFindUniqueArgs>(args: SelectSubset<T, SkuFindUniqueArgs<ExtArgs>>): Prisma__SkuClient<$Result.GetResult<Prisma.$SkuPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Sku that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SkuFindUniqueOrThrowArgs} args - Arguments to find a Sku
     * @example
     * // Get one Sku
     * const sku = await prisma.sku.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SkuFindUniqueOrThrowArgs>(args: SelectSubset<T, SkuFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SkuClient<$Result.GetResult<Prisma.$SkuPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Sku that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkuFindFirstArgs} args - Arguments to find a Sku
     * @example
     * // Get one Sku
     * const sku = await prisma.sku.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SkuFindFirstArgs>(args?: SelectSubset<T, SkuFindFirstArgs<ExtArgs>>): Prisma__SkuClient<$Result.GetResult<Prisma.$SkuPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Sku that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkuFindFirstOrThrowArgs} args - Arguments to find a Sku
     * @example
     * // Get one Sku
     * const sku = await prisma.sku.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SkuFindFirstOrThrowArgs>(args?: SelectSubset<T, SkuFindFirstOrThrowArgs<ExtArgs>>): Prisma__SkuClient<$Result.GetResult<Prisma.$SkuPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Skus that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkuFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Skus
     * const skus = await prisma.sku.findMany()
     * 
     * // Get first 10 Skus
     * const skus = await prisma.sku.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const skuWithIdOnly = await prisma.sku.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SkuFindManyArgs>(args?: SelectSubset<T, SkuFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SkuPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Sku.
     * @param {SkuCreateArgs} args - Arguments to create a Sku.
     * @example
     * // Create one Sku
     * const Sku = await prisma.sku.create({
     *   data: {
     *     // ... data to create a Sku
     *   }
     * })
     * 
     */
    create<T extends SkuCreateArgs>(args: SelectSubset<T, SkuCreateArgs<ExtArgs>>): Prisma__SkuClient<$Result.GetResult<Prisma.$SkuPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Skus.
     * @param {SkuCreateManyArgs} args - Arguments to create many Skus.
     * @example
     * // Create many Skus
     * const sku = await prisma.sku.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SkuCreateManyArgs>(args?: SelectSubset<T, SkuCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Skus and returns the data saved in the database.
     * @param {SkuCreateManyAndReturnArgs} args - Arguments to create many Skus.
     * @example
     * // Create many Skus
     * const sku = await prisma.sku.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Skus and only return the `id`
     * const skuWithIdOnly = await prisma.sku.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SkuCreateManyAndReturnArgs>(args?: SelectSubset<T, SkuCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SkuPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Sku.
     * @param {SkuDeleteArgs} args - Arguments to delete one Sku.
     * @example
     * // Delete one Sku
     * const Sku = await prisma.sku.delete({
     *   where: {
     *     // ... filter to delete one Sku
     *   }
     * })
     * 
     */
    delete<T extends SkuDeleteArgs>(args: SelectSubset<T, SkuDeleteArgs<ExtArgs>>): Prisma__SkuClient<$Result.GetResult<Prisma.$SkuPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Sku.
     * @param {SkuUpdateArgs} args - Arguments to update one Sku.
     * @example
     * // Update one Sku
     * const sku = await prisma.sku.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SkuUpdateArgs>(args: SelectSubset<T, SkuUpdateArgs<ExtArgs>>): Prisma__SkuClient<$Result.GetResult<Prisma.$SkuPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Skus.
     * @param {SkuDeleteManyArgs} args - Arguments to filter Skus to delete.
     * @example
     * // Delete a few Skus
     * const { count } = await prisma.sku.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SkuDeleteManyArgs>(args?: SelectSubset<T, SkuDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Skus.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkuUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Skus
     * const sku = await prisma.sku.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SkuUpdateManyArgs>(args: SelectSubset<T, SkuUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Skus and returns the data updated in the database.
     * @param {SkuUpdateManyAndReturnArgs} args - Arguments to update many Skus.
     * @example
     * // Update many Skus
     * const sku = await prisma.sku.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Skus and only return the `id`
     * const skuWithIdOnly = await prisma.sku.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SkuUpdateManyAndReturnArgs>(args: SelectSubset<T, SkuUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SkuPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Sku.
     * @param {SkuUpsertArgs} args - Arguments to update or create a Sku.
     * @example
     * // Update or create a Sku
     * const sku = await prisma.sku.upsert({
     *   create: {
     *     // ... data to create a Sku
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Sku we want to update
     *   }
     * })
     */
    upsert<T extends SkuUpsertArgs>(args: SelectSubset<T, SkuUpsertArgs<ExtArgs>>): Prisma__SkuClient<$Result.GetResult<Prisma.$SkuPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Skus.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkuCountArgs} args - Arguments to filter Skus to count.
     * @example
     * // Count the number of Skus
     * const count = await prisma.sku.count({
     *   where: {
     *     // ... the filter for the Skus we want to count
     *   }
     * })
    **/
    count<T extends SkuCountArgs>(
      args?: Subset<T, SkuCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SkuCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Sku.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkuAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SkuAggregateArgs>(args: Subset<T, SkuAggregateArgs>): Prisma.PrismaPromise<GetSkuAggregateType<T>>

    /**
     * Group by Sku.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkuGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SkuGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SkuGroupByArgs['orderBy'] }
        : { orderBy?: SkuGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SkuGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSkuGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Sku model
   */
  readonly fields: SkuFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Sku.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SkuClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    product<T extends ProductDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProductDefaultArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    images<T extends Sku$imagesArgs<ExtArgs> = {}>(args?: Subset<T, Sku$imagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SkuImagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    prices<T extends Sku$pricesArgs<ExtArgs> = {}>(args?: Subset<T, Sku$pricesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SkuPricePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    stocks<T extends Sku$stocksArgs<ExtArgs> = {}>(args?: Subset<T, Sku$stocksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SkuStockPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Sku model
   */
  interface SkuFieldRefs {
    readonly id: FieldRef<"Sku", 'String'>
    readonly productId: FieldRef<"Sku", 'String'>
    readonly code: FieldRef<"Sku", 'String'>
    readonly barcode: FieldRef<"Sku", 'String'>
    readonly name: FieldRef<"Sku", 'String'>
    readonly status: FieldRef<"Sku", 'String'>
    readonly createdAt: FieldRef<"Sku", 'DateTime'>
    readonly updatedAt: FieldRef<"Sku", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Sku findUnique
   */
  export type SkuFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sku
     */
    select?: SkuSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sku
     */
    omit?: SkuOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkuInclude<ExtArgs> | null
    /**
     * Filter, which Sku to fetch.
     */
    where: SkuWhereUniqueInput
  }

  /**
   * Sku findUniqueOrThrow
   */
  export type SkuFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sku
     */
    select?: SkuSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sku
     */
    omit?: SkuOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkuInclude<ExtArgs> | null
    /**
     * Filter, which Sku to fetch.
     */
    where: SkuWhereUniqueInput
  }

  /**
   * Sku findFirst
   */
  export type SkuFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sku
     */
    select?: SkuSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sku
     */
    omit?: SkuOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkuInclude<ExtArgs> | null
    /**
     * Filter, which Sku to fetch.
     */
    where?: SkuWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Skus to fetch.
     */
    orderBy?: SkuOrderByWithRelationInput | SkuOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Skus.
     */
    cursor?: SkuWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Skus from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Skus.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Skus.
     */
    distinct?: SkuScalarFieldEnum | SkuScalarFieldEnum[]
  }

  /**
   * Sku findFirstOrThrow
   */
  export type SkuFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sku
     */
    select?: SkuSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sku
     */
    omit?: SkuOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkuInclude<ExtArgs> | null
    /**
     * Filter, which Sku to fetch.
     */
    where?: SkuWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Skus to fetch.
     */
    orderBy?: SkuOrderByWithRelationInput | SkuOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Skus.
     */
    cursor?: SkuWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Skus from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Skus.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Skus.
     */
    distinct?: SkuScalarFieldEnum | SkuScalarFieldEnum[]
  }

  /**
   * Sku findMany
   */
  export type SkuFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sku
     */
    select?: SkuSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sku
     */
    omit?: SkuOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkuInclude<ExtArgs> | null
    /**
     * Filter, which Skus to fetch.
     */
    where?: SkuWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Skus to fetch.
     */
    orderBy?: SkuOrderByWithRelationInput | SkuOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Skus.
     */
    cursor?: SkuWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Skus from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Skus.
     */
    skip?: number
    distinct?: SkuScalarFieldEnum | SkuScalarFieldEnum[]
  }

  /**
   * Sku create
   */
  export type SkuCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sku
     */
    select?: SkuSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sku
     */
    omit?: SkuOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkuInclude<ExtArgs> | null
    /**
     * The data needed to create a Sku.
     */
    data: XOR<SkuCreateInput, SkuUncheckedCreateInput>
  }

  /**
   * Sku createMany
   */
  export type SkuCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Skus.
     */
    data: SkuCreateManyInput | SkuCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Sku createManyAndReturn
   */
  export type SkuCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sku
     */
    select?: SkuSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Sku
     */
    omit?: SkuOmit<ExtArgs> | null
    /**
     * The data used to create many Skus.
     */
    data: SkuCreateManyInput | SkuCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkuIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Sku update
   */
  export type SkuUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sku
     */
    select?: SkuSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sku
     */
    omit?: SkuOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkuInclude<ExtArgs> | null
    /**
     * The data needed to update a Sku.
     */
    data: XOR<SkuUpdateInput, SkuUncheckedUpdateInput>
    /**
     * Choose, which Sku to update.
     */
    where: SkuWhereUniqueInput
  }

  /**
   * Sku updateMany
   */
  export type SkuUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Skus.
     */
    data: XOR<SkuUpdateManyMutationInput, SkuUncheckedUpdateManyInput>
    /**
     * Filter which Skus to update
     */
    where?: SkuWhereInput
    /**
     * Limit how many Skus to update.
     */
    limit?: number
  }

  /**
   * Sku updateManyAndReturn
   */
  export type SkuUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sku
     */
    select?: SkuSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Sku
     */
    omit?: SkuOmit<ExtArgs> | null
    /**
     * The data used to update Skus.
     */
    data: XOR<SkuUpdateManyMutationInput, SkuUncheckedUpdateManyInput>
    /**
     * Filter which Skus to update
     */
    where?: SkuWhereInput
    /**
     * Limit how many Skus to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkuIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Sku upsert
   */
  export type SkuUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sku
     */
    select?: SkuSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sku
     */
    omit?: SkuOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkuInclude<ExtArgs> | null
    /**
     * The filter to search for the Sku to update in case it exists.
     */
    where: SkuWhereUniqueInput
    /**
     * In case the Sku found by the `where` argument doesn't exist, create a new Sku with this data.
     */
    create: XOR<SkuCreateInput, SkuUncheckedCreateInput>
    /**
     * In case the Sku was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SkuUpdateInput, SkuUncheckedUpdateInput>
  }

  /**
   * Sku delete
   */
  export type SkuDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sku
     */
    select?: SkuSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sku
     */
    omit?: SkuOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkuInclude<ExtArgs> | null
    /**
     * Filter which Sku to delete.
     */
    where: SkuWhereUniqueInput
  }

  /**
   * Sku deleteMany
   */
  export type SkuDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Skus to delete
     */
    where?: SkuWhereInput
    /**
     * Limit how many Skus to delete.
     */
    limit?: number
  }

  /**
   * Sku.images
   */
  export type Sku$imagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkuImage
     */
    select?: SkuImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SkuImage
     */
    omit?: SkuImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkuImageInclude<ExtArgs> | null
    where?: SkuImageWhereInput
    orderBy?: SkuImageOrderByWithRelationInput | SkuImageOrderByWithRelationInput[]
    cursor?: SkuImageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SkuImageScalarFieldEnum | SkuImageScalarFieldEnum[]
  }

  /**
   * Sku.prices
   */
  export type Sku$pricesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkuPrice
     */
    select?: SkuPriceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SkuPrice
     */
    omit?: SkuPriceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkuPriceInclude<ExtArgs> | null
    where?: SkuPriceWhereInput
    orderBy?: SkuPriceOrderByWithRelationInput | SkuPriceOrderByWithRelationInput[]
    cursor?: SkuPriceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SkuPriceScalarFieldEnum | SkuPriceScalarFieldEnum[]
  }

  /**
   * Sku.stocks
   */
  export type Sku$stocksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkuStock
     */
    select?: SkuStockSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SkuStock
     */
    omit?: SkuStockOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkuStockInclude<ExtArgs> | null
    where?: SkuStockWhereInput
    orderBy?: SkuStockOrderByWithRelationInput | SkuStockOrderByWithRelationInput[]
    cursor?: SkuStockWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SkuStockScalarFieldEnum | SkuStockScalarFieldEnum[]
  }

  /**
   * Sku without action
   */
  export type SkuDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sku
     */
    select?: SkuSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sku
     */
    omit?: SkuOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkuInclude<ExtArgs> | null
  }


  /**
   * Model SkuImage
   */

  export type AggregateSkuImage = {
    _count: SkuImageCountAggregateOutputType | null
    _avg: SkuImageAvgAggregateOutputType | null
    _sum: SkuImageSumAggregateOutputType | null
    _min: SkuImageMinAggregateOutputType | null
    _max: SkuImageMaxAggregateOutputType | null
  }

  export type SkuImageAvgAggregateOutputType = {
    order: number | null
  }

  export type SkuImageSumAggregateOutputType = {
    order: number | null
  }

  export type SkuImageMinAggregateOutputType = {
    id: string | null
    skuId: string | null
    url: string | null
    altText: string | null
    order: number | null
    createdAt: Date | null
  }

  export type SkuImageMaxAggregateOutputType = {
    id: string | null
    skuId: string | null
    url: string | null
    altText: string | null
    order: number | null
    createdAt: Date | null
  }

  export type SkuImageCountAggregateOutputType = {
    id: number
    skuId: number
    url: number
    altText: number
    order: number
    createdAt: number
    _all: number
  }


  export type SkuImageAvgAggregateInputType = {
    order?: true
  }

  export type SkuImageSumAggregateInputType = {
    order?: true
  }

  export type SkuImageMinAggregateInputType = {
    id?: true
    skuId?: true
    url?: true
    altText?: true
    order?: true
    createdAt?: true
  }

  export type SkuImageMaxAggregateInputType = {
    id?: true
    skuId?: true
    url?: true
    altText?: true
    order?: true
    createdAt?: true
  }

  export type SkuImageCountAggregateInputType = {
    id?: true
    skuId?: true
    url?: true
    altText?: true
    order?: true
    createdAt?: true
    _all?: true
  }

  export type SkuImageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SkuImage to aggregate.
     */
    where?: SkuImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SkuImages to fetch.
     */
    orderBy?: SkuImageOrderByWithRelationInput | SkuImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SkuImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SkuImages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SkuImages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SkuImages
    **/
    _count?: true | SkuImageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SkuImageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SkuImageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SkuImageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SkuImageMaxAggregateInputType
  }

  export type GetSkuImageAggregateType<T extends SkuImageAggregateArgs> = {
        [P in keyof T & keyof AggregateSkuImage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSkuImage[P]>
      : GetScalarType<T[P], AggregateSkuImage[P]>
  }




  export type SkuImageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SkuImageWhereInput
    orderBy?: SkuImageOrderByWithAggregationInput | SkuImageOrderByWithAggregationInput[]
    by: SkuImageScalarFieldEnum[] | SkuImageScalarFieldEnum
    having?: SkuImageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SkuImageCountAggregateInputType | true
    _avg?: SkuImageAvgAggregateInputType
    _sum?: SkuImageSumAggregateInputType
    _min?: SkuImageMinAggregateInputType
    _max?: SkuImageMaxAggregateInputType
  }

  export type SkuImageGroupByOutputType = {
    id: string
    skuId: string
    url: string
    altText: string | null
    order: number
    createdAt: Date
    _count: SkuImageCountAggregateOutputType | null
    _avg: SkuImageAvgAggregateOutputType | null
    _sum: SkuImageSumAggregateOutputType | null
    _min: SkuImageMinAggregateOutputType | null
    _max: SkuImageMaxAggregateOutputType | null
  }

  type GetSkuImageGroupByPayload<T extends SkuImageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SkuImageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SkuImageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SkuImageGroupByOutputType[P]>
            : GetScalarType<T[P], SkuImageGroupByOutputType[P]>
        }
      >
    >


  export type SkuImageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    skuId?: boolean
    url?: boolean
    altText?: boolean
    order?: boolean
    createdAt?: boolean
    sku?: boolean | SkuDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["skuImage"]>

  export type SkuImageSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    skuId?: boolean
    url?: boolean
    altText?: boolean
    order?: boolean
    createdAt?: boolean
    sku?: boolean | SkuDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["skuImage"]>

  export type SkuImageSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    skuId?: boolean
    url?: boolean
    altText?: boolean
    order?: boolean
    createdAt?: boolean
    sku?: boolean | SkuDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["skuImage"]>

  export type SkuImageSelectScalar = {
    id?: boolean
    skuId?: boolean
    url?: boolean
    altText?: boolean
    order?: boolean
    createdAt?: boolean
  }

  export type SkuImageOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "skuId" | "url" | "altText" | "order" | "createdAt", ExtArgs["result"]["skuImage"]>
  export type SkuImageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sku?: boolean | SkuDefaultArgs<ExtArgs>
  }
  export type SkuImageIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sku?: boolean | SkuDefaultArgs<ExtArgs>
  }
  export type SkuImageIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sku?: boolean | SkuDefaultArgs<ExtArgs>
  }

  export type $SkuImagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SkuImage"
    objects: {
      sku: Prisma.$SkuPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      skuId: string
      url: string
      altText: string | null
      order: number
      createdAt: Date
    }, ExtArgs["result"]["skuImage"]>
    composites: {}
  }

  type SkuImageGetPayload<S extends boolean | null | undefined | SkuImageDefaultArgs> = $Result.GetResult<Prisma.$SkuImagePayload, S>

  type SkuImageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SkuImageFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SkuImageCountAggregateInputType | true
    }

  export interface SkuImageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SkuImage'], meta: { name: 'SkuImage' } }
    /**
     * Find zero or one SkuImage that matches the filter.
     * @param {SkuImageFindUniqueArgs} args - Arguments to find a SkuImage
     * @example
     * // Get one SkuImage
     * const skuImage = await prisma.skuImage.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SkuImageFindUniqueArgs>(args: SelectSubset<T, SkuImageFindUniqueArgs<ExtArgs>>): Prisma__SkuImageClient<$Result.GetResult<Prisma.$SkuImagePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SkuImage that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SkuImageFindUniqueOrThrowArgs} args - Arguments to find a SkuImage
     * @example
     * // Get one SkuImage
     * const skuImage = await prisma.skuImage.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SkuImageFindUniqueOrThrowArgs>(args: SelectSubset<T, SkuImageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SkuImageClient<$Result.GetResult<Prisma.$SkuImagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SkuImage that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkuImageFindFirstArgs} args - Arguments to find a SkuImage
     * @example
     * // Get one SkuImage
     * const skuImage = await prisma.skuImage.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SkuImageFindFirstArgs>(args?: SelectSubset<T, SkuImageFindFirstArgs<ExtArgs>>): Prisma__SkuImageClient<$Result.GetResult<Prisma.$SkuImagePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SkuImage that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkuImageFindFirstOrThrowArgs} args - Arguments to find a SkuImage
     * @example
     * // Get one SkuImage
     * const skuImage = await prisma.skuImage.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SkuImageFindFirstOrThrowArgs>(args?: SelectSubset<T, SkuImageFindFirstOrThrowArgs<ExtArgs>>): Prisma__SkuImageClient<$Result.GetResult<Prisma.$SkuImagePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SkuImages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkuImageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SkuImages
     * const skuImages = await prisma.skuImage.findMany()
     * 
     * // Get first 10 SkuImages
     * const skuImages = await prisma.skuImage.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const skuImageWithIdOnly = await prisma.skuImage.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SkuImageFindManyArgs>(args?: SelectSubset<T, SkuImageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SkuImagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SkuImage.
     * @param {SkuImageCreateArgs} args - Arguments to create a SkuImage.
     * @example
     * // Create one SkuImage
     * const SkuImage = await prisma.skuImage.create({
     *   data: {
     *     // ... data to create a SkuImage
     *   }
     * })
     * 
     */
    create<T extends SkuImageCreateArgs>(args: SelectSubset<T, SkuImageCreateArgs<ExtArgs>>): Prisma__SkuImageClient<$Result.GetResult<Prisma.$SkuImagePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SkuImages.
     * @param {SkuImageCreateManyArgs} args - Arguments to create many SkuImages.
     * @example
     * // Create many SkuImages
     * const skuImage = await prisma.skuImage.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SkuImageCreateManyArgs>(args?: SelectSubset<T, SkuImageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SkuImages and returns the data saved in the database.
     * @param {SkuImageCreateManyAndReturnArgs} args - Arguments to create many SkuImages.
     * @example
     * // Create many SkuImages
     * const skuImage = await prisma.skuImage.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SkuImages and only return the `id`
     * const skuImageWithIdOnly = await prisma.skuImage.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SkuImageCreateManyAndReturnArgs>(args?: SelectSubset<T, SkuImageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SkuImagePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a SkuImage.
     * @param {SkuImageDeleteArgs} args - Arguments to delete one SkuImage.
     * @example
     * // Delete one SkuImage
     * const SkuImage = await prisma.skuImage.delete({
     *   where: {
     *     // ... filter to delete one SkuImage
     *   }
     * })
     * 
     */
    delete<T extends SkuImageDeleteArgs>(args: SelectSubset<T, SkuImageDeleteArgs<ExtArgs>>): Prisma__SkuImageClient<$Result.GetResult<Prisma.$SkuImagePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SkuImage.
     * @param {SkuImageUpdateArgs} args - Arguments to update one SkuImage.
     * @example
     * // Update one SkuImage
     * const skuImage = await prisma.skuImage.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SkuImageUpdateArgs>(args: SelectSubset<T, SkuImageUpdateArgs<ExtArgs>>): Prisma__SkuImageClient<$Result.GetResult<Prisma.$SkuImagePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SkuImages.
     * @param {SkuImageDeleteManyArgs} args - Arguments to filter SkuImages to delete.
     * @example
     * // Delete a few SkuImages
     * const { count } = await prisma.skuImage.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SkuImageDeleteManyArgs>(args?: SelectSubset<T, SkuImageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SkuImages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkuImageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SkuImages
     * const skuImage = await prisma.skuImage.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SkuImageUpdateManyArgs>(args: SelectSubset<T, SkuImageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SkuImages and returns the data updated in the database.
     * @param {SkuImageUpdateManyAndReturnArgs} args - Arguments to update many SkuImages.
     * @example
     * // Update many SkuImages
     * const skuImage = await prisma.skuImage.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more SkuImages and only return the `id`
     * const skuImageWithIdOnly = await prisma.skuImage.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SkuImageUpdateManyAndReturnArgs>(args: SelectSubset<T, SkuImageUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SkuImagePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one SkuImage.
     * @param {SkuImageUpsertArgs} args - Arguments to update or create a SkuImage.
     * @example
     * // Update or create a SkuImage
     * const skuImage = await prisma.skuImage.upsert({
     *   create: {
     *     // ... data to create a SkuImage
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SkuImage we want to update
     *   }
     * })
     */
    upsert<T extends SkuImageUpsertArgs>(args: SelectSubset<T, SkuImageUpsertArgs<ExtArgs>>): Prisma__SkuImageClient<$Result.GetResult<Prisma.$SkuImagePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SkuImages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkuImageCountArgs} args - Arguments to filter SkuImages to count.
     * @example
     * // Count the number of SkuImages
     * const count = await prisma.skuImage.count({
     *   where: {
     *     // ... the filter for the SkuImages we want to count
     *   }
     * })
    **/
    count<T extends SkuImageCountArgs>(
      args?: Subset<T, SkuImageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SkuImageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SkuImage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkuImageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SkuImageAggregateArgs>(args: Subset<T, SkuImageAggregateArgs>): Prisma.PrismaPromise<GetSkuImageAggregateType<T>>

    /**
     * Group by SkuImage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkuImageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SkuImageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SkuImageGroupByArgs['orderBy'] }
        : { orderBy?: SkuImageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SkuImageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSkuImageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SkuImage model
   */
  readonly fields: SkuImageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SkuImage.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SkuImageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    sku<T extends SkuDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SkuDefaultArgs<ExtArgs>>): Prisma__SkuClient<$Result.GetResult<Prisma.$SkuPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SkuImage model
   */
  interface SkuImageFieldRefs {
    readonly id: FieldRef<"SkuImage", 'String'>
    readonly skuId: FieldRef<"SkuImage", 'String'>
    readonly url: FieldRef<"SkuImage", 'String'>
    readonly altText: FieldRef<"SkuImage", 'String'>
    readonly order: FieldRef<"SkuImage", 'Int'>
    readonly createdAt: FieldRef<"SkuImage", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SkuImage findUnique
   */
  export type SkuImageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkuImage
     */
    select?: SkuImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SkuImage
     */
    omit?: SkuImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkuImageInclude<ExtArgs> | null
    /**
     * Filter, which SkuImage to fetch.
     */
    where: SkuImageWhereUniqueInput
  }

  /**
   * SkuImage findUniqueOrThrow
   */
  export type SkuImageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkuImage
     */
    select?: SkuImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SkuImage
     */
    omit?: SkuImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkuImageInclude<ExtArgs> | null
    /**
     * Filter, which SkuImage to fetch.
     */
    where: SkuImageWhereUniqueInput
  }

  /**
   * SkuImage findFirst
   */
  export type SkuImageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkuImage
     */
    select?: SkuImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SkuImage
     */
    omit?: SkuImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkuImageInclude<ExtArgs> | null
    /**
     * Filter, which SkuImage to fetch.
     */
    where?: SkuImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SkuImages to fetch.
     */
    orderBy?: SkuImageOrderByWithRelationInput | SkuImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SkuImages.
     */
    cursor?: SkuImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SkuImages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SkuImages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SkuImages.
     */
    distinct?: SkuImageScalarFieldEnum | SkuImageScalarFieldEnum[]
  }

  /**
   * SkuImage findFirstOrThrow
   */
  export type SkuImageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkuImage
     */
    select?: SkuImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SkuImage
     */
    omit?: SkuImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkuImageInclude<ExtArgs> | null
    /**
     * Filter, which SkuImage to fetch.
     */
    where?: SkuImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SkuImages to fetch.
     */
    orderBy?: SkuImageOrderByWithRelationInput | SkuImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SkuImages.
     */
    cursor?: SkuImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SkuImages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SkuImages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SkuImages.
     */
    distinct?: SkuImageScalarFieldEnum | SkuImageScalarFieldEnum[]
  }

  /**
   * SkuImage findMany
   */
  export type SkuImageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkuImage
     */
    select?: SkuImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SkuImage
     */
    omit?: SkuImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkuImageInclude<ExtArgs> | null
    /**
     * Filter, which SkuImages to fetch.
     */
    where?: SkuImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SkuImages to fetch.
     */
    orderBy?: SkuImageOrderByWithRelationInput | SkuImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SkuImages.
     */
    cursor?: SkuImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SkuImages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SkuImages.
     */
    skip?: number
    distinct?: SkuImageScalarFieldEnum | SkuImageScalarFieldEnum[]
  }

  /**
   * SkuImage create
   */
  export type SkuImageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkuImage
     */
    select?: SkuImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SkuImage
     */
    omit?: SkuImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkuImageInclude<ExtArgs> | null
    /**
     * The data needed to create a SkuImage.
     */
    data: XOR<SkuImageCreateInput, SkuImageUncheckedCreateInput>
  }

  /**
   * SkuImage createMany
   */
  export type SkuImageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SkuImages.
     */
    data: SkuImageCreateManyInput | SkuImageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SkuImage createManyAndReturn
   */
  export type SkuImageCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkuImage
     */
    select?: SkuImageSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SkuImage
     */
    omit?: SkuImageOmit<ExtArgs> | null
    /**
     * The data used to create many SkuImages.
     */
    data: SkuImageCreateManyInput | SkuImageCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkuImageIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * SkuImage update
   */
  export type SkuImageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkuImage
     */
    select?: SkuImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SkuImage
     */
    omit?: SkuImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkuImageInclude<ExtArgs> | null
    /**
     * The data needed to update a SkuImage.
     */
    data: XOR<SkuImageUpdateInput, SkuImageUncheckedUpdateInput>
    /**
     * Choose, which SkuImage to update.
     */
    where: SkuImageWhereUniqueInput
  }

  /**
   * SkuImage updateMany
   */
  export type SkuImageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SkuImages.
     */
    data: XOR<SkuImageUpdateManyMutationInput, SkuImageUncheckedUpdateManyInput>
    /**
     * Filter which SkuImages to update
     */
    where?: SkuImageWhereInput
    /**
     * Limit how many SkuImages to update.
     */
    limit?: number
  }

  /**
   * SkuImage updateManyAndReturn
   */
  export type SkuImageUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkuImage
     */
    select?: SkuImageSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SkuImage
     */
    omit?: SkuImageOmit<ExtArgs> | null
    /**
     * The data used to update SkuImages.
     */
    data: XOR<SkuImageUpdateManyMutationInput, SkuImageUncheckedUpdateManyInput>
    /**
     * Filter which SkuImages to update
     */
    where?: SkuImageWhereInput
    /**
     * Limit how many SkuImages to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkuImageIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * SkuImage upsert
   */
  export type SkuImageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkuImage
     */
    select?: SkuImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SkuImage
     */
    omit?: SkuImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkuImageInclude<ExtArgs> | null
    /**
     * The filter to search for the SkuImage to update in case it exists.
     */
    where: SkuImageWhereUniqueInput
    /**
     * In case the SkuImage found by the `where` argument doesn't exist, create a new SkuImage with this data.
     */
    create: XOR<SkuImageCreateInput, SkuImageUncheckedCreateInput>
    /**
     * In case the SkuImage was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SkuImageUpdateInput, SkuImageUncheckedUpdateInput>
  }

  /**
   * SkuImage delete
   */
  export type SkuImageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkuImage
     */
    select?: SkuImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SkuImage
     */
    omit?: SkuImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkuImageInclude<ExtArgs> | null
    /**
     * Filter which SkuImage to delete.
     */
    where: SkuImageWhereUniqueInput
  }

  /**
   * SkuImage deleteMany
   */
  export type SkuImageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SkuImages to delete
     */
    where?: SkuImageWhereInput
    /**
     * Limit how many SkuImages to delete.
     */
    limit?: number
  }

  /**
   * SkuImage without action
   */
  export type SkuImageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkuImage
     */
    select?: SkuImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SkuImage
     */
    omit?: SkuImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkuImageInclude<ExtArgs> | null
  }


  /**
   * Model SkuPrice
   */

  export type AggregateSkuPrice = {
    _count: SkuPriceCountAggregateOutputType | null
    _avg: SkuPriceAvgAggregateOutputType | null
    _sum: SkuPriceSumAggregateOutputType | null
    _min: SkuPriceMinAggregateOutputType | null
    _max: SkuPriceMaxAggregateOutputType | null
  }

  export type SkuPriceAvgAggregateOutputType = {
    price: Decimal | null
  }

  export type SkuPriceSumAggregateOutputType = {
    price: Decimal | null
  }

  export type SkuPriceMinAggregateOutputType = {
    id: string | null
    skuId: string | null
    priceListId: string | null
    price: Decimal | null
    validFrom: Date | null
    validTo: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SkuPriceMaxAggregateOutputType = {
    id: string | null
    skuId: string | null
    priceListId: string | null
    price: Decimal | null
    validFrom: Date | null
    validTo: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SkuPriceCountAggregateOutputType = {
    id: number
    skuId: number
    priceListId: number
    price: number
    validFrom: number
    validTo: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SkuPriceAvgAggregateInputType = {
    price?: true
  }

  export type SkuPriceSumAggregateInputType = {
    price?: true
  }

  export type SkuPriceMinAggregateInputType = {
    id?: true
    skuId?: true
    priceListId?: true
    price?: true
    validFrom?: true
    validTo?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SkuPriceMaxAggregateInputType = {
    id?: true
    skuId?: true
    priceListId?: true
    price?: true
    validFrom?: true
    validTo?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SkuPriceCountAggregateInputType = {
    id?: true
    skuId?: true
    priceListId?: true
    price?: true
    validFrom?: true
    validTo?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SkuPriceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SkuPrice to aggregate.
     */
    where?: SkuPriceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SkuPrices to fetch.
     */
    orderBy?: SkuPriceOrderByWithRelationInput | SkuPriceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SkuPriceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SkuPrices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SkuPrices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SkuPrices
    **/
    _count?: true | SkuPriceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SkuPriceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SkuPriceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SkuPriceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SkuPriceMaxAggregateInputType
  }

  export type GetSkuPriceAggregateType<T extends SkuPriceAggregateArgs> = {
        [P in keyof T & keyof AggregateSkuPrice]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSkuPrice[P]>
      : GetScalarType<T[P], AggregateSkuPrice[P]>
  }




  export type SkuPriceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SkuPriceWhereInput
    orderBy?: SkuPriceOrderByWithAggregationInput | SkuPriceOrderByWithAggregationInput[]
    by: SkuPriceScalarFieldEnum[] | SkuPriceScalarFieldEnum
    having?: SkuPriceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SkuPriceCountAggregateInputType | true
    _avg?: SkuPriceAvgAggregateInputType
    _sum?: SkuPriceSumAggregateInputType
    _min?: SkuPriceMinAggregateInputType
    _max?: SkuPriceMaxAggregateInputType
  }

  export type SkuPriceGroupByOutputType = {
    id: string
    skuId: string
    priceListId: string
    price: Decimal
    validFrom: Date
    validTo: Date | null
    createdAt: Date
    updatedAt: Date
    _count: SkuPriceCountAggregateOutputType | null
    _avg: SkuPriceAvgAggregateOutputType | null
    _sum: SkuPriceSumAggregateOutputType | null
    _min: SkuPriceMinAggregateOutputType | null
    _max: SkuPriceMaxAggregateOutputType | null
  }

  type GetSkuPriceGroupByPayload<T extends SkuPriceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SkuPriceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SkuPriceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SkuPriceGroupByOutputType[P]>
            : GetScalarType<T[P], SkuPriceGroupByOutputType[P]>
        }
      >
    >


  export type SkuPriceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    skuId?: boolean
    priceListId?: boolean
    price?: boolean
    validFrom?: boolean
    validTo?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    sku?: boolean | SkuDefaultArgs<ExtArgs>
    priceList?: boolean | PriceListDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["skuPrice"]>

  export type SkuPriceSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    skuId?: boolean
    priceListId?: boolean
    price?: boolean
    validFrom?: boolean
    validTo?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    sku?: boolean | SkuDefaultArgs<ExtArgs>
    priceList?: boolean | PriceListDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["skuPrice"]>

  export type SkuPriceSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    skuId?: boolean
    priceListId?: boolean
    price?: boolean
    validFrom?: boolean
    validTo?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    sku?: boolean | SkuDefaultArgs<ExtArgs>
    priceList?: boolean | PriceListDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["skuPrice"]>

  export type SkuPriceSelectScalar = {
    id?: boolean
    skuId?: boolean
    priceListId?: boolean
    price?: boolean
    validFrom?: boolean
    validTo?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type SkuPriceOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "skuId" | "priceListId" | "price" | "validFrom" | "validTo" | "createdAt" | "updatedAt", ExtArgs["result"]["skuPrice"]>
  export type SkuPriceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sku?: boolean | SkuDefaultArgs<ExtArgs>
    priceList?: boolean | PriceListDefaultArgs<ExtArgs>
  }
  export type SkuPriceIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sku?: boolean | SkuDefaultArgs<ExtArgs>
    priceList?: boolean | PriceListDefaultArgs<ExtArgs>
  }
  export type SkuPriceIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sku?: boolean | SkuDefaultArgs<ExtArgs>
    priceList?: boolean | PriceListDefaultArgs<ExtArgs>
  }

  export type $SkuPricePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SkuPrice"
    objects: {
      sku: Prisma.$SkuPayload<ExtArgs>
      priceList: Prisma.$PriceListPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      skuId: string
      priceListId: string
      price: Prisma.Decimal
      validFrom: Date
      validTo: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["skuPrice"]>
    composites: {}
  }

  type SkuPriceGetPayload<S extends boolean | null | undefined | SkuPriceDefaultArgs> = $Result.GetResult<Prisma.$SkuPricePayload, S>

  type SkuPriceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SkuPriceFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SkuPriceCountAggregateInputType | true
    }

  export interface SkuPriceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SkuPrice'], meta: { name: 'SkuPrice' } }
    /**
     * Find zero or one SkuPrice that matches the filter.
     * @param {SkuPriceFindUniqueArgs} args - Arguments to find a SkuPrice
     * @example
     * // Get one SkuPrice
     * const skuPrice = await prisma.skuPrice.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SkuPriceFindUniqueArgs>(args: SelectSubset<T, SkuPriceFindUniqueArgs<ExtArgs>>): Prisma__SkuPriceClient<$Result.GetResult<Prisma.$SkuPricePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SkuPrice that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SkuPriceFindUniqueOrThrowArgs} args - Arguments to find a SkuPrice
     * @example
     * // Get one SkuPrice
     * const skuPrice = await prisma.skuPrice.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SkuPriceFindUniqueOrThrowArgs>(args: SelectSubset<T, SkuPriceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SkuPriceClient<$Result.GetResult<Prisma.$SkuPricePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SkuPrice that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkuPriceFindFirstArgs} args - Arguments to find a SkuPrice
     * @example
     * // Get one SkuPrice
     * const skuPrice = await prisma.skuPrice.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SkuPriceFindFirstArgs>(args?: SelectSubset<T, SkuPriceFindFirstArgs<ExtArgs>>): Prisma__SkuPriceClient<$Result.GetResult<Prisma.$SkuPricePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SkuPrice that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkuPriceFindFirstOrThrowArgs} args - Arguments to find a SkuPrice
     * @example
     * // Get one SkuPrice
     * const skuPrice = await prisma.skuPrice.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SkuPriceFindFirstOrThrowArgs>(args?: SelectSubset<T, SkuPriceFindFirstOrThrowArgs<ExtArgs>>): Prisma__SkuPriceClient<$Result.GetResult<Prisma.$SkuPricePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SkuPrices that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkuPriceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SkuPrices
     * const skuPrices = await prisma.skuPrice.findMany()
     * 
     * // Get first 10 SkuPrices
     * const skuPrices = await prisma.skuPrice.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const skuPriceWithIdOnly = await prisma.skuPrice.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SkuPriceFindManyArgs>(args?: SelectSubset<T, SkuPriceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SkuPricePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SkuPrice.
     * @param {SkuPriceCreateArgs} args - Arguments to create a SkuPrice.
     * @example
     * // Create one SkuPrice
     * const SkuPrice = await prisma.skuPrice.create({
     *   data: {
     *     // ... data to create a SkuPrice
     *   }
     * })
     * 
     */
    create<T extends SkuPriceCreateArgs>(args: SelectSubset<T, SkuPriceCreateArgs<ExtArgs>>): Prisma__SkuPriceClient<$Result.GetResult<Prisma.$SkuPricePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SkuPrices.
     * @param {SkuPriceCreateManyArgs} args - Arguments to create many SkuPrices.
     * @example
     * // Create many SkuPrices
     * const skuPrice = await prisma.skuPrice.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SkuPriceCreateManyArgs>(args?: SelectSubset<T, SkuPriceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SkuPrices and returns the data saved in the database.
     * @param {SkuPriceCreateManyAndReturnArgs} args - Arguments to create many SkuPrices.
     * @example
     * // Create many SkuPrices
     * const skuPrice = await prisma.skuPrice.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SkuPrices and only return the `id`
     * const skuPriceWithIdOnly = await prisma.skuPrice.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SkuPriceCreateManyAndReturnArgs>(args?: SelectSubset<T, SkuPriceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SkuPricePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a SkuPrice.
     * @param {SkuPriceDeleteArgs} args - Arguments to delete one SkuPrice.
     * @example
     * // Delete one SkuPrice
     * const SkuPrice = await prisma.skuPrice.delete({
     *   where: {
     *     // ... filter to delete one SkuPrice
     *   }
     * })
     * 
     */
    delete<T extends SkuPriceDeleteArgs>(args: SelectSubset<T, SkuPriceDeleteArgs<ExtArgs>>): Prisma__SkuPriceClient<$Result.GetResult<Prisma.$SkuPricePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SkuPrice.
     * @param {SkuPriceUpdateArgs} args - Arguments to update one SkuPrice.
     * @example
     * // Update one SkuPrice
     * const skuPrice = await prisma.skuPrice.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SkuPriceUpdateArgs>(args: SelectSubset<T, SkuPriceUpdateArgs<ExtArgs>>): Prisma__SkuPriceClient<$Result.GetResult<Prisma.$SkuPricePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SkuPrices.
     * @param {SkuPriceDeleteManyArgs} args - Arguments to filter SkuPrices to delete.
     * @example
     * // Delete a few SkuPrices
     * const { count } = await prisma.skuPrice.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SkuPriceDeleteManyArgs>(args?: SelectSubset<T, SkuPriceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SkuPrices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkuPriceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SkuPrices
     * const skuPrice = await prisma.skuPrice.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SkuPriceUpdateManyArgs>(args: SelectSubset<T, SkuPriceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SkuPrices and returns the data updated in the database.
     * @param {SkuPriceUpdateManyAndReturnArgs} args - Arguments to update many SkuPrices.
     * @example
     * // Update many SkuPrices
     * const skuPrice = await prisma.skuPrice.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more SkuPrices and only return the `id`
     * const skuPriceWithIdOnly = await prisma.skuPrice.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SkuPriceUpdateManyAndReturnArgs>(args: SelectSubset<T, SkuPriceUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SkuPricePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one SkuPrice.
     * @param {SkuPriceUpsertArgs} args - Arguments to update or create a SkuPrice.
     * @example
     * // Update or create a SkuPrice
     * const skuPrice = await prisma.skuPrice.upsert({
     *   create: {
     *     // ... data to create a SkuPrice
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SkuPrice we want to update
     *   }
     * })
     */
    upsert<T extends SkuPriceUpsertArgs>(args: SelectSubset<T, SkuPriceUpsertArgs<ExtArgs>>): Prisma__SkuPriceClient<$Result.GetResult<Prisma.$SkuPricePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SkuPrices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkuPriceCountArgs} args - Arguments to filter SkuPrices to count.
     * @example
     * // Count the number of SkuPrices
     * const count = await prisma.skuPrice.count({
     *   where: {
     *     // ... the filter for the SkuPrices we want to count
     *   }
     * })
    **/
    count<T extends SkuPriceCountArgs>(
      args?: Subset<T, SkuPriceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SkuPriceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SkuPrice.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkuPriceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SkuPriceAggregateArgs>(args: Subset<T, SkuPriceAggregateArgs>): Prisma.PrismaPromise<GetSkuPriceAggregateType<T>>

    /**
     * Group by SkuPrice.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkuPriceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SkuPriceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SkuPriceGroupByArgs['orderBy'] }
        : { orderBy?: SkuPriceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SkuPriceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSkuPriceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SkuPrice model
   */
  readonly fields: SkuPriceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SkuPrice.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SkuPriceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    sku<T extends SkuDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SkuDefaultArgs<ExtArgs>>): Prisma__SkuClient<$Result.GetResult<Prisma.$SkuPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    priceList<T extends PriceListDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PriceListDefaultArgs<ExtArgs>>): Prisma__PriceListClient<$Result.GetResult<Prisma.$PriceListPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SkuPrice model
   */
  interface SkuPriceFieldRefs {
    readonly id: FieldRef<"SkuPrice", 'String'>
    readonly skuId: FieldRef<"SkuPrice", 'String'>
    readonly priceListId: FieldRef<"SkuPrice", 'String'>
    readonly price: FieldRef<"SkuPrice", 'Decimal'>
    readonly validFrom: FieldRef<"SkuPrice", 'DateTime'>
    readonly validTo: FieldRef<"SkuPrice", 'DateTime'>
    readonly createdAt: FieldRef<"SkuPrice", 'DateTime'>
    readonly updatedAt: FieldRef<"SkuPrice", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SkuPrice findUnique
   */
  export type SkuPriceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkuPrice
     */
    select?: SkuPriceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SkuPrice
     */
    omit?: SkuPriceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkuPriceInclude<ExtArgs> | null
    /**
     * Filter, which SkuPrice to fetch.
     */
    where: SkuPriceWhereUniqueInput
  }

  /**
   * SkuPrice findUniqueOrThrow
   */
  export type SkuPriceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkuPrice
     */
    select?: SkuPriceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SkuPrice
     */
    omit?: SkuPriceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkuPriceInclude<ExtArgs> | null
    /**
     * Filter, which SkuPrice to fetch.
     */
    where: SkuPriceWhereUniqueInput
  }

  /**
   * SkuPrice findFirst
   */
  export type SkuPriceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkuPrice
     */
    select?: SkuPriceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SkuPrice
     */
    omit?: SkuPriceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkuPriceInclude<ExtArgs> | null
    /**
     * Filter, which SkuPrice to fetch.
     */
    where?: SkuPriceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SkuPrices to fetch.
     */
    orderBy?: SkuPriceOrderByWithRelationInput | SkuPriceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SkuPrices.
     */
    cursor?: SkuPriceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SkuPrices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SkuPrices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SkuPrices.
     */
    distinct?: SkuPriceScalarFieldEnum | SkuPriceScalarFieldEnum[]
  }

  /**
   * SkuPrice findFirstOrThrow
   */
  export type SkuPriceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkuPrice
     */
    select?: SkuPriceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SkuPrice
     */
    omit?: SkuPriceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkuPriceInclude<ExtArgs> | null
    /**
     * Filter, which SkuPrice to fetch.
     */
    where?: SkuPriceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SkuPrices to fetch.
     */
    orderBy?: SkuPriceOrderByWithRelationInput | SkuPriceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SkuPrices.
     */
    cursor?: SkuPriceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SkuPrices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SkuPrices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SkuPrices.
     */
    distinct?: SkuPriceScalarFieldEnum | SkuPriceScalarFieldEnum[]
  }

  /**
   * SkuPrice findMany
   */
  export type SkuPriceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkuPrice
     */
    select?: SkuPriceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SkuPrice
     */
    omit?: SkuPriceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkuPriceInclude<ExtArgs> | null
    /**
     * Filter, which SkuPrices to fetch.
     */
    where?: SkuPriceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SkuPrices to fetch.
     */
    orderBy?: SkuPriceOrderByWithRelationInput | SkuPriceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SkuPrices.
     */
    cursor?: SkuPriceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SkuPrices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SkuPrices.
     */
    skip?: number
    distinct?: SkuPriceScalarFieldEnum | SkuPriceScalarFieldEnum[]
  }

  /**
   * SkuPrice create
   */
  export type SkuPriceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkuPrice
     */
    select?: SkuPriceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SkuPrice
     */
    omit?: SkuPriceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkuPriceInclude<ExtArgs> | null
    /**
     * The data needed to create a SkuPrice.
     */
    data: XOR<SkuPriceCreateInput, SkuPriceUncheckedCreateInput>
  }

  /**
   * SkuPrice createMany
   */
  export type SkuPriceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SkuPrices.
     */
    data: SkuPriceCreateManyInput | SkuPriceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SkuPrice createManyAndReturn
   */
  export type SkuPriceCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkuPrice
     */
    select?: SkuPriceSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SkuPrice
     */
    omit?: SkuPriceOmit<ExtArgs> | null
    /**
     * The data used to create many SkuPrices.
     */
    data: SkuPriceCreateManyInput | SkuPriceCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkuPriceIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * SkuPrice update
   */
  export type SkuPriceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkuPrice
     */
    select?: SkuPriceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SkuPrice
     */
    omit?: SkuPriceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkuPriceInclude<ExtArgs> | null
    /**
     * The data needed to update a SkuPrice.
     */
    data: XOR<SkuPriceUpdateInput, SkuPriceUncheckedUpdateInput>
    /**
     * Choose, which SkuPrice to update.
     */
    where: SkuPriceWhereUniqueInput
  }

  /**
   * SkuPrice updateMany
   */
  export type SkuPriceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SkuPrices.
     */
    data: XOR<SkuPriceUpdateManyMutationInput, SkuPriceUncheckedUpdateManyInput>
    /**
     * Filter which SkuPrices to update
     */
    where?: SkuPriceWhereInput
    /**
     * Limit how many SkuPrices to update.
     */
    limit?: number
  }

  /**
   * SkuPrice updateManyAndReturn
   */
  export type SkuPriceUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkuPrice
     */
    select?: SkuPriceSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SkuPrice
     */
    omit?: SkuPriceOmit<ExtArgs> | null
    /**
     * The data used to update SkuPrices.
     */
    data: XOR<SkuPriceUpdateManyMutationInput, SkuPriceUncheckedUpdateManyInput>
    /**
     * Filter which SkuPrices to update
     */
    where?: SkuPriceWhereInput
    /**
     * Limit how many SkuPrices to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkuPriceIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * SkuPrice upsert
   */
  export type SkuPriceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkuPrice
     */
    select?: SkuPriceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SkuPrice
     */
    omit?: SkuPriceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkuPriceInclude<ExtArgs> | null
    /**
     * The filter to search for the SkuPrice to update in case it exists.
     */
    where: SkuPriceWhereUniqueInput
    /**
     * In case the SkuPrice found by the `where` argument doesn't exist, create a new SkuPrice with this data.
     */
    create: XOR<SkuPriceCreateInput, SkuPriceUncheckedCreateInput>
    /**
     * In case the SkuPrice was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SkuPriceUpdateInput, SkuPriceUncheckedUpdateInput>
  }

  /**
   * SkuPrice delete
   */
  export type SkuPriceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkuPrice
     */
    select?: SkuPriceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SkuPrice
     */
    omit?: SkuPriceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkuPriceInclude<ExtArgs> | null
    /**
     * Filter which SkuPrice to delete.
     */
    where: SkuPriceWhereUniqueInput
  }

  /**
   * SkuPrice deleteMany
   */
  export type SkuPriceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SkuPrices to delete
     */
    where?: SkuPriceWhereInput
    /**
     * Limit how many SkuPrices to delete.
     */
    limit?: number
  }

  /**
   * SkuPrice without action
   */
  export type SkuPriceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkuPrice
     */
    select?: SkuPriceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SkuPrice
     */
    omit?: SkuPriceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkuPriceInclude<ExtArgs> | null
  }


  /**
   * Model SkuStock
   */

  export type AggregateSkuStock = {
    _count: SkuStockCountAggregateOutputType | null
    _avg: SkuStockAvgAggregateOutputType | null
    _sum: SkuStockSumAggregateOutputType | null
    _min: SkuStockMinAggregateOutputType | null
    _max: SkuStockMaxAggregateOutputType | null
  }

  export type SkuStockAvgAggregateOutputType = {
    quantity: number | null
    reserved: number | null
    available: number | null
  }

  export type SkuStockSumAggregateOutputType = {
    quantity: number | null
    reserved: number | null
    available: number | null
  }

  export type SkuStockMinAggregateOutputType = {
    id: string | null
    skuId: string | null
    warehouseId: string | null
    quantity: number | null
    reserved: number | null
    available: number | null
    updatedAt: Date | null
  }

  export type SkuStockMaxAggregateOutputType = {
    id: string | null
    skuId: string | null
    warehouseId: string | null
    quantity: number | null
    reserved: number | null
    available: number | null
    updatedAt: Date | null
  }

  export type SkuStockCountAggregateOutputType = {
    id: number
    skuId: number
    warehouseId: number
    quantity: number
    reserved: number
    available: number
    updatedAt: number
    _all: number
  }


  export type SkuStockAvgAggregateInputType = {
    quantity?: true
    reserved?: true
    available?: true
  }

  export type SkuStockSumAggregateInputType = {
    quantity?: true
    reserved?: true
    available?: true
  }

  export type SkuStockMinAggregateInputType = {
    id?: true
    skuId?: true
    warehouseId?: true
    quantity?: true
    reserved?: true
    available?: true
    updatedAt?: true
  }

  export type SkuStockMaxAggregateInputType = {
    id?: true
    skuId?: true
    warehouseId?: true
    quantity?: true
    reserved?: true
    available?: true
    updatedAt?: true
  }

  export type SkuStockCountAggregateInputType = {
    id?: true
    skuId?: true
    warehouseId?: true
    quantity?: true
    reserved?: true
    available?: true
    updatedAt?: true
    _all?: true
  }

  export type SkuStockAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SkuStock to aggregate.
     */
    where?: SkuStockWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SkuStocks to fetch.
     */
    orderBy?: SkuStockOrderByWithRelationInput | SkuStockOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SkuStockWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SkuStocks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SkuStocks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SkuStocks
    **/
    _count?: true | SkuStockCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SkuStockAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SkuStockSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SkuStockMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SkuStockMaxAggregateInputType
  }

  export type GetSkuStockAggregateType<T extends SkuStockAggregateArgs> = {
        [P in keyof T & keyof AggregateSkuStock]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSkuStock[P]>
      : GetScalarType<T[P], AggregateSkuStock[P]>
  }




  export type SkuStockGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SkuStockWhereInput
    orderBy?: SkuStockOrderByWithAggregationInput | SkuStockOrderByWithAggregationInput[]
    by: SkuStockScalarFieldEnum[] | SkuStockScalarFieldEnum
    having?: SkuStockScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SkuStockCountAggregateInputType | true
    _avg?: SkuStockAvgAggregateInputType
    _sum?: SkuStockSumAggregateInputType
    _min?: SkuStockMinAggregateInputType
    _max?: SkuStockMaxAggregateInputType
  }

  export type SkuStockGroupByOutputType = {
    id: string
    skuId: string
    warehouseId: string
    quantity: number
    reserved: number
    available: number
    updatedAt: Date
    _count: SkuStockCountAggregateOutputType | null
    _avg: SkuStockAvgAggregateOutputType | null
    _sum: SkuStockSumAggregateOutputType | null
    _min: SkuStockMinAggregateOutputType | null
    _max: SkuStockMaxAggregateOutputType | null
  }

  type GetSkuStockGroupByPayload<T extends SkuStockGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SkuStockGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SkuStockGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SkuStockGroupByOutputType[P]>
            : GetScalarType<T[P], SkuStockGroupByOutputType[P]>
        }
      >
    >


  export type SkuStockSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    skuId?: boolean
    warehouseId?: boolean
    quantity?: boolean
    reserved?: boolean
    available?: boolean
    updatedAt?: boolean
    sku?: boolean | SkuDefaultArgs<ExtArgs>
    warehouse?: boolean | WarehouseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["skuStock"]>

  export type SkuStockSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    skuId?: boolean
    warehouseId?: boolean
    quantity?: boolean
    reserved?: boolean
    available?: boolean
    updatedAt?: boolean
    sku?: boolean | SkuDefaultArgs<ExtArgs>
    warehouse?: boolean | WarehouseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["skuStock"]>

  export type SkuStockSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    skuId?: boolean
    warehouseId?: boolean
    quantity?: boolean
    reserved?: boolean
    available?: boolean
    updatedAt?: boolean
    sku?: boolean | SkuDefaultArgs<ExtArgs>
    warehouse?: boolean | WarehouseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["skuStock"]>

  export type SkuStockSelectScalar = {
    id?: boolean
    skuId?: boolean
    warehouseId?: boolean
    quantity?: boolean
    reserved?: boolean
    available?: boolean
    updatedAt?: boolean
  }

  export type SkuStockOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "skuId" | "warehouseId" | "quantity" | "reserved" | "available" | "updatedAt", ExtArgs["result"]["skuStock"]>
  export type SkuStockInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sku?: boolean | SkuDefaultArgs<ExtArgs>
    warehouse?: boolean | WarehouseDefaultArgs<ExtArgs>
  }
  export type SkuStockIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sku?: boolean | SkuDefaultArgs<ExtArgs>
    warehouse?: boolean | WarehouseDefaultArgs<ExtArgs>
  }
  export type SkuStockIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sku?: boolean | SkuDefaultArgs<ExtArgs>
    warehouse?: boolean | WarehouseDefaultArgs<ExtArgs>
  }

  export type $SkuStockPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SkuStock"
    objects: {
      sku: Prisma.$SkuPayload<ExtArgs>
      warehouse: Prisma.$WarehousePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      skuId: string
      warehouseId: string
      quantity: number
      reserved: number
      available: number
      updatedAt: Date
    }, ExtArgs["result"]["skuStock"]>
    composites: {}
  }

  type SkuStockGetPayload<S extends boolean | null | undefined | SkuStockDefaultArgs> = $Result.GetResult<Prisma.$SkuStockPayload, S>

  type SkuStockCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SkuStockFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SkuStockCountAggregateInputType | true
    }

  export interface SkuStockDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SkuStock'], meta: { name: 'SkuStock' } }
    /**
     * Find zero or one SkuStock that matches the filter.
     * @param {SkuStockFindUniqueArgs} args - Arguments to find a SkuStock
     * @example
     * // Get one SkuStock
     * const skuStock = await prisma.skuStock.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SkuStockFindUniqueArgs>(args: SelectSubset<T, SkuStockFindUniqueArgs<ExtArgs>>): Prisma__SkuStockClient<$Result.GetResult<Prisma.$SkuStockPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SkuStock that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SkuStockFindUniqueOrThrowArgs} args - Arguments to find a SkuStock
     * @example
     * // Get one SkuStock
     * const skuStock = await prisma.skuStock.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SkuStockFindUniqueOrThrowArgs>(args: SelectSubset<T, SkuStockFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SkuStockClient<$Result.GetResult<Prisma.$SkuStockPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SkuStock that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkuStockFindFirstArgs} args - Arguments to find a SkuStock
     * @example
     * // Get one SkuStock
     * const skuStock = await prisma.skuStock.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SkuStockFindFirstArgs>(args?: SelectSubset<T, SkuStockFindFirstArgs<ExtArgs>>): Prisma__SkuStockClient<$Result.GetResult<Prisma.$SkuStockPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SkuStock that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkuStockFindFirstOrThrowArgs} args - Arguments to find a SkuStock
     * @example
     * // Get one SkuStock
     * const skuStock = await prisma.skuStock.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SkuStockFindFirstOrThrowArgs>(args?: SelectSubset<T, SkuStockFindFirstOrThrowArgs<ExtArgs>>): Prisma__SkuStockClient<$Result.GetResult<Prisma.$SkuStockPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SkuStocks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkuStockFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SkuStocks
     * const skuStocks = await prisma.skuStock.findMany()
     * 
     * // Get first 10 SkuStocks
     * const skuStocks = await prisma.skuStock.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const skuStockWithIdOnly = await prisma.skuStock.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SkuStockFindManyArgs>(args?: SelectSubset<T, SkuStockFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SkuStockPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SkuStock.
     * @param {SkuStockCreateArgs} args - Arguments to create a SkuStock.
     * @example
     * // Create one SkuStock
     * const SkuStock = await prisma.skuStock.create({
     *   data: {
     *     // ... data to create a SkuStock
     *   }
     * })
     * 
     */
    create<T extends SkuStockCreateArgs>(args: SelectSubset<T, SkuStockCreateArgs<ExtArgs>>): Prisma__SkuStockClient<$Result.GetResult<Prisma.$SkuStockPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SkuStocks.
     * @param {SkuStockCreateManyArgs} args - Arguments to create many SkuStocks.
     * @example
     * // Create many SkuStocks
     * const skuStock = await prisma.skuStock.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SkuStockCreateManyArgs>(args?: SelectSubset<T, SkuStockCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SkuStocks and returns the data saved in the database.
     * @param {SkuStockCreateManyAndReturnArgs} args - Arguments to create many SkuStocks.
     * @example
     * // Create many SkuStocks
     * const skuStock = await prisma.skuStock.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SkuStocks and only return the `id`
     * const skuStockWithIdOnly = await prisma.skuStock.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SkuStockCreateManyAndReturnArgs>(args?: SelectSubset<T, SkuStockCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SkuStockPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a SkuStock.
     * @param {SkuStockDeleteArgs} args - Arguments to delete one SkuStock.
     * @example
     * // Delete one SkuStock
     * const SkuStock = await prisma.skuStock.delete({
     *   where: {
     *     // ... filter to delete one SkuStock
     *   }
     * })
     * 
     */
    delete<T extends SkuStockDeleteArgs>(args: SelectSubset<T, SkuStockDeleteArgs<ExtArgs>>): Prisma__SkuStockClient<$Result.GetResult<Prisma.$SkuStockPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SkuStock.
     * @param {SkuStockUpdateArgs} args - Arguments to update one SkuStock.
     * @example
     * // Update one SkuStock
     * const skuStock = await prisma.skuStock.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SkuStockUpdateArgs>(args: SelectSubset<T, SkuStockUpdateArgs<ExtArgs>>): Prisma__SkuStockClient<$Result.GetResult<Prisma.$SkuStockPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SkuStocks.
     * @param {SkuStockDeleteManyArgs} args - Arguments to filter SkuStocks to delete.
     * @example
     * // Delete a few SkuStocks
     * const { count } = await prisma.skuStock.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SkuStockDeleteManyArgs>(args?: SelectSubset<T, SkuStockDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SkuStocks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkuStockUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SkuStocks
     * const skuStock = await prisma.skuStock.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SkuStockUpdateManyArgs>(args: SelectSubset<T, SkuStockUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SkuStocks and returns the data updated in the database.
     * @param {SkuStockUpdateManyAndReturnArgs} args - Arguments to update many SkuStocks.
     * @example
     * // Update many SkuStocks
     * const skuStock = await prisma.skuStock.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more SkuStocks and only return the `id`
     * const skuStockWithIdOnly = await prisma.skuStock.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SkuStockUpdateManyAndReturnArgs>(args: SelectSubset<T, SkuStockUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SkuStockPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one SkuStock.
     * @param {SkuStockUpsertArgs} args - Arguments to update or create a SkuStock.
     * @example
     * // Update or create a SkuStock
     * const skuStock = await prisma.skuStock.upsert({
     *   create: {
     *     // ... data to create a SkuStock
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SkuStock we want to update
     *   }
     * })
     */
    upsert<T extends SkuStockUpsertArgs>(args: SelectSubset<T, SkuStockUpsertArgs<ExtArgs>>): Prisma__SkuStockClient<$Result.GetResult<Prisma.$SkuStockPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SkuStocks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkuStockCountArgs} args - Arguments to filter SkuStocks to count.
     * @example
     * // Count the number of SkuStocks
     * const count = await prisma.skuStock.count({
     *   where: {
     *     // ... the filter for the SkuStocks we want to count
     *   }
     * })
    **/
    count<T extends SkuStockCountArgs>(
      args?: Subset<T, SkuStockCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SkuStockCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SkuStock.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkuStockAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SkuStockAggregateArgs>(args: Subset<T, SkuStockAggregateArgs>): Prisma.PrismaPromise<GetSkuStockAggregateType<T>>

    /**
     * Group by SkuStock.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkuStockGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SkuStockGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SkuStockGroupByArgs['orderBy'] }
        : { orderBy?: SkuStockGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SkuStockGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSkuStockGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SkuStock model
   */
  readonly fields: SkuStockFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SkuStock.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SkuStockClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    sku<T extends SkuDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SkuDefaultArgs<ExtArgs>>): Prisma__SkuClient<$Result.GetResult<Prisma.$SkuPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    warehouse<T extends WarehouseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, WarehouseDefaultArgs<ExtArgs>>): Prisma__WarehouseClient<$Result.GetResult<Prisma.$WarehousePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SkuStock model
   */
  interface SkuStockFieldRefs {
    readonly id: FieldRef<"SkuStock", 'String'>
    readonly skuId: FieldRef<"SkuStock", 'String'>
    readonly warehouseId: FieldRef<"SkuStock", 'String'>
    readonly quantity: FieldRef<"SkuStock", 'Int'>
    readonly reserved: FieldRef<"SkuStock", 'Int'>
    readonly available: FieldRef<"SkuStock", 'Int'>
    readonly updatedAt: FieldRef<"SkuStock", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SkuStock findUnique
   */
  export type SkuStockFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkuStock
     */
    select?: SkuStockSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SkuStock
     */
    omit?: SkuStockOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkuStockInclude<ExtArgs> | null
    /**
     * Filter, which SkuStock to fetch.
     */
    where: SkuStockWhereUniqueInput
  }

  /**
   * SkuStock findUniqueOrThrow
   */
  export type SkuStockFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkuStock
     */
    select?: SkuStockSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SkuStock
     */
    omit?: SkuStockOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkuStockInclude<ExtArgs> | null
    /**
     * Filter, which SkuStock to fetch.
     */
    where: SkuStockWhereUniqueInput
  }

  /**
   * SkuStock findFirst
   */
  export type SkuStockFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkuStock
     */
    select?: SkuStockSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SkuStock
     */
    omit?: SkuStockOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkuStockInclude<ExtArgs> | null
    /**
     * Filter, which SkuStock to fetch.
     */
    where?: SkuStockWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SkuStocks to fetch.
     */
    orderBy?: SkuStockOrderByWithRelationInput | SkuStockOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SkuStocks.
     */
    cursor?: SkuStockWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SkuStocks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SkuStocks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SkuStocks.
     */
    distinct?: SkuStockScalarFieldEnum | SkuStockScalarFieldEnum[]
  }

  /**
   * SkuStock findFirstOrThrow
   */
  export type SkuStockFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkuStock
     */
    select?: SkuStockSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SkuStock
     */
    omit?: SkuStockOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkuStockInclude<ExtArgs> | null
    /**
     * Filter, which SkuStock to fetch.
     */
    where?: SkuStockWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SkuStocks to fetch.
     */
    orderBy?: SkuStockOrderByWithRelationInput | SkuStockOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SkuStocks.
     */
    cursor?: SkuStockWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SkuStocks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SkuStocks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SkuStocks.
     */
    distinct?: SkuStockScalarFieldEnum | SkuStockScalarFieldEnum[]
  }

  /**
   * SkuStock findMany
   */
  export type SkuStockFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkuStock
     */
    select?: SkuStockSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SkuStock
     */
    omit?: SkuStockOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkuStockInclude<ExtArgs> | null
    /**
     * Filter, which SkuStocks to fetch.
     */
    where?: SkuStockWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SkuStocks to fetch.
     */
    orderBy?: SkuStockOrderByWithRelationInput | SkuStockOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SkuStocks.
     */
    cursor?: SkuStockWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SkuStocks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SkuStocks.
     */
    skip?: number
    distinct?: SkuStockScalarFieldEnum | SkuStockScalarFieldEnum[]
  }

  /**
   * SkuStock create
   */
  export type SkuStockCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkuStock
     */
    select?: SkuStockSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SkuStock
     */
    omit?: SkuStockOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkuStockInclude<ExtArgs> | null
    /**
     * The data needed to create a SkuStock.
     */
    data: XOR<SkuStockCreateInput, SkuStockUncheckedCreateInput>
  }

  /**
   * SkuStock createMany
   */
  export type SkuStockCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SkuStocks.
     */
    data: SkuStockCreateManyInput | SkuStockCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SkuStock createManyAndReturn
   */
  export type SkuStockCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkuStock
     */
    select?: SkuStockSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SkuStock
     */
    omit?: SkuStockOmit<ExtArgs> | null
    /**
     * The data used to create many SkuStocks.
     */
    data: SkuStockCreateManyInput | SkuStockCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkuStockIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * SkuStock update
   */
  export type SkuStockUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkuStock
     */
    select?: SkuStockSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SkuStock
     */
    omit?: SkuStockOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkuStockInclude<ExtArgs> | null
    /**
     * The data needed to update a SkuStock.
     */
    data: XOR<SkuStockUpdateInput, SkuStockUncheckedUpdateInput>
    /**
     * Choose, which SkuStock to update.
     */
    where: SkuStockWhereUniqueInput
  }

  /**
   * SkuStock updateMany
   */
  export type SkuStockUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SkuStocks.
     */
    data: XOR<SkuStockUpdateManyMutationInput, SkuStockUncheckedUpdateManyInput>
    /**
     * Filter which SkuStocks to update
     */
    where?: SkuStockWhereInput
    /**
     * Limit how many SkuStocks to update.
     */
    limit?: number
  }

  /**
   * SkuStock updateManyAndReturn
   */
  export type SkuStockUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkuStock
     */
    select?: SkuStockSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SkuStock
     */
    omit?: SkuStockOmit<ExtArgs> | null
    /**
     * The data used to update SkuStocks.
     */
    data: XOR<SkuStockUpdateManyMutationInput, SkuStockUncheckedUpdateManyInput>
    /**
     * Filter which SkuStocks to update
     */
    where?: SkuStockWhereInput
    /**
     * Limit how many SkuStocks to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkuStockIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * SkuStock upsert
   */
  export type SkuStockUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkuStock
     */
    select?: SkuStockSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SkuStock
     */
    omit?: SkuStockOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkuStockInclude<ExtArgs> | null
    /**
     * The filter to search for the SkuStock to update in case it exists.
     */
    where: SkuStockWhereUniqueInput
    /**
     * In case the SkuStock found by the `where` argument doesn't exist, create a new SkuStock with this data.
     */
    create: XOR<SkuStockCreateInput, SkuStockUncheckedCreateInput>
    /**
     * In case the SkuStock was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SkuStockUpdateInput, SkuStockUncheckedUpdateInput>
  }

  /**
   * SkuStock delete
   */
  export type SkuStockDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkuStock
     */
    select?: SkuStockSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SkuStock
     */
    omit?: SkuStockOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkuStockInclude<ExtArgs> | null
    /**
     * Filter which SkuStock to delete.
     */
    where: SkuStockWhereUniqueInput
  }

  /**
   * SkuStock deleteMany
   */
  export type SkuStockDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SkuStocks to delete
     */
    where?: SkuStockWhereInput
    /**
     * Limit how many SkuStocks to delete.
     */
    limit?: number
  }

  /**
   * SkuStock without action
   */
  export type SkuStockDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkuStock
     */
    select?: SkuStockSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SkuStock
     */
    omit?: SkuStockOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkuStockInclude<ExtArgs> | null
  }


  /**
   * Model Warehouse
   */

  export type AggregateWarehouse = {
    _count: WarehouseCountAggregateOutputType | null
    _min: WarehouseMinAggregateOutputType | null
    _max: WarehouseMaxAggregateOutputType | null
  }

  export type WarehouseMinAggregateOutputType = {
    id: string | null
    name: string | null
    code: string | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type WarehouseMaxAggregateOutputType = {
    id: string | null
    name: string | null
    code: string | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type WarehouseCountAggregateOutputType = {
    id: number
    name: number
    code: number
    status: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type WarehouseMinAggregateInputType = {
    id?: true
    name?: true
    code?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type WarehouseMaxAggregateInputType = {
    id?: true
    name?: true
    code?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type WarehouseCountAggregateInputType = {
    id?: true
    name?: true
    code?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type WarehouseAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Warehouse to aggregate.
     */
    where?: WarehouseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Warehouses to fetch.
     */
    orderBy?: WarehouseOrderByWithRelationInput | WarehouseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WarehouseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Warehouses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Warehouses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Warehouses
    **/
    _count?: true | WarehouseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WarehouseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WarehouseMaxAggregateInputType
  }

  export type GetWarehouseAggregateType<T extends WarehouseAggregateArgs> = {
        [P in keyof T & keyof AggregateWarehouse]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWarehouse[P]>
      : GetScalarType<T[P], AggregateWarehouse[P]>
  }




  export type WarehouseGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WarehouseWhereInput
    orderBy?: WarehouseOrderByWithAggregationInput | WarehouseOrderByWithAggregationInput[]
    by: WarehouseScalarFieldEnum[] | WarehouseScalarFieldEnum
    having?: WarehouseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WarehouseCountAggregateInputType | true
    _min?: WarehouseMinAggregateInputType
    _max?: WarehouseMaxAggregateInputType
  }

  export type WarehouseGroupByOutputType = {
    id: string
    name: string
    code: string
    status: string
    createdAt: Date
    updatedAt: Date
    _count: WarehouseCountAggregateOutputType | null
    _min: WarehouseMinAggregateOutputType | null
    _max: WarehouseMaxAggregateOutputType | null
  }

  type GetWarehouseGroupByPayload<T extends WarehouseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WarehouseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WarehouseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WarehouseGroupByOutputType[P]>
            : GetScalarType<T[P], WarehouseGroupByOutputType[P]>
        }
      >
    >


  export type WarehouseSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    code?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    stocks?: boolean | Warehouse$stocksArgs<ExtArgs>
    _count?: boolean | WarehouseCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["warehouse"]>

  export type WarehouseSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    code?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["warehouse"]>

  export type WarehouseSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    code?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["warehouse"]>

  export type WarehouseSelectScalar = {
    id?: boolean
    name?: boolean
    code?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type WarehouseOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "code" | "status" | "createdAt" | "updatedAt", ExtArgs["result"]["warehouse"]>
  export type WarehouseInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    stocks?: boolean | Warehouse$stocksArgs<ExtArgs>
    _count?: boolean | WarehouseCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type WarehouseIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type WarehouseIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $WarehousePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Warehouse"
    objects: {
      stocks: Prisma.$SkuStockPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      code: string
      status: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["warehouse"]>
    composites: {}
  }

  type WarehouseGetPayload<S extends boolean | null | undefined | WarehouseDefaultArgs> = $Result.GetResult<Prisma.$WarehousePayload, S>

  type WarehouseCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<WarehouseFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: WarehouseCountAggregateInputType | true
    }

  export interface WarehouseDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Warehouse'], meta: { name: 'Warehouse' } }
    /**
     * Find zero or one Warehouse that matches the filter.
     * @param {WarehouseFindUniqueArgs} args - Arguments to find a Warehouse
     * @example
     * // Get one Warehouse
     * const warehouse = await prisma.warehouse.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WarehouseFindUniqueArgs>(args: SelectSubset<T, WarehouseFindUniqueArgs<ExtArgs>>): Prisma__WarehouseClient<$Result.GetResult<Prisma.$WarehousePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Warehouse that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {WarehouseFindUniqueOrThrowArgs} args - Arguments to find a Warehouse
     * @example
     * // Get one Warehouse
     * const warehouse = await prisma.warehouse.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WarehouseFindUniqueOrThrowArgs>(args: SelectSubset<T, WarehouseFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WarehouseClient<$Result.GetResult<Prisma.$WarehousePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Warehouse that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WarehouseFindFirstArgs} args - Arguments to find a Warehouse
     * @example
     * // Get one Warehouse
     * const warehouse = await prisma.warehouse.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WarehouseFindFirstArgs>(args?: SelectSubset<T, WarehouseFindFirstArgs<ExtArgs>>): Prisma__WarehouseClient<$Result.GetResult<Prisma.$WarehousePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Warehouse that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WarehouseFindFirstOrThrowArgs} args - Arguments to find a Warehouse
     * @example
     * // Get one Warehouse
     * const warehouse = await prisma.warehouse.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WarehouseFindFirstOrThrowArgs>(args?: SelectSubset<T, WarehouseFindFirstOrThrowArgs<ExtArgs>>): Prisma__WarehouseClient<$Result.GetResult<Prisma.$WarehousePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Warehouses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WarehouseFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Warehouses
     * const warehouses = await prisma.warehouse.findMany()
     * 
     * // Get first 10 Warehouses
     * const warehouses = await prisma.warehouse.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const warehouseWithIdOnly = await prisma.warehouse.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WarehouseFindManyArgs>(args?: SelectSubset<T, WarehouseFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WarehousePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Warehouse.
     * @param {WarehouseCreateArgs} args - Arguments to create a Warehouse.
     * @example
     * // Create one Warehouse
     * const Warehouse = await prisma.warehouse.create({
     *   data: {
     *     // ... data to create a Warehouse
     *   }
     * })
     * 
     */
    create<T extends WarehouseCreateArgs>(args: SelectSubset<T, WarehouseCreateArgs<ExtArgs>>): Prisma__WarehouseClient<$Result.GetResult<Prisma.$WarehousePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Warehouses.
     * @param {WarehouseCreateManyArgs} args - Arguments to create many Warehouses.
     * @example
     * // Create many Warehouses
     * const warehouse = await prisma.warehouse.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WarehouseCreateManyArgs>(args?: SelectSubset<T, WarehouseCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Warehouses and returns the data saved in the database.
     * @param {WarehouseCreateManyAndReturnArgs} args - Arguments to create many Warehouses.
     * @example
     * // Create many Warehouses
     * const warehouse = await prisma.warehouse.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Warehouses and only return the `id`
     * const warehouseWithIdOnly = await prisma.warehouse.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WarehouseCreateManyAndReturnArgs>(args?: SelectSubset<T, WarehouseCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WarehousePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Warehouse.
     * @param {WarehouseDeleteArgs} args - Arguments to delete one Warehouse.
     * @example
     * // Delete one Warehouse
     * const Warehouse = await prisma.warehouse.delete({
     *   where: {
     *     // ... filter to delete one Warehouse
     *   }
     * })
     * 
     */
    delete<T extends WarehouseDeleteArgs>(args: SelectSubset<T, WarehouseDeleteArgs<ExtArgs>>): Prisma__WarehouseClient<$Result.GetResult<Prisma.$WarehousePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Warehouse.
     * @param {WarehouseUpdateArgs} args - Arguments to update one Warehouse.
     * @example
     * // Update one Warehouse
     * const warehouse = await prisma.warehouse.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WarehouseUpdateArgs>(args: SelectSubset<T, WarehouseUpdateArgs<ExtArgs>>): Prisma__WarehouseClient<$Result.GetResult<Prisma.$WarehousePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Warehouses.
     * @param {WarehouseDeleteManyArgs} args - Arguments to filter Warehouses to delete.
     * @example
     * // Delete a few Warehouses
     * const { count } = await prisma.warehouse.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WarehouseDeleteManyArgs>(args?: SelectSubset<T, WarehouseDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Warehouses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WarehouseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Warehouses
     * const warehouse = await prisma.warehouse.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WarehouseUpdateManyArgs>(args: SelectSubset<T, WarehouseUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Warehouses and returns the data updated in the database.
     * @param {WarehouseUpdateManyAndReturnArgs} args - Arguments to update many Warehouses.
     * @example
     * // Update many Warehouses
     * const warehouse = await prisma.warehouse.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Warehouses and only return the `id`
     * const warehouseWithIdOnly = await prisma.warehouse.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends WarehouseUpdateManyAndReturnArgs>(args: SelectSubset<T, WarehouseUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WarehousePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Warehouse.
     * @param {WarehouseUpsertArgs} args - Arguments to update or create a Warehouse.
     * @example
     * // Update or create a Warehouse
     * const warehouse = await prisma.warehouse.upsert({
     *   create: {
     *     // ... data to create a Warehouse
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Warehouse we want to update
     *   }
     * })
     */
    upsert<T extends WarehouseUpsertArgs>(args: SelectSubset<T, WarehouseUpsertArgs<ExtArgs>>): Prisma__WarehouseClient<$Result.GetResult<Prisma.$WarehousePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Warehouses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WarehouseCountArgs} args - Arguments to filter Warehouses to count.
     * @example
     * // Count the number of Warehouses
     * const count = await prisma.warehouse.count({
     *   where: {
     *     // ... the filter for the Warehouses we want to count
     *   }
     * })
    **/
    count<T extends WarehouseCountArgs>(
      args?: Subset<T, WarehouseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WarehouseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Warehouse.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WarehouseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WarehouseAggregateArgs>(args: Subset<T, WarehouseAggregateArgs>): Prisma.PrismaPromise<GetWarehouseAggregateType<T>>

    /**
     * Group by Warehouse.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WarehouseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WarehouseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WarehouseGroupByArgs['orderBy'] }
        : { orderBy?: WarehouseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WarehouseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWarehouseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Warehouse model
   */
  readonly fields: WarehouseFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Warehouse.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WarehouseClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    stocks<T extends Warehouse$stocksArgs<ExtArgs> = {}>(args?: Subset<T, Warehouse$stocksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SkuStockPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Warehouse model
   */
  interface WarehouseFieldRefs {
    readonly id: FieldRef<"Warehouse", 'String'>
    readonly name: FieldRef<"Warehouse", 'String'>
    readonly code: FieldRef<"Warehouse", 'String'>
    readonly status: FieldRef<"Warehouse", 'String'>
    readonly createdAt: FieldRef<"Warehouse", 'DateTime'>
    readonly updatedAt: FieldRef<"Warehouse", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Warehouse findUnique
   */
  export type WarehouseFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Warehouse
     */
    select?: WarehouseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Warehouse
     */
    omit?: WarehouseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WarehouseInclude<ExtArgs> | null
    /**
     * Filter, which Warehouse to fetch.
     */
    where: WarehouseWhereUniqueInput
  }

  /**
   * Warehouse findUniqueOrThrow
   */
  export type WarehouseFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Warehouse
     */
    select?: WarehouseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Warehouse
     */
    omit?: WarehouseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WarehouseInclude<ExtArgs> | null
    /**
     * Filter, which Warehouse to fetch.
     */
    where: WarehouseWhereUniqueInput
  }

  /**
   * Warehouse findFirst
   */
  export type WarehouseFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Warehouse
     */
    select?: WarehouseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Warehouse
     */
    omit?: WarehouseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WarehouseInclude<ExtArgs> | null
    /**
     * Filter, which Warehouse to fetch.
     */
    where?: WarehouseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Warehouses to fetch.
     */
    orderBy?: WarehouseOrderByWithRelationInput | WarehouseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Warehouses.
     */
    cursor?: WarehouseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Warehouses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Warehouses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Warehouses.
     */
    distinct?: WarehouseScalarFieldEnum | WarehouseScalarFieldEnum[]
  }

  /**
   * Warehouse findFirstOrThrow
   */
  export type WarehouseFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Warehouse
     */
    select?: WarehouseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Warehouse
     */
    omit?: WarehouseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WarehouseInclude<ExtArgs> | null
    /**
     * Filter, which Warehouse to fetch.
     */
    where?: WarehouseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Warehouses to fetch.
     */
    orderBy?: WarehouseOrderByWithRelationInput | WarehouseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Warehouses.
     */
    cursor?: WarehouseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Warehouses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Warehouses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Warehouses.
     */
    distinct?: WarehouseScalarFieldEnum | WarehouseScalarFieldEnum[]
  }

  /**
   * Warehouse findMany
   */
  export type WarehouseFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Warehouse
     */
    select?: WarehouseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Warehouse
     */
    omit?: WarehouseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WarehouseInclude<ExtArgs> | null
    /**
     * Filter, which Warehouses to fetch.
     */
    where?: WarehouseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Warehouses to fetch.
     */
    orderBy?: WarehouseOrderByWithRelationInput | WarehouseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Warehouses.
     */
    cursor?: WarehouseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Warehouses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Warehouses.
     */
    skip?: number
    distinct?: WarehouseScalarFieldEnum | WarehouseScalarFieldEnum[]
  }

  /**
   * Warehouse create
   */
  export type WarehouseCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Warehouse
     */
    select?: WarehouseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Warehouse
     */
    omit?: WarehouseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WarehouseInclude<ExtArgs> | null
    /**
     * The data needed to create a Warehouse.
     */
    data: XOR<WarehouseCreateInput, WarehouseUncheckedCreateInput>
  }

  /**
   * Warehouse createMany
   */
  export type WarehouseCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Warehouses.
     */
    data: WarehouseCreateManyInput | WarehouseCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Warehouse createManyAndReturn
   */
  export type WarehouseCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Warehouse
     */
    select?: WarehouseSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Warehouse
     */
    omit?: WarehouseOmit<ExtArgs> | null
    /**
     * The data used to create many Warehouses.
     */
    data: WarehouseCreateManyInput | WarehouseCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Warehouse update
   */
  export type WarehouseUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Warehouse
     */
    select?: WarehouseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Warehouse
     */
    omit?: WarehouseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WarehouseInclude<ExtArgs> | null
    /**
     * The data needed to update a Warehouse.
     */
    data: XOR<WarehouseUpdateInput, WarehouseUncheckedUpdateInput>
    /**
     * Choose, which Warehouse to update.
     */
    where: WarehouseWhereUniqueInput
  }

  /**
   * Warehouse updateMany
   */
  export type WarehouseUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Warehouses.
     */
    data: XOR<WarehouseUpdateManyMutationInput, WarehouseUncheckedUpdateManyInput>
    /**
     * Filter which Warehouses to update
     */
    where?: WarehouseWhereInput
    /**
     * Limit how many Warehouses to update.
     */
    limit?: number
  }

  /**
   * Warehouse updateManyAndReturn
   */
  export type WarehouseUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Warehouse
     */
    select?: WarehouseSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Warehouse
     */
    omit?: WarehouseOmit<ExtArgs> | null
    /**
     * The data used to update Warehouses.
     */
    data: XOR<WarehouseUpdateManyMutationInput, WarehouseUncheckedUpdateManyInput>
    /**
     * Filter which Warehouses to update
     */
    where?: WarehouseWhereInput
    /**
     * Limit how many Warehouses to update.
     */
    limit?: number
  }

  /**
   * Warehouse upsert
   */
  export type WarehouseUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Warehouse
     */
    select?: WarehouseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Warehouse
     */
    omit?: WarehouseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WarehouseInclude<ExtArgs> | null
    /**
     * The filter to search for the Warehouse to update in case it exists.
     */
    where: WarehouseWhereUniqueInput
    /**
     * In case the Warehouse found by the `where` argument doesn't exist, create a new Warehouse with this data.
     */
    create: XOR<WarehouseCreateInput, WarehouseUncheckedCreateInput>
    /**
     * In case the Warehouse was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WarehouseUpdateInput, WarehouseUncheckedUpdateInput>
  }

  /**
   * Warehouse delete
   */
  export type WarehouseDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Warehouse
     */
    select?: WarehouseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Warehouse
     */
    omit?: WarehouseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WarehouseInclude<ExtArgs> | null
    /**
     * Filter which Warehouse to delete.
     */
    where: WarehouseWhereUniqueInput
  }

  /**
   * Warehouse deleteMany
   */
  export type WarehouseDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Warehouses to delete
     */
    where?: WarehouseWhereInput
    /**
     * Limit how many Warehouses to delete.
     */
    limit?: number
  }

  /**
   * Warehouse.stocks
   */
  export type Warehouse$stocksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkuStock
     */
    select?: SkuStockSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SkuStock
     */
    omit?: SkuStockOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkuStockInclude<ExtArgs> | null
    where?: SkuStockWhereInput
    orderBy?: SkuStockOrderByWithRelationInput | SkuStockOrderByWithRelationInput[]
    cursor?: SkuStockWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SkuStockScalarFieldEnum | SkuStockScalarFieldEnum[]
  }

  /**
   * Warehouse without action
   */
  export type WarehouseDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Warehouse
     */
    select?: WarehouseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Warehouse
     */
    omit?: WarehouseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WarehouseInclude<ExtArgs> | null
  }


  /**
   * Model PriceList
   */

  export type AggregatePriceList = {
    _count: PriceListCountAggregateOutputType | null
    _min: PriceListMinAggregateOutputType | null
    _max: PriceListMaxAggregateOutputType | null
  }

  export type PriceListMinAggregateOutputType = {
    id: string | null
    name: string | null
    code: string | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PriceListMaxAggregateOutputType = {
    id: string | null
    name: string | null
    code: string | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PriceListCountAggregateOutputType = {
    id: number
    name: number
    code: number
    status: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PriceListMinAggregateInputType = {
    id?: true
    name?: true
    code?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PriceListMaxAggregateInputType = {
    id?: true
    name?: true
    code?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PriceListCountAggregateInputType = {
    id?: true
    name?: true
    code?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PriceListAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PriceList to aggregate.
     */
    where?: PriceListWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PriceLists to fetch.
     */
    orderBy?: PriceListOrderByWithRelationInput | PriceListOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PriceListWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PriceLists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PriceLists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PriceLists
    **/
    _count?: true | PriceListCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PriceListMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PriceListMaxAggregateInputType
  }

  export type GetPriceListAggregateType<T extends PriceListAggregateArgs> = {
        [P in keyof T & keyof AggregatePriceList]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePriceList[P]>
      : GetScalarType<T[P], AggregatePriceList[P]>
  }




  export type PriceListGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PriceListWhereInput
    orderBy?: PriceListOrderByWithAggregationInput | PriceListOrderByWithAggregationInput[]
    by: PriceListScalarFieldEnum[] | PriceListScalarFieldEnum
    having?: PriceListScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PriceListCountAggregateInputType | true
    _min?: PriceListMinAggregateInputType
    _max?: PriceListMaxAggregateInputType
  }

  export type PriceListGroupByOutputType = {
    id: string
    name: string
    code: string
    status: string
    createdAt: Date
    updatedAt: Date
    _count: PriceListCountAggregateOutputType | null
    _min: PriceListMinAggregateOutputType | null
    _max: PriceListMaxAggregateOutputType | null
  }

  type GetPriceListGroupByPayload<T extends PriceListGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PriceListGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PriceListGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PriceListGroupByOutputType[P]>
            : GetScalarType<T[P], PriceListGroupByOutputType[P]>
        }
      >
    >


  export type PriceListSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    code?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    prices?: boolean | PriceList$pricesArgs<ExtArgs>
    _count?: boolean | PriceListCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["priceList"]>

  export type PriceListSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    code?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["priceList"]>

  export type PriceListSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    code?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["priceList"]>

  export type PriceListSelectScalar = {
    id?: boolean
    name?: boolean
    code?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type PriceListOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "code" | "status" | "createdAt" | "updatedAt", ExtArgs["result"]["priceList"]>
  export type PriceListInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    prices?: boolean | PriceList$pricesArgs<ExtArgs>
    _count?: boolean | PriceListCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PriceListIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type PriceListIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $PriceListPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PriceList"
    objects: {
      prices: Prisma.$SkuPricePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      code: string
      status: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["priceList"]>
    composites: {}
  }

  type PriceListGetPayload<S extends boolean | null | undefined | PriceListDefaultArgs> = $Result.GetResult<Prisma.$PriceListPayload, S>

  type PriceListCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PriceListFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PriceListCountAggregateInputType | true
    }

  export interface PriceListDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PriceList'], meta: { name: 'PriceList' } }
    /**
     * Find zero or one PriceList that matches the filter.
     * @param {PriceListFindUniqueArgs} args - Arguments to find a PriceList
     * @example
     * // Get one PriceList
     * const priceList = await prisma.priceList.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PriceListFindUniqueArgs>(args: SelectSubset<T, PriceListFindUniqueArgs<ExtArgs>>): Prisma__PriceListClient<$Result.GetResult<Prisma.$PriceListPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PriceList that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PriceListFindUniqueOrThrowArgs} args - Arguments to find a PriceList
     * @example
     * // Get one PriceList
     * const priceList = await prisma.priceList.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PriceListFindUniqueOrThrowArgs>(args: SelectSubset<T, PriceListFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PriceListClient<$Result.GetResult<Prisma.$PriceListPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PriceList that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PriceListFindFirstArgs} args - Arguments to find a PriceList
     * @example
     * // Get one PriceList
     * const priceList = await prisma.priceList.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PriceListFindFirstArgs>(args?: SelectSubset<T, PriceListFindFirstArgs<ExtArgs>>): Prisma__PriceListClient<$Result.GetResult<Prisma.$PriceListPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PriceList that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PriceListFindFirstOrThrowArgs} args - Arguments to find a PriceList
     * @example
     * // Get one PriceList
     * const priceList = await prisma.priceList.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PriceListFindFirstOrThrowArgs>(args?: SelectSubset<T, PriceListFindFirstOrThrowArgs<ExtArgs>>): Prisma__PriceListClient<$Result.GetResult<Prisma.$PriceListPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PriceLists that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PriceListFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PriceLists
     * const priceLists = await prisma.priceList.findMany()
     * 
     * // Get first 10 PriceLists
     * const priceLists = await prisma.priceList.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const priceListWithIdOnly = await prisma.priceList.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PriceListFindManyArgs>(args?: SelectSubset<T, PriceListFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PriceListPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PriceList.
     * @param {PriceListCreateArgs} args - Arguments to create a PriceList.
     * @example
     * // Create one PriceList
     * const PriceList = await prisma.priceList.create({
     *   data: {
     *     // ... data to create a PriceList
     *   }
     * })
     * 
     */
    create<T extends PriceListCreateArgs>(args: SelectSubset<T, PriceListCreateArgs<ExtArgs>>): Prisma__PriceListClient<$Result.GetResult<Prisma.$PriceListPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PriceLists.
     * @param {PriceListCreateManyArgs} args - Arguments to create many PriceLists.
     * @example
     * // Create many PriceLists
     * const priceList = await prisma.priceList.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PriceListCreateManyArgs>(args?: SelectSubset<T, PriceListCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PriceLists and returns the data saved in the database.
     * @param {PriceListCreateManyAndReturnArgs} args - Arguments to create many PriceLists.
     * @example
     * // Create many PriceLists
     * const priceList = await prisma.priceList.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PriceLists and only return the `id`
     * const priceListWithIdOnly = await prisma.priceList.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PriceListCreateManyAndReturnArgs>(args?: SelectSubset<T, PriceListCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PriceListPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PriceList.
     * @param {PriceListDeleteArgs} args - Arguments to delete one PriceList.
     * @example
     * // Delete one PriceList
     * const PriceList = await prisma.priceList.delete({
     *   where: {
     *     // ... filter to delete one PriceList
     *   }
     * })
     * 
     */
    delete<T extends PriceListDeleteArgs>(args: SelectSubset<T, PriceListDeleteArgs<ExtArgs>>): Prisma__PriceListClient<$Result.GetResult<Prisma.$PriceListPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PriceList.
     * @param {PriceListUpdateArgs} args - Arguments to update one PriceList.
     * @example
     * // Update one PriceList
     * const priceList = await prisma.priceList.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PriceListUpdateArgs>(args: SelectSubset<T, PriceListUpdateArgs<ExtArgs>>): Prisma__PriceListClient<$Result.GetResult<Prisma.$PriceListPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PriceLists.
     * @param {PriceListDeleteManyArgs} args - Arguments to filter PriceLists to delete.
     * @example
     * // Delete a few PriceLists
     * const { count } = await prisma.priceList.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PriceListDeleteManyArgs>(args?: SelectSubset<T, PriceListDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PriceLists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PriceListUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PriceLists
     * const priceList = await prisma.priceList.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PriceListUpdateManyArgs>(args: SelectSubset<T, PriceListUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PriceLists and returns the data updated in the database.
     * @param {PriceListUpdateManyAndReturnArgs} args - Arguments to update many PriceLists.
     * @example
     * // Update many PriceLists
     * const priceList = await prisma.priceList.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PriceLists and only return the `id`
     * const priceListWithIdOnly = await prisma.priceList.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PriceListUpdateManyAndReturnArgs>(args: SelectSubset<T, PriceListUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PriceListPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PriceList.
     * @param {PriceListUpsertArgs} args - Arguments to update or create a PriceList.
     * @example
     * // Update or create a PriceList
     * const priceList = await prisma.priceList.upsert({
     *   create: {
     *     // ... data to create a PriceList
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PriceList we want to update
     *   }
     * })
     */
    upsert<T extends PriceListUpsertArgs>(args: SelectSubset<T, PriceListUpsertArgs<ExtArgs>>): Prisma__PriceListClient<$Result.GetResult<Prisma.$PriceListPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PriceLists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PriceListCountArgs} args - Arguments to filter PriceLists to count.
     * @example
     * // Count the number of PriceLists
     * const count = await prisma.priceList.count({
     *   where: {
     *     // ... the filter for the PriceLists we want to count
     *   }
     * })
    **/
    count<T extends PriceListCountArgs>(
      args?: Subset<T, PriceListCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PriceListCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PriceList.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PriceListAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PriceListAggregateArgs>(args: Subset<T, PriceListAggregateArgs>): Prisma.PrismaPromise<GetPriceListAggregateType<T>>

    /**
     * Group by PriceList.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PriceListGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PriceListGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PriceListGroupByArgs['orderBy'] }
        : { orderBy?: PriceListGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PriceListGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPriceListGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PriceList model
   */
  readonly fields: PriceListFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PriceList.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PriceListClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    prices<T extends PriceList$pricesArgs<ExtArgs> = {}>(args?: Subset<T, PriceList$pricesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SkuPricePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PriceList model
   */
  interface PriceListFieldRefs {
    readonly id: FieldRef<"PriceList", 'String'>
    readonly name: FieldRef<"PriceList", 'String'>
    readonly code: FieldRef<"PriceList", 'String'>
    readonly status: FieldRef<"PriceList", 'String'>
    readonly createdAt: FieldRef<"PriceList", 'DateTime'>
    readonly updatedAt: FieldRef<"PriceList", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * PriceList findUnique
   */
  export type PriceListFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PriceList
     */
    select?: PriceListSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PriceList
     */
    omit?: PriceListOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PriceListInclude<ExtArgs> | null
    /**
     * Filter, which PriceList to fetch.
     */
    where: PriceListWhereUniqueInput
  }

  /**
   * PriceList findUniqueOrThrow
   */
  export type PriceListFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PriceList
     */
    select?: PriceListSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PriceList
     */
    omit?: PriceListOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PriceListInclude<ExtArgs> | null
    /**
     * Filter, which PriceList to fetch.
     */
    where: PriceListWhereUniqueInput
  }

  /**
   * PriceList findFirst
   */
  export type PriceListFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PriceList
     */
    select?: PriceListSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PriceList
     */
    omit?: PriceListOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PriceListInclude<ExtArgs> | null
    /**
     * Filter, which PriceList to fetch.
     */
    where?: PriceListWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PriceLists to fetch.
     */
    orderBy?: PriceListOrderByWithRelationInput | PriceListOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PriceLists.
     */
    cursor?: PriceListWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PriceLists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PriceLists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PriceLists.
     */
    distinct?: PriceListScalarFieldEnum | PriceListScalarFieldEnum[]
  }

  /**
   * PriceList findFirstOrThrow
   */
  export type PriceListFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PriceList
     */
    select?: PriceListSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PriceList
     */
    omit?: PriceListOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PriceListInclude<ExtArgs> | null
    /**
     * Filter, which PriceList to fetch.
     */
    where?: PriceListWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PriceLists to fetch.
     */
    orderBy?: PriceListOrderByWithRelationInput | PriceListOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PriceLists.
     */
    cursor?: PriceListWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PriceLists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PriceLists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PriceLists.
     */
    distinct?: PriceListScalarFieldEnum | PriceListScalarFieldEnum[]
  }

  /**
   * PriceList findMany
   */
  export type PriceListFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PriceList
     */
    select?: PriceListSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PriceList
     */
    omit?: PriceListOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PriceListInclude<ExtArgs> | null
    /**
     * Filter, which PriceLists to fetch.
     */
    where?: PriceListWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PriceLists to fetch.
     */
    orderBy?: PriceListOrderByWithRelationInput | PriceListOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PriceLists.
     */
    cursor?: PriceListWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PriceLists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PriceLists.
     */
    skip?: number
    distinct?: PriceListScalarFieldEnum | PriceListScalarFieldEnum[]
  }

  /**
   * PriceList create
   */
  export type PriceListCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PriceList
     */
    select?: PriceListSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PriceList
     */
    omit?: PriceListOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PriceListInclude<ExtArgs> | null
    /**
     * The data needed to create a PriceList.
     */
    data: XOR<PriceListCreateInput, PriceListUncheckedCreateInput>
  }

  /**
   * PriceList createMany
   */
  export type PriceListCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PriceLists.
     */
    data: PriceListCreateManyInput | PriceListCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PriceList createManyAndReturn
   */
  export type PriceListCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PriceList
     */
    select?: PriceListSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PriceList
     */
    omit?: PriceListOmit<ExtArgs> | null
    /**
     * The data used to create many PriceLists.
     */
    data: PriceListCreateManyInput | PriceListCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PriceList update
   */
  export type PriceListUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PriceList
     */
    select?: PriceListSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PriceList
     */
    omit?: PriceListOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PriceListInclude<ExtArgs> | null
    /**
     * The data needed to update a PriceList.
     */
    data: XOR<PriceListUpdateInput, PriceListUncheckedUpdateInput>
    /**
     * Choose, which PriceList to update.
     */
    where: PriceListWhereUniqueInput
  }

  /**
   * PriceList updateMany
   */
  export type PriceListUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PriceLists.
     */
    data: XOR<PriceListUpdateManyMutationInput, PriceListUncheckedUpdateManyInput>
    /**
     * Filter which PriceLists to update
     */
    where?: PriceListWhereInput
    /**
     * Limit how many PriceLists to update.
     */
    limit?: number
  }

  /**
   * PriceList updateManyAndReturn
   */
  export type PriceListUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PriceList
     */
    select?: PriceListSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PriceList
     */
    omit?: PriceListOmit<ExtArgs> | null
    /**
     * The data used to update PriceLists.
     */
    data: XOR<PriceListUpdateManyMutationInput, PriceListUncheckedUpdateManyInput>
    /**
     * Filter which PriceLists to update
     */
    where?: PriceListWhereInput
    /**
     * Limit how many PriceLists to update.
     */
    limit?: number
  }

  /**
   * PriceList upsert
   */
  export type PriceListUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PriceList
     */
    select?: PriceListSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PriceList
     */
    omit?: PriceListOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PriceListInclude<ExtArgs> | null
    /**
     * The filter to search for the PriceList to update in case it exists.
     */
    where: PriceListWhereUniqueInput
    /**
     * In case the PriceList found by the `where` argument doesn't exist, create a new PriceList with this data.
     */
    create: XOR<PriceListCreateInput, PriceListUncheckedCreateInput>
    /**
     * In case the PriceList was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PriceListUpdateInput, PriceListUncheckedUpdateInput>
  }

  /**
   * PriceList delete
   */
  export type PriceListDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PriceList
     */
    select?: PriceListSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PriceList
     */
    omit?: PriceListOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PriceListInclude<ExtArgs> | null
    /**
     * Filter which PriceList to delete.
     */
    where: PriceListWhereUniqueInput
  }

  /**
   * PriceList deleteMany
   */
  export type PriceListDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PriceLists to delete
     */
    where?: PriceListWhereInput
    /**
     * Limit how many PriceLists to delete.
     */
    limit?: number
  }

  /**
   * PriceList.prices
   */
  export type PriceList$pricesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkuPrice
     */
    select?: SkuPriceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SkuPrice
     */
    omit?: SkuPriceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkuPriceInclude<ExtArgs> | null
    where?: SkuPriceWhereInput
    orderBy?: SkuPriceOrderByWithRelationInput | SkuPriceOrderByWithRelationInput[]
    cursor?: SkuPriceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SkuPriceScalarFieldEnum | SkuPriceScalarFieldEnum[]
  }

  /**
   * PriceList without action
   */
  export type PriceListDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PriceList
     */
    select?: PriceListSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PriceList
     */
    omit?: PriceListOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PriceListInclude<ExtArgs> | null
  }


  /**
   * Model Category
   */

  export type AggregateCategory = {
    _count: CategoryCountAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  export type CategoryMinAggregateOutputType = {
    id: string | null
    name: string | null
    parentId: string | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CategoryMaxAggregateOutputType = {
    id: string | null
    name: string | null
    parentId: string | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CategoryCountAggregateOutputType = {
    id: number
    name: number
    parentId: number
    status: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CategoryMinAggregateInputType = {
    id?: true
    name?: true
    parentId?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CategoryMaxAggregateInputType = {
    id?: true
    name?: true
    parentId?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CategoryCountAggregateInputType = {
    id?: true
    name?: true
    parentId?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CategoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Category to aggregate.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Categories
    **/
    _count?: true | CategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategoryMaxAggregateInputType
  }

  export type GetCategoryAggregateType<T extends CategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategory[P]>
      : GetScalarType<T[P], AggregateCategory[P]>
  }




  export type CategoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CategoryWhereInput
    orderBy?: CategoryOrderByWithAggregationInput | CategoryOrderByWithAggregationInput[]
    by: CategoryScalarFieldEnum[] | CategoryScalarFieldEnum
    having?: CategoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategoryCountAggregateInputType | true
    _min?: CategoryMinAggregateInputType
    _max?: CategoryMaxAggregateInputType
  }

  export type CategoryGroupByOutputType = {
    id: string
    name: string
    parentId: string | null
    status: string
    createdAt: Date
    updatedAt: Date
    _count: CategoryCountAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  type GetCategoryGroupByPayload<T extends CategoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategoryGroupByOutputType[P]>
            : GetScalarType<T[P], CategoryGroupByOutputType[P]>
        }
      >
    >


  export type CategorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    parentId?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    parent?: boolean | Category$parentArgs<ExtArgs>
    children?: boolean | Category$childrenArgs<ExtArgs>
    products?: boolean | Category$productsArgs<ExtArgs>
    _count?: boolean | CategoryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["category"]>

  export type CategorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    parentId?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    parent?: boolean | Category$parentArgs<ExtArgs>
  }, ExtArgs["result"]["category"]>

  export type CategorySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    parentId?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    parent?: boolean | Category$parentArgs<ExtArgs>
  }, ExtArgs["result"]["category"]>

  export type CategorySelectScalar = {
    id?: boolean
    name?: boolean
    parentId?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CategoryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "parentId" | "status" | "createdAt" | "updatedAt", ExtArgs["result"]["category"]>
  export type CategoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    parent?: boolean | Category$parentArgs<ExtArgs>
    children?: boolean | Category$childrenArgs<ExtArgs>
    products?: boolean | Category$productsArgs<ExtArgs>
    _count?: boolean | CategoryCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CategoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    parent?: boolean | Category$parentArgs<ExtArgs>
  }
  export type CategoryIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    parent?: boolean | Category$parentArgs<ExtArgs>
  }

  export type $CategoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Category"
    objects: {
      parent: Prisma.$CategoryPayload<ExtArgs> | null
      children: Prisma.$CategoryPayload<ExtArgs>[]
      products: Prisma.$ProductPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      parentId: string | null
      status: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["category"]>
    composites: {}
  }

  type CategoryGetPayload<S extends boolean | null | undefined | CategoryDefaultArgs> = $Result.GetResult<Prisma.$CategoryPayload, S>

  type CategoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CategoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CategoryCountAggregateInputType | true
    }

  export interface CategoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Category'], meta: { name: 'Category' } }
    /**
     * Find zero or one Category that matches the filter.
     * @param {CategoryFindUniqueArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CategoryFindUniqueArgs>(args: SelectSubset<T, CategoryFindUniqueArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Category that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CategoryFindUniqueOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CategoryFindUniqueOrThrowArgs>(args: SelectSubset<T, CategoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Category that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CategoryFindFirstArgs>(args?: SelectSubset<T, CategoryFindFirstArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Category that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CategoryFindFirstOrThrowArgs>(args?: SelectSubset<T, CategoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categories
     * const categories = await prisma.category.findMany()
     * 
     * // Get first 10 Categories
     * const categories = await prisma.category.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const categoryWithIdOnly = await prisma.category.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CategoryFindManyArgs>(args?: SelectSubset<T, CategoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Category.
     * @param {CategoryCreateArgs} args - Arguments to create a Category.
     * @example
     * // Create one Category
     * const Category = await prisma.category.create({
     *   data: {
     *     // ... data to create a Category
     *   }
     * })
     * 
     */
    create<T extends CategoryCreateArgs>(args: SelectSubset<T, CategoryCreateArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Categories.
     * @param {CategoryCreateManyArgs} args - Arguments to create many Categories.
     * @example
     * // Create many Categories
     * const category = await prisma.category.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CategoryCreateManyArgs>(args?: SelectSubset<T, CategoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Categories and returns the data saved in the database.
     * @param {CategoryCreateManyAndReturnArgs} args - Arguments to create many Categories.
     * @example
     * // Create many Categories
     * const category = await prisma.category.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Categories and only return the `id`
     * const categoryWithIdOnly = await prisma.category.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CategoryCreateManyAndReturnArgs>(args?: SelectSubset<T, CategoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Category.
     * @param {CategoryDeleteArgs} args - Arguments to delete one Category.
     * @example
     * // Delete one Category
     * const Category = await prisma.category.delete({
     *   where: {
     *     // ... filter to delete one Category
     *   }
     * })
     * 
     */
    delete<T extends CategoryDeleteArgs>(args: SelectSubset<T, CategoryDeleteArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Category.
     * @param {CategoryUpdateArgs} args - Arguments to update one Category.
     * @example
     * // Update one Category
     * const category = await prisma.category.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CategoryUpdateArgs>(args: SelectSubset<T, CategoryUpdateArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Categories.
     * @param {CategoryDeleteManyArgs} args - Arguments to filter Categories to delete.
     * @example
     * // Delete a few Categories
     * const { count } = await prisma.category.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CategoryDeleteManyArgs>(args?: SelectSubset<T, CategoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categories
     * const category = await prisma.category.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CategoryUpdateManyArgs>(args: SelectSubset<T, CategoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categories and returns the data updated in the database.
     * @param {CategoryUpdateManyAndReturnArgs} args - Arguments to update many Categories.
     * @example
     * // Update many Categories
     * const category = await prisma.category.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Categories and only return the `id`
     * const categoryWithIdOnly = await prisma.category.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CategoryUpdateManyAndReturnArgs>(args: SelectSubset<T, CategoryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Category.
     * @param {CategoryUpsertArgs} args - Arguments to update or create a Category.
     * @example
     * // Update or create a Category
     * const category = await prisma.category.upsert({
     *   create: {
     *     // ... data to create a Category
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Category we want to update
     *   }
     * })
     */
    upsert<T extends CategoryUpsertArgs>(args: SelectSubset<T, CategoryUpsertArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryCountArgs} args - Arguments to filter Categories to count.
     * @example
     * // Count the number of Categories
     * const count = await prisma.category.count({
     *   where: {
     *     // ... the filter for the Categories we want to count
     *   }
     * })
    **/
    count<T extends CategoryCountArgs>(
      args?: Subset<T, CategoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoryAggregateArgs>(args: Subset<T, CategoryAggregateArgs>): Prisma.PrismaPromise<GetCategoryAggregateType<T>>

    /**
     * Group by Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CategoryGroupByArgs['orderBy'] }
        : { orderBy?: CategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Category model
   */
  readonly fields: CategoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Category.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CategoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    parent<T extends Category$parentArgs<ExtArgs> = {}>(args?: Subset<T, Category$parentArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    children<T extends Category$childrenArgs<ExtArgs> = {}>(args?: Subset<T, Category$childrenArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    products<T extends Category$productsArgs<ExtArgs> = {}>(args?: Subset<T, Category$productsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Category model
   */
  interface CategoryFieldRefs {
    readonly id: FieldRef<"Category", 'String'>
    readonly name: FieldRef<"Category", 'String'>
    readonly parentId: FieldRef<"Category", 'String'>
    readonly status: FieldRef<"Category", 'String'>
    readonly createdAt: FieldRef<"Category", 'DateTime'>
    readonly updatedAt: FieldRef<"Category", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Category findUnique
   */
  export type CategoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category findUniqueOrThrow
   */
  export type CategoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category findFirst
   */
  export type CategoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     */
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category findFirstOrThrow
   */
  export type CategoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     */
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category findMany
   */
  export type CategoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Categories to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category create
   */
  export type CategoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The data needed to create a Category.
     */
    data: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
  }

  /**
   * Category createMany
   */
  export type CategoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Categories.
     */
    data: CategoryCreateManyInput | CategoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Category createManyAndReturn
   */
  export type CategoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * The data used to create many Categories.
     */
    data: CategoryCreateManyInput | CategoryCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Category update
   */
  export type CategoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The data needed to update a Category.
     */
    data: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
    /**
     * Choose, which Category to update.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category updateMany
   */
  export type CategoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Categories.
     */
    data: XOR<CategoryUpdateManyMutationInput, CategoryUncheckedUpdateManyInput>
    /**
     * Filter which Categories to update
     */
    where?: CategoryWhereInput
    /**
     * Limit how many Categories to update.
     */
    limit?: number
  }

  /**
   * Category updateManyAndReturn
   */
  export type CategoryUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * The data used to update Categories.
     */
    data: XOR<CategoryUpdateManyMutationInput, CategoryUncheckedUpdateManyInput>
    /**
     * Filter which Categories to update
     */
    where?: CategoryWhereInput
    /**
     * Limit how many Categories to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Category upsert
   */
  export type CategoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The filter to search for the Category to update in case it exists.
     */
    where: CategoryWhereUniqueInput
    /**
     * In case the Category found by the `where` argument doesn't exist, create a new Category with this data.
     */
    create: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
    /**
     * In case the Category was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
  }

  /**
   * Category delete
   */
  export type CategoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter which Category to delete.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category deleteMany
   */
  export type CategoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Categories to delete
     */
    where?: CategoryWhereInput
    /**
     * Limit how many Categories to delete.
     */
    limit?: number
  }

  /**
   * Category.parent
   */
  export type Category$parentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    where?: CategoryWhereInput
  }

  /**
   * Category.children
   */
  export type Category$childrenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    where?: CategoryWhereInput
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    cursor?: CategoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category.products
   */
  export type Category$productsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    where?: ProductWhereInput
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    cursor?: ProductWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * Category without action
   */
  export type CategoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
  }


  /**
   * Model SyncJob
   */

  export type AggregateSyncJob = {
    _count: SyncJobCountAggregateOutputType | null
    _min: SyncJobMinAggregateOutputType | null
    _max: SyncJobMaxAggregateOutputType | null
  }

  export type SyncJobMinAggregateOutputType = {
    id: string | null
    source: string | null
    status: string | null
    startedAt: Date | null
    completedAt: Date | null
    errorLog: string | null
    createdAt: Date | null
  }

  export type SyncJobMaxAggregateOutputType = {
    id: string | null
    source: string | null
    status: string | null
    startedAt: Date | null
    completedAt: Date | null
    errorLog: string | null
    createdAt: Date | null
  }

  export type SyncJobCountAggregateOutputType = {
    id: number
    source: number
    status: number
    startedAt: number
    completedAt: number
    errorLog: number
    createdAt: number
    _all: number
  }


  export type SyncJobMinAggregateInputType = {
    id?: true
    source?: true
    status?: true
    startedAt?: true
    completedAt?: true
    errorLog?: true
    createdAt?: true
  }

  export type SyncJobMaxAggregateInputType = {
    id?: true
    source?: true
    status?: true
    startedAt?: true
    completedAt?: true
    errorLog?: true
    createdAt?: true
  }

  export type SyncJobCountAggregateInputType = {
    id?: true
    source?: true
    status?: true
    startedAt?: true
    completedAt?: true
    errorLog?: true
    createdAt?: true
    _all?: true
  }

  export type SyncJobAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SyncJob to aggregate.
     */
    where?: SyncJobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SyncJobs to fetch.
     */
    orderBy?: SyncJobOrderByWithRelationInput | SyncJobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SyncJobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SyncJobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SyncJobs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SyncJobs
    **/
    _count?: true | SyncJobCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SyncJobMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SyncJobMaxAggregateInputType
  }

  export type GetSyncJobAggregateType<T extends SyncJobAggregateArgs> = {
        [P in keyof T & keyof AggregateSyncJob]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSyncJob[P]>
      : GetScalarType<T[P], AggregateSyncJob[P]>
  }




  export type SyncJobGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SyncJobWhereInput
    orderBy?: SyncJobOrderByWithAggregationInput | SyncJobOrderByWithAggregationInput[]
    by: SyncJobScalarFieldEnum[] | SyncJobScalarFieldEnum
    having?: SyncJobScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SyncJobCountAggregateInputType | true
    _min?: SyncJobMinAggregateInputType
    _max?: SyncJobMaxAggregateInputType
  }

  export type SyncJobGroupByOutputType = {
    id: string
    source: string
    status: string
    startedAt: Date
    completedAt: Date | null
    errorLog: string | null
    createdAt: Date
    _count: SyncJobCountAggregateOutputType | null
    _min: SyncJobMinAggregateOutputType | null
    _max: SyncJobMaxAggregateOutputType | null
  }

  type GetSyncJobGroupByPayload<T extends SyncJobGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SyncJobGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SyncJobGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SyncJobGroupByOutputType[P]>
            : GetScalarType<T[P], SyncJobGroupByOutputType[P]>
        }
      >
    >


  export type SyncJobSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    source?: boolean
    status?: boolean
    startedAt?: boolean
    completedAt?: boolean
    errorLog?: boolean
    createdAt?: boolean
    products?: boolean | SyncJob$productsArgs<ExtArgs>
    _count?: boolean | SyncJobCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["syncJob"]>

  export type SyncJobSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    source?: boolean
    status?: boolean
    startedAt?: boolean
    completedAt?: boolean
    errorLog?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["syncJob"]>

  export type SyncJobSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    source?: boolean
    status?: boolean
    startedAt?: boolean
    completedAt?: boolean
    errorLog?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["syncJob"]>

  export type SyncJobSelectScalar = {
    id?: boolean
    source?: boolean
    status?: boolean
    startedAt?: boolean
    completedAt?: boolean
    errorLog?: boolean
    createdAt?: boolean
  }

  export type SyncJobOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "source" | "status" | "startedAt" | "completedAt" | "errorLog" | "createdAt", ExtArgs["result"]["syncJob"]>
  export type SyncJobInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    products?: boolean | SyncJob$productsArgs<ExtArgs>
    _count?: boolean | SyncJobCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SyncJobIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type SyncJobIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $SyncJobPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SyncJob"
    objects: {
      products: Prisma.$ProductPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      source: string
      status: string
      startedAt: Date
      completedAt: Date | null
      errorLog: string | null
      createdAt: Date
    }, ExtArgs["result"]["syncJob"]>
    composites: {}
  }

  type SyncJobGetPayload<S extends boolean | null | undefined | SyncJobDefaultArgs> = $Result.GetResult<Prisma.$SyncJobPayload, S>

  type SyncJobCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SyncJobFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SyncJobCountAggregateInputType | true
    }

  export interface SyncJobDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SyncJob'], meta: { name: 'SyncJob' } }
    /**
     * Find zero or one SyncJob that matches the filter.
     * @param {SyncJobFindUniqueArgs} args - Arguments to find a SyncJob
     * @example
     * // Get one SyncJob
     * const syncJob = await prisma.syncJob.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SyncJobFindUniqueArgs>(args: SelectSubset<T, SyncJobFindUniqueArgs<ExtArgs>>): Prisma__SyncJobClient<$Result.GetResult<Prisma.$SyncJobPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SyncJob that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SyncJobFindUniqueOrThrowArgs} args - Arguments to find a SyncJob
     * @example
     * // Get one SyncJob
     * const syncJob = await prisma.syncJob.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SyncJobFindUniqueOrThrowArgs>(args: SelectSubset<T, SyncJobFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SyncJobClient<$Result.GetResult<Prisma.$SyncJobPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SyncJob that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SyncJobFindFirstArgs} args - Arguments to find a SyncJob
     * @example
     * // Get one SyncJob
     * const syncJob = await prisma.syncJob.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SyncJobFindFirstArgs>(args?: SelectSubset<T, SyncJobFindFirstArgs<ExtArgs>>): Prisma__SyncJobClient<$Result.GetResult<Prisma.$SyncJobPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SyncJob that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SyncJobFindFirstOrThrowArgs} args - Arguments to find a SyncJob
     * @example
     * // Get one SyncJob
     * const syncJob = await prisma.syncJob.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SyncJobFindFirstOrThrowArgs>(args?: SelectSubset<T, SyncJobFindFirstOrThrowArgs<ExtArgs>>): Prisma__SyncJobClient<$Result.GetResult<Prisma.$SyncJobPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SyncJobs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SyncJobFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SyncJobs
     * const syncJobs = await prisma.syncJob.findMany()
     * 
     * // Get first 10 SyncJobs
     * const syncJobs = await prisma.syncJob.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const syncJobWithIdOnly = await prisma.syncJob.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SyncJobFindManyArgs>(args?: SelectSubset<T, SyncJobFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SyncJobPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SyncJob.
     * @param {SyncJobCreateArgs} args - Arguments to create a SyncJob.
     * @example
     * // Create one SyncJob
     * const SyncJob = await prisma.syncJob.create({
     *   data: {
     *     // ... data to create a SyncJob
     *   }
     * })
     * 
     */
    create<T extends SyncJobCreateArgs>(args: SelectSubset<T, SyncJobCreateArgs<ExtArgs>>): Prisma__SyncJobClient<$Result.GetResult<Prisma.$SyncJobPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SyncJobs.
     * @param {SyncJobCreateManyArgs} args - Arguments to create many SyncJobs.
     * @example
     * // Create many SyncJobs
     * const syncJob = await prisma.syncJob.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SyncJobCreateManyArgs>(args?: SelectSubset<T, SyncJobCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SyncJobs and returns the data saved in the database.
     * @param {SyncJobCreateManyAndReturnArgs} args - Arguments to create many SyncJobs.
     * @example
     * // Create many SyncJobs
     * const syncJob = await prisma.syncJob.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SyncJobs and only return the `id`
     * const syncJobWithIdOnly = await prisma.syncJob.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SyncJobCreateManyAndReturnArgs>(args?: SelectSubset<T, SyncJobCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SyncJobPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a SyncJob.
     * @param {SyncJobDeleteArgs} args - Arguments to delete one SyncJob.
     * @example
     * // Delete one SyncJob
     * const SyncJob = await prisma.syncJob.delete({
     *   where: {
     *     // ... filter to delete one SyncJob
     *   }
     * })
     * 
     */
    delete<T extends SyncJobDeleteArgs>(args: SelectSubset<T, SyncJobDeleteArgs<ExtArgs>>): Prisma__SyncJobClient<$Result.GetResult<Prisma.$SyncJobPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SyncJob.
     * @param {SyncJobUpdateArgs} args - Arguments to update one SyncJob.
     * @example
     * // Update one SyncJob
     * const syncJob = await prisma.syncJob.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SyncJobUpdateArgs>(args: SelectSubset<T, SyncJobUpdateArgs<ExtArgs>>): Prisma__SyncJobClient<$Result.GetResult<Prisma.$SyncJobPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SyncJobs.
     * @param {SyncJobDeleteManyArgs} args - Arguments to filter SyncJobs to delete.
     * @example
     * // Delete a few SyncJobs
     * const { count } = await prisma.syncJob.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SyncJobDeleteManyArgs>(args?: SelectSubset<T, SyncJobDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SyncJobs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SyncJobUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SyncJobs
     * const syncJob = await prisma.syncJob.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SyncJobUpdateManyArgs>(args: SelectSubset<T, SyncJobUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SyncJobs and returns the data updated in the database.
     * @param {SyncJobUpdateManyAndReturnArgs} args - Arguments to update many SyncJobs.
     * @example
     * // Update many SyncJobs
     * const syncJob = await prisma.syncJob.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more SyncJobs and only return the `id`
     * const syncJobWithIdOnly = await prisma.syncJob.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SyncJobUpdateManyAndReturnArgs>(args: SelectSubset<T, SyncJobUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SyncJobPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one SyncJob.
     * @param {SyncJobUpsertArgs} args - Arguments to update or create a SyncJob.
     * @example
     * // Update or create a SyncJob
     * const syncJob = await prisma.syncJob.upsert({
     *   create: {
     *     // ... data to create a SyncJob
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SyncJob we want to update
     *   }
     * })
     */
    upsert<T extends SyncJobUpsertArgs>(args: SelectSubset<T, SyncJobUpsertArgs<ExtArgs>>): Prisma__SyncJobClient<$Result.GetResult<Prisma.$SyncJobPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SyncJobs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SyncJobCountArgs} args - Arguments to filter SyncJobs to count.
     * @example
     * // Count the number of SyncJobs
     * const count = await prisma.syncJob.count({
     *   where: {
     *     // ... the filter for the SyncJobs we want to count
     *   }
     * })
    **/
    count<T extends SyncJobCountArgs>(
      args?: Subset<T, SyncJobCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SyncJobCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SyncJob.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SyncJobAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SyncJobAggregateArgs>(args: Subset<T, SyncJobAggregateArgs>): Prisma.PrismaPromise<GetSyncJobAggregateType<T>>

    /**
     * Group by SyncJob.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SyncJobGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SyncJobGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SyncJobGroupByArgs['orderBy'] }
        : { orderBy?: SyncJobGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SyncJobGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSyncJobGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SyncJob model
   */
  readonly fields: SyncJobFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SyncJob.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SyncJobClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    products<T extends SyncJob$productsArgs<ExtArgs> = {}>(args?: Subset<T, SyncJob$productsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SyncJob model
   */
  interface SyncJobFieldRefs {
    readonly id: FieldRef<"SyncJob", 'String'>
    readonly source: FieldRef<"SyncJob", 'String'>
    readonly status: FieldRef<"SyncJob", 'String'>
    readonly startedAt: FieldRef<"SyncJob", 'DateTime'>
    readonly completedAt: FieldRef<"SyncJob", 'DateTime'>
    readonly errorLog: FieldRef<"SyncJob", 'String'>
    readonly createdAt: FieldRef<"SyncJob", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SyncJob findUnique
   */
  export type SyncJobFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SyncJob
     */
    select?: SyncJobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SyncJob
     */
    omit?: SyncJobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SyncJobInclude<ExtArgs> | null
    /**
     * Filter, which SyncJob to fetch.
     */
    where: SyncJobWhereUniqueInput
  }

  /**
   * SyncJob findUniqueOrThrow
   */
  export type SyncJobFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SyncJob
     */
    select?: SyncJobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SyncJob
     */
    omit?: SyncJobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SyncJobInclude<ExtArgs> | null
    /**
     * Filter, which SyncJob to fetch.
     */
    where: SyncJobWhereUniqueInput
  }

  /**
   * SyncJob findFirst
   */
  export type SyncJobFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SyncJob
     */
    select?: SyncJobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SyncJob
     */
    omit?: SyncJobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SyncJobInclude<ExtArgs> | null
    /**
     * Filter, which SyncJob to fetch.
     */
    where?: SyncJobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SyncJobs to fetch.
     */
    orderBy?: SyncJobOrderByWithRelationInput | SyncJobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SyncJobs.
     */
    cursor?: SyncJobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SyncJobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SyncJobs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SyncJobs.
     */
    distinct?: SyncJobScalarFieldEnum | SyncJobScalarFieldEnum[]
  }

  /**
   * SyncJob findFirstOrThrow
   */
  export type SyncJobFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SyncJob
     */
    select?: SyncJobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SyncJob
     */
    omit?: SyncJobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SyncJobInclude<ExtArgs> | null
    /**
     * Filter, which SyncJob to fetch.
     */
    where?: SyncJobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SyncJobs to fetch.
     */
    orderBy?: SyncJobOrderByWithRelationInput | SyncJobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SyncJobs.
     */
    cursor?: SyncJobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SyncJobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SyncJobs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SyncJobs.
     */
    distinct?: SyncJobScalarFieldEnum | SyncJobScalarFieldEnum[]
  }

  /**
   * SyncJob findMany
   */
  export type SyncJobFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SyncJob
     */
    select?: SyncJobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SyncJob
     */
    omit?: SyncJobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SyncJobInclude<ExtArgs> | null
    /**
     * Filter, which SyncJobs to fetch.
     */
    where?: SyncJobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SyncJobs to fetch.
     */
    orderBy?: SyncJobOrderByWithRelationInput | SyncJobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SyncJobs.
     */
    cursor?: SyncJobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SyncJobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SyncJobs.
     */
    skip?: number
    distinct?: SyncJobScalarFieldEnum | SyncJobScalarFieldEnum[]
  }

  /**
   * SyncJob create
   */
  export type SyncJobCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SyncJob
     */
    select?: SyncJobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SyncJob
     */
    omit?: SyncJobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SyncJobInclude<ExtArgs> | null
    /**
     * The data needed to create a SyncJob.
     */
    data: XOR<SyncJobCreateInput, SyncJobUncheckedCreateInput>
  }

  /**
   * SyncJob createMany
   */
  export type SyncJobCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SyncJobs.
     */
    data: SyncJobCreateManyInput | SyncJobCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SyncJob createManyAndReturn
   */
  export type SyncJobCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SyncJob
     */
    select?: SyncJobSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SyncJob
     */
    omit?: SyncJobOmit<ExtArgs> | null
    /**
     * The data used to create many SyncJobs.
     */
    data: SyncJobCreateManyInput | SyncJobCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SyncJob update
   */
  export type SyncJobUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SyncJob
     */
    select?: SyncJobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SyncJob
     */
    omit?: SyncJobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SyncJobInclude<ExtArgs> | null
    /**
     * The data needed to update a SyncJob.
     */
    data: XOR<SyncJobUpdateInput, SyncJobUncheckedUpdateInput>
    /**
     * Choose, which SyncJob to update.
     */
    where: SyncJobWhereUniqueInput
  }

  /**
   * SyncJob updateMany
   */
  export type SyncJobUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SyncJobs.
     */
    data: XOR<SyncJobUpdateManyMutationInput, SyncJobUncheckedUpdateManyInput>
    /**
     * Filter which SyncJobs to update
     */
    where?: SyncJobWhereInput
    /**
     * Limit how many SyncJobs to update.
     */
    limit?: number
  }

  /**
   * SyncJob updateManyAndReturn
   */
  export type SyncJobUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SyncJob
     */
    select?: SyncJobSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SyncJob
     */
    omit?: SyncJobOmit<ExtArgs> | null
    /**
     * The data used to update SyncJobs.
     */
    data: XOR<SyncJobUpdateManyMutationInput, SyncJobUncheckedUpdateManyInput>
    /**
     * Filter which SyncJobs to update
     */
    where?: SyncJobWhereInput
    /**
     * Limit how many SyncJobs to update.
     */
    limit?: number
  }

  /**
   * SyncJob upsert
   */
  export type SyncJobUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SyncJob
     */
    select?: SyncJobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SyncJob
     */
    omit?: SyncJobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SyncJobInclude<ExtArgs> | null
    /**
     * The filter to search for the SyncJob to update in case it exists.
     */
    where: SyncJobWhereUniqueInput
    /**
     * In case the SyncJob found by the `where` argument doesn't exist, create a new SyncJob with this data.
     */
    create: XOR<SyncJobCreateInput, SyncJobUncheckedCreateInput>
    /**
     * In case the SyncJob was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SyncJobUpdateInput, SyncJobUncheckedUpdateInput>
  }

  /**
   * SyncJob delete
   */
  export type SyncJobDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SyncJob
     */
    select?: SyncJobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SyncJob
     */
    omit?: SyncJobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SyncJobInclude<ExtArgs> | null
    /**
     * Filter which SyncJob to delete.
     */
    where: SyncJobWhereUniqueInput
  }

  /**
   * SyncJob deleteMany
   */
  export type SyncJobDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SyncJobs to delete
     */
    where?: SyncJobWhereInput
    /**
     * Limit how many SyncJobs to delete.
     */
    limit?: number
  }

  /**
   * SyncJob.products
   */
  export type SyncJob$productsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    where?: ProductWhereInput
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    cursor?: ProductWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * SyncJob without action
   */
  export type SyncJobDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SyncJob
     */
    select?: SyncJobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SyncJob
     */
    omit?: SyncJobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SyncJobInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const ProductScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    categoryId: 'categoryId',
    syncJobId: 'syncJobId'
  };

  export type ProductScalarFieldEnum = (typeof ProductScalarFieldEnum)[keyof typeof ProductScalarFieldEnum]


  export const SkuScalarFieldEnum: {
    id: 'id',
    productId: 'productId',
    code: 'code',
    barcode: 'barcode',
    name: 'name',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SkuScalarFieldEnum = (typeof SkuScalarFieldEnum)[keyof typeof SkuScalarFieldEnum]


  export const SkuImageScalarFieldEnum: {
    id: 'id',
    skuId: 'skuId',
    url: 'url',
    altText: 'altText',
    order: 'order',
    createdAt: 'createdAt'
  };

  export type SkuImageScalarFieldEnum = (typeof SkuImageScalarFieldEnum)[keyof typeof SkuImageScalarFieldEnum]


  export const SkuPriceScalarFieldEnum: {
    id: 'id',
    skuId: 'skuId',
    priceListId: 'priceListId',
    price: 'price',
    validFrom: 'validFrom',
    validTo: 'validTo',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SkuPriceScalarFieldEnum = (typeof SkuPriceScalarFieldEnum)[keyof typeof SkuPriceScalarFieldEnum]


  export const SkuStockScalarFieldEnum: {
    id: 'id',
    skuId: 'skuId',
    warehouseId: 'warehouseId',
    quantity: 'quantity',
    reserved: 'reserved',
    available: 'available',
    updatedAt: 'updatedAt'
  };

  export type SkuStockScalarFieldEnum = (typeof SkuStockScalarFieldEnum)[keyof typeof SkuStockScalarFieldEnum]


  export const WarehouseScalarFieldEnum: {
    id: 'id',
    name: 'name',
    code: 'code',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type WarehouseScalarFieldEnum = (typeof WarehouseScalarFieldEnum)[keyof typeof WarehouseScalarFieldEnum]


  export const PriceListScalarFieldEnum: {
    id: 'id',
    name: 'name',
    code: 'code',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PriceListScalarFieldEnum = (typeof PriceListScalarFieldEnum)[keyof typeof PriceListScalarFieldEnum]


  export const CategoryScalarFieldEnum: {
    id: 'id',
    name: 'name',
    parentId: 'parentId',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CategoryScalarFieldEnum = (typeof CategoryScalarFieldEnum)[keyof typeof CategoryScalarFieldEnum]


  export const SyncJobScalarFieldEnum: {
    id: 'id',
    source: 'source',
    status: 'status',
    startedAt: 'startedAt',
    completedAt: 'completedAt',
    errorLog: 'errorLog',
    createdAt: 'createdAt'
  };

  export type SyncJobScalarFieldEnum = (typeof SyncJobScalarFieldEnum)[keyof typeof SyncJobScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Decimal'
   */
  export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


  /**
   * Reference to a field of type 'Decimal[]'
   */
  export type ListDecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type ProductWhereInput = {
    AND?: ProductWhereInput | ProductWhereInput[]
    OR?: ProductWhereInput[]
    NOT?: ProductWhereInput | ProductWhereInput[]
    id?: StringFilter<"Product"> | string
    name?: StringFilter<"Product"> | string
    description?: StringNullableFilter<"Product"> | string | null
    status?: StringFilter<"Product"> | string
    createdAt?: DateTimeFilter<"Product"> | Date | string
    updatedAt?: DateTimeFilter<"Product"> | Date | string
    categoryId?: StringNullableFilter<"Product"> | string | null
    syncJobId?: StringNullableFilter<"Product"> | string | null
    skus?: SkuListRelationFilter
    category?: XOR<CategoryNullableScalarRelationFilter, CategoryWhereInput> | null
    syncJob?: XOR<SyncJobNullableScalarRelationFilter, SyncJobWhereInput> | null
  }

  export type ProductOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    categoryId?: SortOrderInput | SortOrder
    syncJobId?: SortOrderInput | SortOrder
    skus?: SkuOrderByRelationAggregateInput
    category?: CategoryOrderByWithRelationInput
    syncJob?: SyncJobOrderByWithRelationInput
  }

  export type ProductWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ProductWhereInput | ProductWhereInput[]
    OR?: ProductWhereInput[]
    NOT?: ProductWhereInput | ProductWhereInput[]
    name?: StringFilter<"Product"> | string
    description?: StringNullableFilter<"Product"> | string | null
    status?: StringFilter<"Product"> | string
    createdAt?: DateTimeFilter<"Product"> | Date | string
    updatedAt?: DateTimeFilter<"Product"> | Date | string
    categoryId?: StringNullableFilter<"Product"> | string | null
    syncJobId?: StringNullableFilter<"Product"> | string | null
    skus?: SkuListRelationFilter
    category?: XOR<CategoryNullableScalarRelationFilter, CategoryWhereInput> | null
    syncJob?: XOR<SyncJobNullableScalarRelationFilter, SyncJobWhereInput> | null
  }, "id">

  export type ProductOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    categoryId?: SortOrderInput | SortOrder
    syncJobId?: SortOrderInput | SortOrder
    _count?: ProductCountOrderByAggregateInput
    _max?: ProductMaxOrderByAggregateInput
    _min?: ProductMinOrderByAggregateInput
  }

  export type ProductScalarWhereWithAggregatesInput = {
    AND?: ProductScalarWhereWithAggregatesInput | ProductScalarWhereWithAggregatesInput[]
    OR?: ProductScalarWhereWithAggregatesInput[]
    NOT?: ProductScalarWhereWithAggregatesInput | ProductScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Product"> | string
    name?: StringWithAggregatesFilter<"Product"> | string
    description?: StringNullableWithAggregatesFilter<"Product"> | string | null
    status?: StringWithAggregatesFilter<"Product"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Product"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Product"> | Date | string
    categoryId?: StringNullableWithAggregatesFilter<"Product"> | string | null
    syncJobId?: StringNullableWithAggregatesFilter<"Product"> | string | null
  }

  export type SkuWhereInput = {
    AND?: SkuWhereInput | SkuWhereInput[]
    OR?: SkuWhereInput[]
    NOT?: SkuWhereInput | SkuWhereInput[]
    id?: StringFilter<"Sku"> | string
    productId?: StringFilter<"Sku"> | string
    code?: StringFilter<"Sku"> | string
    barcode?: StringNullableFilter<"Sku"> | string | null
    name?: StringFilter<"Sku"> | string
    status?: StringFilter<"Sku"> | string
    createdAt?: DateTimeFilter<"Sku"> | Date | string
    updatedAt?: DateTimeFilter<"Sku"> | Date | string
    product?: XOR<ProductScalarRelationFilter, ProductWhereInput>
    images?: SkuImageListRelationFilter
    prices?: SkuPriceListRelationFilter
    stocks?: SkuStockListRelationFilter
  }

  export type SkuOrderByWithRelationInput = {
    id?: SortOrder
    productId?: SortOrder
    code?: SortOrder
    barcode?: SortOrderInput | SortOrder
    name?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    product?: ProductOrderByWithRelationInput
    images?: SkuImageOrderByRelationAggregateInput
    prices?: SkuPriceOrderByRelationAggregateInput
    stocks?: SkuStockOrderByRelationAggregateInput
  }

  export type SkuWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    code?: string
    barcode?: string
    AND?: SkuWhereInput | SkuWhereInput[]
    OR?: SkuWhereInput[]
    NOT?: SkuWhereInput | SkuWhereInput[]
    productId?: StringFilter<"Sku"> | string
    name?: StringFilter<"Sku"> | string
    status?: StringFilter<"Sku"> | string
    createdAt?: DateTimeFilter<"Sku"> | Date | string
    updatedAt?: DateTimeFilter<"Sku"> | Date | string
    product?: XOR<ProductScalarRelationFilter, ProductWhereInput>
    images?: SkuImageListRelationFilter
    prices?: SkuPriceListRelationFilter
    stocks?: SkuStockListRelationFilter
  }, "id" | "code" | "barcode">

  export type SkuOrderByWithAggregationInput = {
    id?: SortOrder
    productId?: SortOrder
    code?: SortOrder
    barcode?: SortOrderInput | SortOrder
    name?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SkuCountOrderByAggregateInput
    _max?: SkuMaxOrderByAggregateInput
    _min?: SkuMinOrderByAggregateInput
  }

  export type SkuScalarWhereWithAggregatesInput = {
    AND?: SkuScalarWhereWithAggregatesInput | SkuScalarWhereWithAggregatesInput[]
    OR?: SkuScalarWhereWithAggregatesInput[]
    NOT?: SkuScalarWhereWithAggregatesInput | SkuScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Sku"> | string
    productId?: StringWithAggregatesFilter<"Sku"> | string
    code?: StringWithAggregatesFilter<"Sku"> | string
    barcode?: StringNullableWithAggregatesFilter<"Sku"> | string | null
    name?: StringWithAggregatesFilter<"Sku"> | string
    status?: StringWithAggregatesFilter<"Sku"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Sku"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Sku"> | Date | string
  }

  export type SkuImageWhereInput = {
    AND?: SkuImageWhereInput | SkuImageWhereInput[]
    OR?: SkuImageWhereInput[]
    NOT?: SkuImageWhereInput | SkuImageWhereInput[]
    id?: StringFilter<"SkuImage"> | string
    skuId?: StringFilter<"SkuImage"> | string
    url?: StringFilter<"SkuImage"> | string
    altText?: StringNullableFilter<"SkuImage"> | string | null
    order?: IntFilter<"SkuImage"> | number
    createdAt?: DateTimeFilter<"SkuImage"> | Date | string
    sku?: XOR<SkuScalarRelationFilter, SkuWhereInput>
  }

  export type SkuImageOrderByWithRelationInput = {
    id?: SortOrder
    skuId?: SortOrder
    url?: SortOrder
    altText?: SortOrderInput | SortOrder
    order?: SortOrder
    createdAt?: SortOrder
    sku?: SkuOrderByWithRelationInput
  }

  export type SkuImageWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SkuImageWhereInput | SkuImageWhereInput[]
    OR?: SkuImageWhereInput[]
    NOT?: SkuImageWhereInput | SkuImageWhereInput[]
    skuId?: StringFilter<"SkuImage"> | string
    url?: StringFilter<"SkuImage"> | string
    altText?: StringNullableFilter<"SkuImage"> | string | null
    order?: IntFilter<"SkuImage"> | number
    createdAt?: DateTimeFilter<"SkuImage"> | Date | string
    sku?: XOR<SkuScalarRelationFilter, SkuWhereInput>
  }, "id">

  export type SkuImageOrderByWithAggregationInput = {
    id?: SortOrder
    skuId?: SortOrder
    url?: SortOrder
    altText?: SortOrderInput | SortOrder
    order?: SortOrder
    createdAt?: SortOrder
    _count?: SkuImageCountOrderByAggregateInput
    _avg?: SkuImageAvgOrderByAggregateInput
    _max?: SkuImageMaxOrderByAggregateInput
    _min?: SkuImageMinOrderByAggregateInput
    _sum?: SkuImageSumOrderByAggregateInput
  }

  export type SkuImageScalarWhereWithAggregatesInput = {
    AND?: SkuImageScalarWhereWithAggregatesInput | SkuImageScalarWhereWithAggregatesInput[]
    OR?: SkuImageScalarWhereWithAggregatesInput[]
    NOT?: SkuImageScalarWhereWithAggregatesInput | SkuImageScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SkuImage"> | string
    skuId?: StringWithAggregatesFilter<"SkuImage"> | string
    url?: StringWithAggregatesFilter<"SkuImage"> | string
    altText?: StringNullableWithAggregatesFilter<"SkuImage"> | string | null
    order?: IntWithAggregatesFilter<"SkuImage"> | number
    createdAt?: DateTimeWithAggregatesFilter<"SkuImage"> | Date | string
  }

  export type SkuPriceWhereInput = {
    AND?: SkuPriceWhereInput | SkuPriceWhereInput[]
    OR?: SkuPriceWhereInput[]
    NOT?: SkuPriceWhereInput | SkuPriceWhereInput[]
    id?: StringFilter<"SkuPrice"> | string
    skuId?: StringFilter<"SkuPrice"> | string
    priceListId?: StringFilter<"SkuPrice"> | string
    price?: DecimalFilter<"SkuPrice"> | Decimal | DecimalJsLike | number | string
    validFrom?: DateTimeFilter<"SkuPrice"> | Date | string
    validTo?: DateTimeNullableFilter<"SkuPrice"> | Date | string | null
    createdAt?: DateTimeFilter<"SkuPrice"> | Date | string
    updatedAt?: DateTimeFilter<"SkuPrice"> | Date | string
    sku?: XOR<SkuScalarRelationFilter, SkuWhereInput>
    priceList?: XOR<PriceListScalarRelationFilter, PriceListWhereInput>
  }

  export type SkuPriceOrderByWithRelationInput = {
    id?: SortOrder
    skuId?: SortOrder
    priceListId?: SortOrder
    price?: SortOrder
    validFrom?: SortOrder
    validTo?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    sku?: SkuOrderByWithRelationInput
    priceList?: PriceListOrderByWithRelationInput
  }

  export type SkuPriceWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SkuPriceWhereInput | SkuPriceWhereInput[]
    OR?: SkuPriceWhereInput[]
    NOT?: SkuPriceWhereInput | SkuPriceWhereInput[]
    skuId?: StringFilter<"SkuPrice"> | string
    priceListId?: StringFilter<"SkuPrice"> | string
    price?: DecimalFilter<"SkuPrice"> | Decimal | DecimalJsLike | number | string
    validFrom?: DateTimeFilter<"SkuPrice"> | Date | string
    validTo?: DateTimeNullableFilter<"SkuPrice"> | Date | string | null
    createdAt?: DateTimeFilter<"SkuPrice"> | Date | string
    updatedAt?: DateTimeFilter<"SkuPrice"> | Date | string
    sku?: XOR<SkuScalarRelationFilter, SkuWhereInput>
    priceList?: XOR<PriceListScalarRelationFilter, PriceListWhereInput>
  }, "id">

  export type SkuPriceOrderByWithAggregationInput = {
    id?: SortOrder
    skuId?: SortOrder
    priceListId?: SortOrder
    price?: SortOrder
    validFrom?: SortOrder
    validTo?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SkuPriceCountOrderByAggregateInput
    _avg?: SkuPriceAvgOrderByAggregateInput
    _max?: SkuPriceMaxOrderByAggregateInput
    _min?: SkuPriceMinOrderByAggregateInput
    _sum?: SkuPriceSumOrderByAggregateInput
  }

  export type SkuPriceScalarWhereWithAggregatesInput = {
    AND?: SkuPriceScalarWhereWithAggregatesInput | SkuPriceScalarWhereWithAggregatesInput[]
    OR?: SkuPriceScalarWhereWithAggregatesInput[]
    NOT?: SkuPriceScalarWhereWithAggregatesInput | SkuPriceScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SkuPrice"> | string
    skuId?: StringWithAggregatesFilter<"SkuPrice"> | string
    priceListId?: StringWithAggregatesFilter<"SkuPrice"> | string
    price?: DecimalWithAggregatesFilter<"SkuPrice"> | Decimal | DecimalJsLike | number | string
    validFrom?: DateTimeWithAggregatesFilter<"SkuPrice"> | Date | string
    validTo?: DateTimeNullableWithAggregatesFilter<"SkuPrice"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"SkuPrice"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"SkuPrice"> | Date | string
  }

  export type SkuStockWhereInput = {
    AND?: SkuStockWhereInput | SkuStockWhereInput[]
    OR?: SkuStockWhereInput[]
    NOT?: SkuStockWhereInput | SkuStockWhereInput[]
    id?: StringFilter<"SkuStock"> | string
    skuId?: StringFilter<"SkuStock"> | string
    warehouseId?: StringFilter<"SkuStock"> | string
    quantity?: IntFilter<"SkuStock"> | number
    reserved?: IntFilter<"SkuStock"> | number
    available?: IntFilter<"SkuStock"> | number
    updatedAt?: DateTimeFilter<"SkuStock"> | Date | string
    sku?: XOR<SkuScalarRelationFilter, SkuWhereInput>
    warehouse?: XOR<WarehouseScalarRelationFilter, WarehouseWhereInput>
  }

  export type SkuStockOrderByWithRelationInput = {
    id?: SortOrder
    skuId?: SortOrder
    warehouseId?: SortOrder
    quantity?: SortOrder
    reserved?: SortOrder
    available?: SortOrder
    updatedAt?: SortOrder
    sku?: SkuOrderByWithRelationInput
    warehouse?: WarehouseOrderByWithRelationInput
  }

  export type SkuStockWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    skuId_warehouseId?: SkuStockSkuIdWarehouseIdCompoundUniqueInput
    AND?: SkuStockWhereInput | SkuStockWhereInput[]
    OR?: SkuStockWhereInput[]
    NOT?: SkuStockWhereInput | SkuStockWhereInput[]
    skuId?: StringFilter<"SkuStock"> | string
    warehouseId?: StringFilter<"SkuStock"> | string
    quantity?: IntFilter<"SkuStock"> | number
    reserved?: IntFilter<"SkuStock"> | number
    available?: IntFilter<"SkuStock"> | number
    updatedAt?: DateTimeFilter<"SkuStock"> | Date | string
    sku?: XOR<SkuScalarRelationFilter, SkuWhereInput>
    warehouse?: XOR<WarehouseScalarRelationFilter, WarehouseWhereInput>
  }, "id" | "skuId_warehouseId">

  export type SkuStockOrderByWithAggregationInput = {
    id?: SortOrder
    skuId?: SortOrder
    warehouseId?: SortOrder
    quantity?: SortOrder
    reserved?: SortOrder
    available?: SortOrder
    updatedAt?: SortOrder
    _count?: SkuStockCountOrderByAggregateInput
    _avg?: SkuStockAvgOrderByAggregateInput
    _max?: SkuStockMaxOrderByAggregateInput
    _min?: SkuStockMinOrderByAggregateInput
    _sum?: SkuStockSumOrderByAggregateInput
  }

  export type SkuStockScalarWhereWithAggregatesInput = {
    AND?: SkuStockScalarWhereWithAggregatesInput | SkuStockScalarWhereWithAggregatesInput[]
    OR?: SkuStockScalarWhereWithAggregatesInput[]
    NOT?: SkuStockScalarWhereWithAggregatesInput | SkuStockScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SkuStock"> | string
    skuId?: StringWithAggregatesFilter<"SkuStock"> | string
    warehouseId?: StringWithAggregatesFilter<"SkuStock"> | string
    quantity?: IntWithAggregatesFilter<"SkuStock"> | number
    reserved?: IntWithAggregatesFilter<"SkuStock"> | number
    available?: IntWithAggregatesFilter<"SkuStock"> | number
    updatedAt?: DateTimeWithAggregatesFilter<"SkuStock"> | Date | string
  }

  export type WarehouseWhereInput = {
    AND?: WarehouseWhereInput | WarehouseWhereInput[]
    OR?: WarehouseWhereInput[]
    NOT?: WarehouseWhereInput | WarehouseWhereInput[]
    id?: StringFilter<"Warehouse"> | string
    name?: StringFilter<"Warehouse"> | string
    code?: StringFilter<"Warehouse"> | string
    status?: StringFilter<"Warehouse"> | string
    createdAt?: DateTimeFilter<"Warehouse"> | Date | string
    updatedAt?: DateTimeFilter<"Warehouse"> | Date | string
    stocks?: SkuStockListRelationFilter
  }

  export type WarehouseOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    stocks?: SkuStockOrderByRelationAggregateInput
  }

  export type WarehouseWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    code?: string
    AND?: WarehouseWhereInput | WarehouseWhereInput[]
    OR?: WarehouseWhereInput[]
    NOT?: WarehouseWhereInput | WarehouseWhereInput[]
    name?: StringFilter<"Warehouse"> | string
    status?: StringFilter<"Warehouse"> | string
    createdAt?: DateTimeFilter<"Warehouse"> | Date | string
    updatedAt?: DateTimeFilter<"Warehouse"> | Date | string
    stocks?: SkuStockListRelationFilter
  }, "id" | "code">

  export type WarehouseOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: WarehouseCountOrderByAggregateInput
    _max?: WarehouseMaxOrderByAggregateInput
    _min?: WarehouseMinOrderByAggregateInput
  }

  export type WarehouseScalarWhereWithAggregatesInput = {
    AND?: WarehouseScalarWhereWithAggregatesInput | WarehouseScalarWhereWithAggregatesInput[]
    OR?: WarehouseScalarWhereWithAggregatesInput[]
    NOT?: WarehouseScalarWhereWithAggregatesInput | WarehouseScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Warehouse"> | string
    name?: StringWithAggregatesFilter<"Warehouse"> | string
    code?: StringWithAggregatesFilter<"Warehouse"> | string
    status?: StringWithAggregatesFilter<"Warehouse"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Warehouse"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Warehouse"> | Date | string
  }

  export type PriceListWhereInput = {
    AND?: PriceListWhereInput | PriceListWhereInput[]
    OR?: PriceListWhereInput[]
    NOT?: PriceListWhereInput | PriceListWhereInput[]
    id?: StringFilter<"PriceList"> | string
    name?: StringFilter<"PriceList"> | string
    code?: StringFilter<"PriceList"> | string
    status?: StringFilter<"PriceList"> | string
    createdAt?: DateTimeFilter<"PriceList"> | Date | string
    updatedAt?: DateTimeFilter<"PriceList"> | Date | string
    prices?: SkuPriceListRelationFilter
  }

  export type PriceListOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    prices?: SkuPriceOrderByRelationAggregateInput
  }

  export type PriceListWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    code?: string
    AND?: PriceListWhereInput | PriceListWhereInput[]
    OR?: PriceListWhereInput[]
    NOT?: PriceListWhereInput | PriceListWhereInput[]
    name?: StringFilter<"PriceList"> | string
    status?: StringFilter<"PriceList"> | string
    createdAt?: DateTimeFilter<"PriceList"> | Date | string
    updatedAt?: DateTimeFilter<"PriceList"> | Date | string
    prices?: SkuPriceListRelationFilter
  }, "id" | "code">

  export type PriceListOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PriceListCountOrderByAggregateInput
    _max?: PriceListMaxOrderByAggregateInput
    _min?: PriceListMinOrderByAggregateInput
  }

  export type PriceListScalarWhereWithAggregatesInput = {
    AND?: PriceListScalarWhereWithAggregatesInput | PriceListScalarWhereWithAggregatesInput[]
    OR?: PriceListScalarWhereWithAggregatesInput[]
    NOT?: PriceListScalarWhereWithAggregatesInput | PriceListScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PriceList"> | string
    name?: StringWithAggregatesFilter<"PriceList"> | string
    code?: StringWithAggregatesFilter<"PriceList"> | string
    status?: StringWithAggregatesFilter<"PriceList"> | string
    createdAt?: DateTimeWithAggregatesFilter<"PriceList"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"PriceList"> | Date | string
  }

  export type CategoryWhereInput = {
    AND?: CategoryWhereInput | CategoryWhereInput[]
    OR?: CategoryWhereInput[]
    NOT?: CategoryWhereInput | CategoryWhereInput[]
    id?: StringFilter<"Category"> | string
    name?: StringFilter<"Category"> | string
    parentId?: StringNullableFilter<"Category"> | string | null
    status?: StringFilter<"Category"> | string
    createdAt?: DateTimeFilter<"Category"> | Date | string
    updatedAt?: DateTimeFilter<"Category"> | Date | string
    parent?: XOR<CategoryNullableScalarRelationFilter, CategoryWhereInput> | null
    children?: CategoryListRelationFilter
    products?: ProductListRelationFilter
  }

  export type CategoryOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    parentId?: SortOrderInput | SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    parent?: CategoryOrderByWithRelationInput
    children?: CategoryOrderByRelationAggregateInput
    products?: ProductOrderByRelationAggregateInput
  }

  export type CategoryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CategoryWhereInput | CategoryWhereInput[]
    OR?: CategoryWhereInput[]
    NOT?: CategoryWhereInput | CategoryWhereInput[]
    name?: StringFilter<"Category"> | string
    parentId?: StringNullableFilter<"Category"> | string | null
    status?: StringFilter<"Category"> | string
    createdAt?: DateTimeFilter<"Category"> | Date | string
    updatedAt?: DateTimeFilter<"Category"> | Date | string
    parent?: XOR<CategoryNullableScalarRelationFilter, CategoryWhereInput> | null
    children?: CategoryListRelationFilter
    products?: ProductListRelationFilter
  }, "id">

  export type CategoryOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    parentId?: SortOrderInput | SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CategoryCountOrderByAggregateInput
    _max?: CategoryMaxOrderByAggregateInput
    _min?: CategoryMinOrderByAggregateInput
  }

  export type CategoryScalarWhereWithAggregatesInput = {
    AND?: CategoryScalarWhereWithAggregatesInput | CategoryScalarWhereWithAggregatesInput[]
    OR?: CategoryScalarWhereWithAggregatesInput[]
    NOT?: CategoryScalarWhereWithAggregatesInput | CategoryScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Category"> | string
    name?: StringWithAggregatesFilter<"Category"> | string
    parentId?: StringNullableWithAggregatesFilter<"Category"> | string | null
    status?: StringWithAggregatesFilter<"Category"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Category"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Category"> | Date | string
  }

  export type SyncJobWhereInput = {
    AND?: SyncJobWhereInput | SyncJobWhereInput[]
    OR?: SyncJobWhereInput[]
    NOT?: SyncJobWhereInput | SyncJobWhereInput[]
    id?: StringFilter<"SyncJob"> | string
    source?: StringFilter<"SyncJob"> | string
    status?: StringFilter<"SyncJob"> | string
    startedAt?: DateTimeFilter<"SyncJob"> | Date | string
    completedAt?: DateTimeNullableFilter<"SyncJob"> | Date | string | null
    errorLog?: StringNullableFilter<"SyncJob"> | string | null
    createdAt?: DateTimeFilter<"SyncJob"> | Date | string
    products?: ProductListRelationFilter
  }

  export type SyncJobOrderByWithRelationInput = {
    id?: SortOrder
    source?: SortOrder
    status?: SortOrder
    startedAt?: SortOrder
    completedAt?: SortOrderInput | SortOrder
    errorLog?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    products?: ProductOrderByRelationAggregateInput
  }

  export type SyncJobWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SyncJobWhereInput | SyncJobWhereInput[]
    OR?: SyncJobWhereInput[]
    NOT?: SyncJobWhereInput | SyncJobWhereInput[]
    source?: StringFilter<"SyncJob"> | string
    status?: StringFilter<"SyncJob"> | string
    startedAt?: DateTimeFilter<"SyncJob"> | Date | string
    completedAt?: DateTimeNullableFilter<"SyncJob"> | Date | string | null
    errorLog?: StringNullableFilter<"SyncJob"> | string | null
    createdAt?: DateTimeFilter<"SyncJob"> | Date | string
    products?: ProductListRelationFilter
  }, "id">

  export type SyncJobOrderByWithAggregationInput = {
    id?: SortOrder
    source?: SortOrder
    status?: SortOrder
    startedAt?: SortOrder
    completedAt?: SortOrderInput | SortOrder
    errorLog?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: SyncJobCountOrderByAggregateInput
    _max?: SyncJobMaxOrderByAggregateInput
    _min?: SyncJobMinOrderByAggregateInput
  }

  export type SyncJobScalarWhereWithAggregatesInput = {
    AND?: SyncJobScalarWhereWithAggregatesInput | SyncJobScalarWhereWithAggregatesInput[]
    OR?: SyncJobScalarWhereWithAggregatesInput[]
    NOT?: SyncJobScalarWhereWithAggregatesInput | SyncJobScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SyncJob"> | string
    source?: StringWithAggregatesFilter<"SyncJob"> | string
    status?: StringWithAggregatesFilter<"SyncJob"> | string
    startedAt?: DateTimeWithAggregatesFilter<"SyncJob"> | Date | string
    completedAt?: DateTimeNullableWithAggregatesFilter<"SyncJob"> | Date | string | null
    errorLog?: StringNullableWithAggregatesFilter<"SyncJob"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"SyncJob"> | Date | string
  }

  export type ProductCreateInput = {
    id?: string
    name: string
    description?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    skus?: SkuCreateNestedManyWithoutProductInput
    category?: CategoryCreateNestedOneWithoutProductsInput
    syncJob?: SyncJobCreateNestedOneWithoutProductsInput
  }

  export type ProductUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    categoryId?: string | null
    syncJobId?: string | null
    skus?: SkuUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    skus?: SkuUpdateManyWithoutProductNestedInput
    category?: CategoryUpdateOneWithoutProductsNestedInput
    syncJob?: SyncJobUpdateOneWithoutProductsNestedInput
  }

  export type ProductUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    categoryId?: NullableStringFieldUpdateOperationsInput | string | null
    syncJobId?: NullableStringFieldUpdateOperationsInput | string | null
    skus?: SkuUncheckedUpdateManyWithoutProductNestedInput
  }

  export type ProductCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    categoryId?: string | null
    syncJobId?: string | null
  }

  export type ProductUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    categoryId?: NullableStringFieldUpdateOperationsInput | string | null
    syncJobId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SkuCreateInput = {
    id?: string
    code: string
    barcode?: string | null
    name: string
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    product: ProductCreateNestedOneWithoutSkusInput
    images?: SkuImageCreateNestedManyWithoutSkuInput
    prices?: SkuPriceCreateNestedManyWithoutSkuInput
    stocks?: SkuStockCreateNestedManyWithoutSkuInput
  }

  export type SkuUncheckedCreateInput = {
    id?: string
    productId: string
    code: string
    barcode?: string | null
    name: string
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    images?: SkuImageUncheckedCreateNestedManyWithoutSkuInput
    prices?: SkuPriceUncheckedCreateNestedManyWithoutSkuInput
    stocks?: SkuStockUncheckedCreateNestedManyWithoutSkuInput
  }

  export type SkuUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    barcode?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    product?: ProductUpdateOneRequiredWithoutSkusNestedInput
    images?: SkuImageUpdateManyWithoutSkuNestedInput
    prices?: SkuPriceUpdateManyWithoutSkuNestedInput
    stocks?: SkuStockUpdateManyWithoutSkuNestedInput
  }

  export type SkuUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    barcode?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    images?: SkuImageUncheckedUpdateManyWithoutSkuNestedInput
    prices?: SkuPriceUncheckedUpdateManyWithoutSkuNestedInput
    stocks?: SkuStockUncheckedUpdateManyWithoutSkuNestedInput
  }

  export type SkuCreateManyInput = {
    id?: string
    productId: string
    code: string
    barcode?: string | null
    name: string
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SkuUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    barcode?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SkuUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    barcode?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SkuImageCreateInput = {
    id?: string
    url: string
    altText?: string | null
    order?: number
    createdAt?: Date | string
    sku: SkuCreateNestedOneWithoutImagesInput
  }

  export type SkuImageUncheckedCreateInput = {
    id?: string
    skuId: string
    url: string
    altText?: string | null
    order?: number
    createdAt?: Date | string
  }

  export type SkuImageUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    altText?: NullableStringFieldUpdateOperationsInput | string | null
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sku?: SkuUpdateOneRequiredWithoutImagesNestedInput
  }

  export type SkuImageUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    skuId?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    altText?: NullableStringFieldUpdateOperationsInput | string | null
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SkuImageCreateManyInput = {
    id?: string
    skuId: string
    url: string
    altText?: string | null
    order?: number
    createdAt?: Date | string
  }

  export type SkuImageUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    altText?: NullableStringFieldUpdateOperationsInput | string | null
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SkuImageUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    skuId?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    altText?: NullableStringFieldUpdateOperationsInput | string | null
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SkuPriceCreateInput = {
    id?: string
    price: Decimal | DecimalJsLike | number | string
    validFrom?: Date | string
    validTo?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sku: SkuCreateNestedOneWithoutPricesInput
    priceList: PriceListCreateNestedOneWithoutPricesInput
  }

  export type SkuPriceUncheckedCreateInput = {
    id?: string
    skuId: string
    priceListId: string
    price: Decimal | DecimalJsLike | number | string
    validFrom?: Date | string
    validTo?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SkuPriceUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    validFrom?: DateTimeFieldUpdateOperationsInput | Date | string
    validTo?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sku?: SkuUpdateOneRequiredWithoutPricesNestedInput
    priceList?: PriceListUpdateOneRequiredWithoutPricesNestedInput
  }

  export type SkuPriceUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    skuId?: StringFieldUpdateOperationsInput | string
    priceListId?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    validFrom?: DateTimeFieldUpdateOperationsInput | Date | string
    validTo?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SkuPriceCreateManyInput = {
    id?: string
    skuId: string
    priceListId: string
    price: Decimal | DecimalJsLike | number | string
    validFrom?: Date | string
    validTo?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SkuPriceUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    validFrom?: DateTimeFieldUpdateOperationsInput | Date | string
    validTo?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SkuPriceUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    skuId?: StringFieldUpdateOperationsInput | string
    priceListId?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    validFrom?: DateTimeFieldUpdateOperationsInput | Date | string
    validTo?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SkuStockCreateInput = {
    id?: string
    quantity?: number
    reserved?: number
    available?: number
    updatedAt?: Date | string
    sku: SkuCreateNestedOneWithoutStocksInput
    warehouse: WarehouseCreateNestedOneWithoutStocksInput
  }

  export type SkuStockUncheckedCreateInput = {
    id?: string
    skuId: string
    warehouseId: string
    quantity?: number
    reserved?: number
    available?: number
    updatedAt?: Date | string
  }

  export type SkuStockUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    reserved?: IntFieldUpdateOperationsInput | number
    available?: IntFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sku?: SkuUpdateOneRequiredWithoutStocksNestedInput
    warehouse?: WarehouseUpdateOneRequiredWithoutStocksNestedInput
  }

  export type SkuStockUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    skuId?: StringFieldUpdateOperationsInput | string
    warehouseId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    reserved?: IntFieldUpdateOperationsInput | number
    available?: IntFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SkuStockCreateManyInput = {
    id?: string
    skuId: string
    warehouseId: string
    quantity?: number
    reserved?: number
    available?: number
    updatedAt?: Date | string
  }

  export type SkuStockUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    reserved?: IntFieldUpdateOperationsInput | number
    available?: IntFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SkuStockUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    skuId?: StringFieldUpdateOperationsInput | string
    warehouseId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    reserved?: IntFieldUpdateOperationsInput | number
    available?: IntFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WarehouseCreateInput = {
    id?: string
    name: string
    code: string
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    stocks?: SkuStockCreateNestedManyWithoutWarehouseInput
  }

  export type WarehouseUncheckedCreateInput = {
    id?: string
    name: string
    code: string
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    stocks?: SkuStockUncheckedCreateNestedManyWithoutWarehouseInput
  }

  export type WarehouseUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    stocks?: SkuStockUpdateManyWithoutWarehouseNestedInput
  }

  export type WarehouseUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    stocks?: SkuStockUncheckedUpdateManyWithoutWarehouseNestedInput
  }

  export type WarehouseCreateManyInput = {
    id?: string
    name: string
    code: string
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WarehouseUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WarehouseUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PriceListCreateInput = {
    id?: string
    name: string
    code: string
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    prices?: SkuPriceCreateNestedManyWithoutPriceListInput
  }

  export type PriceListUncheckedCreateInput = {
    id?: string
    name: string
    code: string
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    prices?: SkuPriceUncheckedCreateNestedManyWithoutPriceListInput
  }

  export type PriceListUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    prices?: SkuPriceUpdateManyWithoutPriceListNestedInput
  }

  export type PriceListUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    prices?: SkuPriceUncheckedUpdateManyWithoutPriceListNestedInput
  }

  export type PriceListCreateManyInput = {
    id?: string
    name: string
    code: string
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PriceListUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PriceListUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CategoryCreateInput = {
    id?: string
    name: string
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    parent?: CategoryCreateNestedOneWithoutChildrenInput
    children?: CategoryCreateNestedManyWithoutParentInput
    products?: ProductCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUncheckedCreateInput = {
    id?: string
    name: string
    parentId?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    children?: CategoryUncheckedCreateNestedManyWithoutParentInput
    products?: ProductUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parent?: CategoryUpdateOneWithoutChildrenNestedInput
    children?: CategoryUpdateManyWithoutParentNestedInput
    products?: ProductUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    children?: CategoryUncheckedUpdateManyWithoutParentNestedInput
    products?: ProductUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryCreateManyInput = {
    id?: string
    name: string
    parentId?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CategoryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CategoryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SyncJobCreateInput = {
    id?: string
    source: string
    status?: string
    startedAt?: Date | string
    completedAt?: Date | string | null
    errorLog?: string | null
    createdAt?: Date | string
    products?: ProductCreateNestedManyWithoutSyncJobInput
  }

  export type SyncJobUncheckedCreateInput = {
    id?: string
    source: string
    status?: string
    startedAt?: Date | string
    completedAt?: Date | string | null
    errorLog?: string | null
    createdAt?: Date | string
    products?: ProductUncheckedCreateNestedManyWithoutSyncJobInput
  }

  export type SyncJobUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    source?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    errorLog?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    products?: ProductUpdateManyWithoutSyncJobNestedInput
  }

  export type SyncJobUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    source?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    errorLog?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    products?: ProductUncheckedUpdateManyWithoutSyncJobNestedInput
  }

  export type SyncJobCreateManyInput = {
    id?: string
    source: string
    status?: string
    startedAt?: Date | string
    completedAt?: Date | string | null
    errorLog?: string | null
    createdAt?: Date | string
  }

  export type SyncJobUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    source?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    errorLog?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SyncJobUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    source?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    errorLog?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type SkuListRelationFilter = {
    every?: SkuWhereInput
    some?: SkuWhereInput
    none?: SkuWhereInput
  }

  export type CategoryNullableScalarRelationFilter = {
    is?: CategoryWhereInput | null
    isNot?: CategoryWhereInput | null
  }

  export type SyncJobNullableScalarRelationFilter = {
    is?: SyncJobWhereInput | null
    isNot?: SyncJobWhereInput | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type SkuOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProductCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    categoryId?: SortOrder
    syncJobId?: SortOrder
  }

  export type ProductMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    categoryId?: SortOrder
    syncJobId?: SortOrder
  }

  export type ProductMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    categoryId?: SortOrder
    syncJobId?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type ProductScalarRelationFilter = {
    is?: ProductWhereInput
    isNot?: ProductWhereInput
  }

  export type SkuImageListRelationFilter = {
    every?: SkuImageWhereInput
    some?: SkuImageWhereInput
    none?: SkuImageWhereInput
  }

  export type SkuPriceListRelationFilter = {
    every?: SkuPriceWhereInput
    some?: SkuPriceWhereInput
    none?: SkuPriceWhereInput
  }

  export type SkuStockListRelationFilter = {
    every?: SkuStockWhereInput
    some?: SkuStockWhereInput
    none?: SkuStockWhereInput
  }

  export type SkuImageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SkuPriceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SkuStockOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SkuCountOrderByAggregateInput = {
    id?: SortOrder
    productId?: SortOrder
    code?: SortOrder
    barcode?: SortOrder
    name?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SkuMaxOrderByAggregateInput = {
    id?: SortOrder
    productId?: SortOrder
    code?: SortOrder
    barcode?: SortOrder
    name?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SkuMinOrderByAggregateInput = {
    id?: SortOrder
    productId?: SortOrder
    code?: SortOrder
    barcode?: SortOrder
    name?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type SkuScalarRelationFilter = {
    is?: SkuWhereInput
    isNot?: SkuWhereInput
  }

  export type SkuImageCountOrderByAggregateInput = {
    id?: SortOrder
    skuId?: SortOrder
    url?: SortOrder
    altText?: SortOrder
    order?: SortOrder
    createdAt?: SortOrder
  }

  export type SkuImageAvgOrderByAggregateInput = {
    order?: SortOrder
  }

  export type SkuImageMaxOrderByAggregateInput = {
    id?: SortOrder
    skuId?: SortOrder
    url?: SortOrder
    altText?: SortOrder
    order?: SortOrder
    createdAt?: SortOrder
  }

  export type SkuImageMinOrderByAggregateInput = {
    id?: SortOrder
    skuId?: SortOrder
    url?: SortOrder
    altText?: SortOrder
    order?: SortOrder
    createdAt?: SortOrder
  }

  export type SkuImageSumOrderByAggregateInput = {
    order?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type DecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type PriceListScalarRelationFilter = {
    is?: PriceListWhereInput
    isNot?: PriceListWhereInput
  }

  export type SkuPriceCountOrderByAggregateInput = {
    id?: SortOrder
    skuId?: SortOrder
    priceListId?: SortOrder
    price?: SortOrder
    validFrom?: SortOrder
    validTo?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SkuPriceAvgOrderByAggregateInput = {
    price?: SortOrder
  }

  export type SkuPriceMaxOrderByAggregateInput = {
    id?: SortOrder
    skuId?: SortOrder
    priceListId?: SortOrder
    price?: SortOrder
    validFrom?: SortOrder
    validTo?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SkuPriceMinOrderByAggregateInput = {
    id?: SortOrder
    skuId?: SortOrder
    priceListId?: SortOrder
    price?: SortOrder
    validFrom?: SortOrder
    validTo?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SkuPriceSumOrderByAggregateInput = {
    price?: SortOrder
  }

  export type DecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type WarehouseScalarRelationFilter = {
    is?: WarehouseWhereInput
    isNot?: WarehouseWhereInput
  }

  export type SkuStockSkuIdWarehouseIdCompoundUniqueInput = {
    skuId: string
    warehouseId: string
  }

  export type SkuStockCountOrderByAggregateInput = {
    id?: SortOrder
    skuId?: SortOrder
    warehouseId?: SortOrder
    quantity?: SortOrder
    reserved?: SortOrder
    available?: SortOrder
    updatedAt?: SortOrder
  }

  export type SkuStockAvgOrderByAggregateInput = {
    quantity?: SortOrder
    reserved?: SortOrder
    available?: SortOrder
  }

  export type SkuStockMaxOrderByAggregateInput = {
    id?: SortOrder
    skuId?: SortOrder
    warehouseId?: SortOrder
    quantity?: SortOrder
    reserved?: SortOrder
    available?: SortOrder
    updatedAt?: SortOrder
  }

  export type SkuStockMinOrderByAggregateInput = {
    id?: SortOrder
    skuId?: SortOrder
    warehouseId?: SortOrder
    quantity?: SortOrder
    reserved?: SortOrder
    available?: SortOrder
    updatedAt?: SortOrder
  }

  export type SkuStockSumOrderByAggregateInput = {
    quantity?: SortOrder
    reserved?: SortOrder
    available?: SortOrder
  }

  export type WarehouseCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WarehouseMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WarehouseMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PriceListCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PriceListMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PriceListMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CategoryListRelationFilter = {
    every?: CategoryWhereInput
    some?: CategoryWhereInput
    none?: CategoryWhereInput
  }

  export type ProductListRelationFilter = {
    every?: ProductWhereInput
    some?: ProductWhereInput
    none?: ProductWhereInput
  }

  export type CategoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProductOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CategoryCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    parentId?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CategoryMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    parentId?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CategoryMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    parentId?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SyncJobCountOrderByAggregateInput = {
    id?: SortOrder
    source?: SortOrder
    status?: SortOrder
    startedAt?: SortOrder
    completedAt?: SortOrder
    errorLog?: SortOrder
    createdAt?: SortOrder
  }

  export type SyncJobMaxOrderByAggregateInput = {
    id?: SortOrder
    source?: SortOrder
    status?: SortOrder
    startedAt?: SortOrder
    completedAt?: SortOrder
    errorLog?: SortOrder
    createdAt?: SortOrder
  }

  export type SyncJobMinOrderByAggregateInput = {
    id?: SortOrder
    source?: SortOrder
    status?: SortOrder
    startedAt?: SortOrder
    completedAt?: SortOrder
    errorLog?: SortOrder
    createdAt?: SortOrder
  }

  export type SkuCreateNestedManyWithoutProductInput = {
    create?: XOR<SkuCreateWithoutProductInput, SkuUncheckedCreateWithoutProductInput> | SkuCreateWithoutProductInput[] | SkuUncheckedCreateWithoutProductInput[]
    connectOrCreate?: SkuCreateOrConnectWithoutProductInput | SkuCreateOrConnectWithoutProductInput[]
    createMany?: SkuCreateManyProductInputEnvelope
    connect?: SkuWhereUniqueInput | SkuWhereUniqueInput[]
  }

  export type CategoryCreateNestedOneWithoutProductsInput = {
    create?: XOR<CategoryCreateWithoutProductsInput, CategoryUncheckedCreateWithoutProductsInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutProductsInput
    connect?: CategoryWhereUniqueInput
  }

  export type SyncJobCreateNestedOneWithoutProductsInput = {
    create?: XOR<SyncJobCreateWithoutProductsInput, SyncJobUncheckedCreateWithoutProductsInput>
    connectOrCreate?: SyncJobCreateOrConnectWithoutProductsInput
    connect?: SyncJobWhereUniqueInput
  }

  export type SkuUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<SkuCreateWithoutProductInput, SkuUncheckedCreateWithoutProductInput> | SkuCreateWithoutProductInput[] | SkuUncheckedCreateWithoutProductInput[]
    connectOrCreate?: SkuCreateOrConnectWithoutProductInput | SkuCreateOrConnectWithoutProductInput[]
    createMany?: SkuCreateManyProductInputEnvelope
    connect?: SkuWhereUniqueInput | SkuWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type SkuUpdateManyWithoutProductNestedInput = {
    create?: XOR<SkuCreateWithoutProductInput, SkuUncheckedCreateWithoutProductInput> | SkuCreateWithoutProductInput[] | SkuUncheckedCreateWithoutProductInput[]
    connectOrCreate?: SkuCreateOrConnectWithoutProductInput | SkuCreateOrConnectWithoutProductInput[]
    upsert?: SkuUpsertWithWhereUniqueWithoutProductInput | SkuUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: SkuCreateManyProductInputEnvelope
    set?: SkuWhereUniqueInput | SkuWhereUniqueInput[]
    disconnect?: SkuWhereUniqueInput | SkuWhereUniqueInput[]
    delete?: SkuWhereUniqueInput | SkuWhereUniqueInput[]
    connect?: SkuWhereUniqueInput | SkuWhereUniqueInput[]
    update?: SkuUpdateWithWhereUniqueWithoutProductInput | SkuUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: SkuUpdateManyWithWhereWithoutProductInput | SkuUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: SkuScalarWhereInput | SkuScalarWhereInput[]
  }

  export type CategoryUpdateOneWithoutProductsNestedInput = {
    create?: XOR<CategoryCreateWithoutProductsInput, CategoryUncheckedCreateWithoutProductsInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutProductsInput
    upsert?: CategoryUpsertWithoutProductsInput
    disconnect?: CategoryWhereInput | boolean
    delete?: CategoryWhereInput | boolean
    connect?: CategoryWhereUniqueInput
    update?: XOR<XOR<CategoryUpdateToOneWithWhereWithoutProductsInput, CategoryUpdateWithoutProductsInput>, CategoryUncheckedUpdateWithoutProductsInput>
  }

  export type SyncJobUpdateOneWithoutProductsNestedInput = {
    create?: XOR<SyncJobCreateWithoutProductsInput, SyncJobUncheckedCreateWithoutProductsInput>
    connectOrCreate?: SyncJobCreateOrConnectWithoutProductsInput
    upsert?: SyncJobUpsertWithoutProductsInput
    disconnect?: SyncJobWhereInput | boolean
    delete?: SyncJobWhereInput | boolean
    connect?: SyncJobWhereUniqueInput
    update?: XOR<XOR<SyncJobUpdateToOneWithWhereWithoutProductsInput, SyncJobUpdateWithoutProductsInput>, SyncJobUncheckedUpdateWithoutProductsInput>
  }

  export type SkuUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<SkuCreateWithoutProductInput, SkuUncheckedCreateWithoutProductInput> | SkuCreateWithoutProductInput[] | SkuUncheckedCreateWithoutProductInput[]
    connectOrCreate?: SkuCreateOrConnectWithoutProductInput | SkuCreateOrConnectWithoutProductInput[]
    upsert?: SkuUpsertWithWhereUniqueWithoutProductInput | SkuUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: SkuCreateManyProductInputEnvelope
    set?: SkuWhereUniqueInput | SkuWhereUniqueInput[]
    disconnect?: SkuWhereUniqueInput | SkuWhereUniqueInput[]
    delete?: SkuWhereUniqueInput | SkuWhereUniqueInput[]
    connect?: SkuWhereUniqueInput | SkuWhereUniqueInput[]
    update?: SkuUpdateWithWhereUniqueWithoutProductInput | SkuUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: SkuUpdateManyWithWhereWithoutProductInput | SkuUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: SkuScalarWhereInput | SkuScalarWhereInput[]
  }

  export type ProductCreateNestedOneWithoutSkusInput = {
    create?: XOR<ProductCreateWithoutSkusInput, ProductUncheckedCreateWithoutSkusInput>
    connectOrCreate?: ProductCreateOrConnectWithoutSkusInput
    connect?: ProductWhereUniqueInput
  }

  export type SkuImageCreateNestedManyWithoutSkuInput = {
    create?: XOR<SkuImageCreateWithoutSkuInput, SkuImageUncheckedCreateWithoutSkuInput> | SkuImageCreateWithoutSkuInput[] | SkuImageUncheckedCreateWithoutSkuInput[]
    connectOrCreate?: SkuImageCreateOrConnectWithoutSkuInput | SkuImageCreateOrConnectWithoutSkuInput[]
    createMany?: SkuImageCreateManySkuInputEnvelope
    connect?: SkuImageWhereUniqueInput | SkuImageWhereUniqueInput[]
  }

  export type SkuPriceCreateNestedManyWithoutSkuInput = {
    create?: XOR<SkuPriceCreateWithoutSkuInput, SkuPriceUncheckedCreateWithoutSkuInput> | SkuPriceCreateWithoutSkuInput[] | SkuPriceUncheckedCreateWithoutSkuInput[]
    connectOrCreate?: SkuPriceCreateOrConnectWithoutSkuInput | SkuPriceCreateOrConnectWithoutSkuInput[]
    createMany?: SkuPriceCreateManySkuInputEnvelope
    connect?: SkuPriceWhereUniqueInput | SkuPriceWhereUniqueInput[]
  }

  export type SkuStockCreateNestedManyWithoutSkuInput = {
    create?: XOR<SkuStockCreateWithoutSkuInput, SkuStockUncheckedCreateWithoutSkuInput> | SkuStockCreateWithoutSkuInput[] | SkuStockUncheckedCreateWithoutSkuInput[]
    connectOrCreate?: SkuStockCreateOrConnectWithoutSkuInput | SkuStockCreateOrConnectWithoutSkuInput[]
    createMany?: SkuStockCreateManySkuInputEnvelope
    connect?: SkuStockWhereUniqueInput | SkuStockWhereUniqueInput[]
  }

  export type SkuImageUncheckedCreateNestedManyWithoutSkuInput = {
    create?: XOR<SkuImageCreateWithoutSkuInput, SkuImageUncheckedCreateWithoutSkuInput> | SkuImageCreateWithoutSkuInput[] | SkuImageUncheckedCreateWithoutSkuInput[]
    connectOrCreate?: SkuImageCreateOrConnectWithoutSkuInput | SkuImageCreateOrConnectWithoutSkuInput[]
    createMany?: SkuImageCreateManySkuInputEnvelope
    connect?: SkuImageWhereUniqueInput | SkuImageWhereUniqueInput[]
  }

  export type SkuPriceUncheckedCreateNestedManyWithoutSkuInput = {
    create?: XOR<SkuPriceCreateWithoutSkuInput, SkuPriceUncheckedCreateWithoutSkuInput> | SkuPriceCreateWithoutSkuInput[] | SkuPriceUncheckedCreateWithoutSkuInput[]
    connectOrCreate?: SkuPriceCreateOrConnectWithoutSkuInput | SkuPriceCreateOrConnectWithoutSkuInput[]
    createMany?: SkuPriceCreateManySkuInputEnvelope
    connect?: SkuPriceWhereUniqueInput | SkuPriceWhereUniqueInput[]
  }

  export type SkuStockUncheckedCreateNestedManyWithoutSkuInput = {
    create?: XOR<SkuStockCreateWithoutSkuInput, SkuStockUncheckedCreateWithoutSkuInput> | SkuStockCreateWithoutSkuInput[] | SkuStockUncheckedCreateWithoutSkuInput[]
    connectOrCreate?: SkuStockCreateOrConnectWithoutSkuInput | SkuStockCreateOrConnectWithoutSkuInput[]
    createMany?: SkuStockCreateManySkuInputEnvelope
    connect?: SkuStockWhereUniqueInput | SkuStockWhereUniqueInput[]
  }

  export type ProductUpdateOneRequiredWithoutSkusNestedInput = {
    create?: XOR<ProductCreateWithoutSkusInput, ProductUncheckedCreateWithoutSkusInput>
    connectOrCreate?: ProductCreateOrConnectWithoutSkusInput
    upsert?: ProductUpsertWithoutSkusInput
    connect?: ProductWhereUniqueInput
    update?: XOR<XOR<ProductUpdateToOneWithWhereWithoutSkusInput, ProductUpdateWithoutSkusInput>, ProductUncheckedUpdateWithoutSkusInput>
  }

  export type SkuImageUpdateManyWithoutSkuNestedInput = {
    create?: XOR<SkuImageCreateWithoutSkuInput, SkuImageUncheckedCreateWithoutSkuInput> | SkuImageCreateWithoutSkuInput[] | SkuImageUncheckedCreateWithoutSkuInput[]
    connectOrCreate?: SkuImageCreateOrConnectWithoutSkuInput | SkuImageCreateOrConnectWithoutSkuInput[]
    upsert?: SkuImageUpsertWithWhereUniqueWithoutSkuInput | SkuImageUpsertWithWhereUniqueWithoutSkuInput[]
    createMany?: SkuImageCreateManySkuInputEnvelope
    set?: SkuImageWhereUniqueInput | SkuImageWhereUniqueInput[]
    disconnect?: SkuImageWhereUniqueInput | SkuImageWhereUniqueInput[]
    delete?: SkuImageWhereUniqueInput | SkuImageWhereUniqueInput[]
    connect?: SkuImageWhereUniqueInput | SkuImageWhereUniqueInput[]
    update?: SkuImageUpdateWithWhereUniqueWithoutSkuInput | SkuImageUpdateWithWhereUniqueWithoutSkuInput[]
    updateMany?: SkuImageUpdateManyWithWhereWithoutSkuInput | SkuImageUpdateManyWithWhereWithoutSkuInput[]
    deleteMany?: SkuImageScalarWhereInput | SkuImageScalarWhereInput[]
  }

  export type SkuPriceUpdateManyWithoutSkuNestedInput = {
    create?: XOR<SkuPriceCreateWithoutSkuInput, SkuPriceUncheckedCreateWithoutSkuInput> | SkuPriceCreateWithoutSkuInput[] | SkuPriceUncheckedCreateWithoutSkuInput[]
    connectOrCreate?: SkuPriceCreateOrConnectWithoutSkuInput | SkuPriceCreateOrConnectWithoutSkuInput[]
    upsert?: SkuPriceUpsertWithWhereUniqueWithoutSkuInput | SkuPriceUpsertWithWhereUniqueWithoutSkuInput[]
    createMany?: SkuPriceCreateManySkuInputEnvelope
    set?: SkuPriceWhereUniqueInput | SkuPriceWhereUniqueInput[]
    disconnect?: SkuPriceWhereUniqueInput | SkuPriceWhereUniqueInput[]
    delete?: SkuPriceWhereUniqueInput | SkuPriceWhereUniqueInput[]
    connect?: SkuPriceWhereUniqueInput | SkuPriceWhereUniqueInput[]
    update?: SkuPriceUpdateWithWhereUniqueWithoutSkuInput | SkuPriceUpdateWithWhereUniqueWithoutSkuInput[]
    updateMany?: SkuPriceUpdateManyWithWhereWithoutSkuInput | SkuPriceUpdateManyWithWhereWithoutSkuInput[]
    deleteMany?: SkuPriceScalarWhereInput | SkuPriceScalarWhereInput[]
  }

  export type SkuStockUpdateManyWithoutSkuNestedInput = {
    create?: XOR<SkuStockCreateWithoutSkuInput, SkuStockUncheckedCreateWithoutSkuInput> | SkuStockCreateWithoutSkuInput[] | SkuStockUncheckedCreateWithoutSkuInput[]
    connectOrCreate?: SkuStockCreateOrConnectWithoutSkuInput | SkuStockCreateOrConnectWithoutSkuInput[]
    upsert?: SkuStockUpsertWithWhereUniqueWithoutSkuInput | SkuStockUpsertWithWhereUniqueWithoutSkuInput[]
    createMany?: SkuStockCreateManySkuInputEnvelope
    set?: SkuStockWhereUniqueInput | SkuStockWhereUniqueInput[]
    disconnect?: SkuStockWhereUniqueInput | SkuStockWhereUniqueInput[]
    delete?: SkuStockWhereUniqueInput | SkuStockWhereUniqueInput[]
    connect?: SkuStockWhereUniqueInput | SkuStockWhereUniqueInput[]
    update?: SkuStockUpdateWithWhereUniqueWithoutSkuInput | SkuStockUpdateWithWhereUniqueWithoutSkuInput[]
    updateMany?: SkuStockUpdateManyWithWhereWithoutSkuInput | SkuStockUpdateManyWithWhereWithoutSkuInput[]
    deleteMany?: SkuStockScalarWhereInput | SkuStockScalarWhereInput[]
  }

  export type SkuImageUncheckedUpdateManyWithoutSkuNestedInput = {
    create?: XOR<SkuImageCreateWithoutSkuInput, SkuImageUncheckedCreateWithoutSkuInput> | SkuImageCreateWithoutSkuInput[] | SkuImageUncheckedCreateWithoutSkuInput[]
    connectOrCreate?: SkuImageCreateOrConnectWithoutSkuInput | SkuImageCreateOrConnectWithoutSkuInput[]
    upsert?: SkuImageUpsertWithWhereUniqueWithoutSkuInput | SkuImageUpsertWithWhereUniqueWithoutSkuInput[]
    createMany?: SkuImageCreateManySkuInputEnvelope
    set?: SkuImageWhereUniqueInput | SkuImageWhereUniqueInput[]
    disconnect?: SkuImageWhereUniqueInput | SkuImageWhereUniqueInput[]
    delete?: SkuImageWhereUniqueInput | SkuImageWhereUniqueInput[]
    connect?: SkuImageWhereUniqueInput | SkuImageWhereUniqueInput[]
    update?: SkuImageUpdateWithWhereUniqueWithoutSkuInput | SkuImageUpdateWithWhereUniqueWithoutSkuInput[]
    updateMany?: SkuImageUpdateManyWithWhereWithoutSkuInput | SkuImageUpdateManyWithWhereWithoutSkuInput[]
    deleteMany?: SkuImageScalarWhereInput | SkuImageScalarWhereInput[]
  }

  export type SkuPriceUncheckedUpdateManyWithoutSkuNestedInput = {
    create?: XOR<SkuPriceCreateWithoutSkuInput, SkuPriceUncheckedCreateWithoutSkuInput> | SkuPriceCreateWithoutSkuInput[] | SkuPriceUncheckedCreateWithoutSkuInput[]
    connectOrCreate?: SkuPriceCreateOrConnectWithoutSkuInput | SkuPriceCreateOrConnectWithoutSkuInput[]
    upsert?: SkuPriceUpsertWithWhereUniqueWithoutSkuInput | SkuPriceUpsertWithWhereUniqueWithoutSkuInput[]
    createMany?: SkuPriceCreateManySkuInputEnvelope
    set?: SkuPriceWhereUniqueInput | SkuPriceWhereUniqueInput[]
    disconnect?: SkuPriceWhereUniqueInput | SkuPriceWhereUniqueInput[]
    delete?: SkuPriceWhereUniqueInput | SkuPriceWhereUniqueInput[]
    connect?: SkuPriceWhereUniqueInput | SkuPriceWhereUniqueInput[]
    update?: SkuPriceUpdateWithWhereUniqueWithoutSkuInput | SkuPriceUpdateWithWhereUniqueWithoutSkuInput[]
    updateMany?: SkuPriceUpdateManyWithWhereWithoutSkuInput | SkuPriceUpdateManyWithWhereWithoutSkuInput[]
    deleteMany?: SkuPriceScalarWhereInput | SkuPriceScalarWhereInput[]
  }

  export type SkuStockUncheckedUpdateManyWithoutSkuNestedInput = {
    create?: XOR<SkuStockCreateWithoutSkuInput, SkuStockUncheckedCreateWithoutSkuInput> | SkuStockCreateWithoutSkuInput[] | SkuStockUncheckedCreateWithoutSkuInput[]
    connectOrCreate?: SkuStockCreateOrConnectWithoutSkuInput | SkuStockCreateOrConnectWithoutSkuInput[]
    upsert?: SkuStockUpsertWithWhereUniqueWithoutSkuInput | SkuStockUpsertWithWhereUniqueWithoutSkuInput[]
    createMany?: SkuStockCreateManySkuInputEnvelope
    set?: SkuStockWhereUniqueInput | SkuStockWhereUniqueInput[]
    disconnect?: SkuStockWhereUniqueInput | SkuStockWhereUniqueInput[]
    delete?: SkuStockWhereUniqueInput | SkuStockWhereUniqueInput[]
    connect?: SkuStockWhereUniqueInput | SkuStockWhereUniqueInput[]
    update?: SkuStockUpdateWithWhereUniqueWithoutSkuInput | SkuStockUpdateWithWhereUniqueWithoutSkuInput[]
    updateMany?: SkuStockUpdateManyWithWhereWithoutSkuInput | SkuStockUpdateManyWithWhereWithoutSkuInput[]
    deleteMany?: SkuStockScalarWhereInput | SkuStockScalarWhereInput[]
  }

  export type SkuCreateNestedOneWithoutImagesInput = {
    create?: XOR<SkuCreateWithoutImagesInput, SkuUncheckedCreateWithoutImagesInput>
    connectOrCreate?: SkuCreateOrConnectWithoutImagesInput
    connect?: SkuWhereUniqueInput
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type SkuUpdateOneRequiredWithoutImagesNestedInput = {
    create?: XOR<SkuCreateWithoutImagesInput, SkuUncheckedCreateWithoutImagesInput>
    connectOrCreate?: SkuCreateOrConnectWithoutImagesInput
    upsert?: SkuUpsertWithoutImagesInput
    connect?: SkuWhereUniqueInput
    update?: XOR<XOR<SkuUpdateToOneWithWhereWithoutImagesInput, SkuUpdateWithoutImagesInput>, SkuUncheckedUpdateWithoutImagesInput>
  }

  export type SkuCreateNestedOneWithoutPricesInput = {
    create?: XOR<SkuCreateWithoutPricesInput, SkuUncheckedCreateWithoutPricesInput>
    connectOrCreate?: SkuCreateOrConnectWithoutPricesInput
    connect?: SkuWhereUniqueInput
  }

  export type PriceListCreateNestedOneWithoutPricesInput = {
    create?: XOR<PriceListCreateWithoutPricesInput, PriceListUncheckedCreateWithoutPricesInput>
    connectOrCreate?: PriceListCreateOrConnectWithoutPricesInput
    connect?: PriceListWhereUniqueInput
  }

  export type DecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type SkuUpdateOneRequiredWithoutPricesNestedInput = {
    create?: XOR<SkuCreateWithoutPricesInput, SkuUncheckedCreateWithoutPricesInput>
    connectOrCreate?: SkuCreateOrConnectWithoutPricesInput
    upsert?: SkuUpsertWithoutPricesInput
    connect?: SkuWhereUniqueInput
    update?: XOR<XOR<SkuUpdateToOneWithWhereWithoutPricesInput, SkuUpdateWithoutPricesInput>, SkuUncheckedUpdateWithoutPricesInput>
  }

  export type PriceListUpdateOneRequiredWithoutPricesNestedInput = {
    create?: XOR<PriceListCreateWithoutPricesInput, PriceListUncheckedCreateWithoutPricesInput>
    connectOrCreate?: PriceListCreateOrConnectWithoutPricesInput
    upsert?: PriceListUpsertWithoutPricesInput
    connect?: PriceListWhereUniqueInput
    update?: XOR<XOR<PriceListUpdateToOneWithWhereWithoutPricesInput, PriceListUpdateWithoutPricesInput>, PriceListUncheckedUpdateWithoutPricesInput>
  }

  export type SkuCreateNestedOneWithoutStocksInput = {
    create?: XOR<SkuCreateWithoutStocksInput, SkuUncheckedCreateWithoutStocksInput>
    connectOrCreate?: SkuCreateOrConnectWithoutStocksInput
    connect?: SkuWhereUniqueInput
  }

  export type WarehouseCreateNestedOneWithoutStocksInput = {
    create?: XOR<WarehouseCreateWithoutStocksInput, WarehouseUncheckedCreateWithoutStocksInput>
    connectOrCreate?: WarehouseCreateOrConnectWithoutStocksInput
    connect?: WarehouseWhereUniqueInput
  }

  export type SkuUpdateOneRequiredWithoutStocksNestedInput = {
    create?: XOR<SkuCreateWithoutStocksInput, SkuUncheckedCreateWithoutStocksInput>
    connectOrCreate?: SkuCreateOrConnectWithoutStocksInput
    upsert?: SkuUpsertWithoutStocksInput
    connect?: SkuWhereUniqueInput
    update?: XOR<XOR<SkuUpdateToOneWithWhereWithoutStocksInput, SkuUpdateWithoutStocksInput>, SkuUncheckedUpdateWithoutStocksInput>
  }

  export type WarehouseUpdateOneRequiredWithoutStocksNestedInput = {
    create?: XOR<WarehouseCreateWithoutStocksInput, WarehouseUncheckedCreateWithoutStocksInput>
    connectOrCreate?: WarehouseCreateOrConnectWithoutStocksInput
    upsert?: WarehouseUpsertWithoutStocksInput
    connect?: WarehouseWhereUniqueInput
    update?: XOR<XOR<WarehouseUpdateToOneWithWhereWithoutStocksInput, WarehouseUpdateWithoutStocksInput>, WarehouseUncheckedUpdateWithoutStocksInput>
  }

  export type SkuStockCreateNestedManyWithoutWarehouseInput = {
    create?: XOR<SkuStockCreateWithoutWarehouseInput, SkuStockUncheckedCreateWithoutWarehouseInput> | SkuStockCreateWithoutWarehouseInput[] | SkuStockUncheckedCreateWithoutWarehouseInput[]
    connectOrCreate?: SkuStockCreateOrConnectWithoutWarehouseInput | SkuStockCreateOrConnectWithoutWarehouseInput[]
    createMany?: SkuStockCreateManyWarehouseInputEnvelope
    connect?: SkuStockWhereUniqueInput | SkuStockWhereUniqueInput[]
  }

  export type SkuStockUncheckedCreateNestedManyWithoutWarehouseInput = {
    create?: XOR<SkuStockCreateWithoutWarehouseInput, SkuStockUncheckedCreateWithoutWarehouseInput> | SkuStockCreateWithoutWarehouseInput[] | SkuStockUncheckedCreateWithoutWarehouseInput[]
    connectOrCreate?: SkuStockCreateOrConnectWithoutWarehouseInput | SkuStockCreateOrConnectWithoutWarehouseInput[]
    createMany?: SkuStockCreateManyWarehouseInputEnvelope
    connect?: SkuStockWhereUniqueInput | SkuStockWhereUniqueInput[]
  }

  export type SkuStockUpdateManyWithoutWarehouseNestedInput = {
    create?: XOR<SkuStockCreateWithoutWarehouseInput, SkuStockUncheckedCreateWithoutWarehouseInput> | SkuStockCreateWithoutWarehouseInput[] | SkuStockUncheckedCreateWithoutWarehouseInput[]
    connectOrCreate?: SkuStockCreateOrConnectWithoutWarehouseInput | SkuStockCreateOrConnectWithoutWarehouseInput[]
    upsert?: SkuStockUpsertWithWhereUniqueWithoutWarehouseInput | SkuStockUpsertWithWhereUniqueWithoutWarehouseInput[]
    createMany?: SkuStockCreateManyWarehouseInputEnvelope
    set?: SkuStockWhereUniqueInput | SkuStockWhereUniqueInput[]
    disconnect?: SkuStockWhereUniqueInput | SkuStockWhereUniqueInput[]
    delete?: SkuStockWhereUniqueInput | SkuStockWhereUniqueInput[]
    connect?: SkuStockWhereUniqueInput | SkuStockWhereUniqueInput[]
    update?: SkuStockUpdateWithWhereUniqueWithoutWarehouseInput | SkuStockUpdateWithWhereUniqueWithoutWarehouseInput[]
    updateMany?: SkuStockUpdateManyWithWhereWithoutWarehouseInput | SkuStockUpdateManyWithWhereWithoutWarehouseInput[]
    deleteMany?: SkuStockScalarWhereInput | SkuStockScalarWhereInput[]
  }

  export type SkuStockUncheckedUpdateManyWithoutWarehouseNestedInput = {
    create?: XOR<SkuStockCreateWithoutWarehouseInput, SkuStockUncheckedCreateWithoutWarehouseInput> | SkuStockCreateWithoutWarehouseInput[] | SkuStockUncheckedCreateWithoutWarehouseInput[]
    connectOrCreate?: SkuStockCreateOrConnectWithoutWarehouseInput | SkuStockCreateOrConnectWithoutWarehouseInput[]
    upsert?: SkuStockUpsertWithWhereUniqueWithoutWarehouseInput | SkuStockUpsertWithWhereUniqueWithoutWarehouseInput[]
    createMany?: SkuStockCreateManyWarehouseInputEnvelope
    set?: SkuStockWhereUniqueInput | SkuStockWhereUniqueInput[]
    disconnect?: SkuStockWhereUniqueInput | SkuStockWhereUniqueInput[]
    delete?: SkuStockWhereUniqueInput | SkuStockWhereUniqueInput[]
    connect?: SkuStockWhereUniqueInput | SkuStockWhereUniqueInput[]
    update?: SkuStockUpdateWithWhereUniqueWithoutWarehouseInput | SkuStockUpdateWithWhereUniqueWithoutWarehouseInput[]
    updateMany?: SkuStockUpdateManyWithWhereWithoutWarehouseInput | SkuStockUpdateManyWithWhereWithoutWarehouseInput[]
    deleteMany?: SkuStockScalarWhereInput | SkuStockScalarWhereInput[]
  }

  export type SkuPriceCreateNestedManyWithoutPriceListInput = {
    create?: XOR<SkuPriceCreateWithoutPriceListInput, SkuPriceUncheckedCreateWithoutPriceListInput> | SkuPriceCreateWithoutPriceListInput[] | SkuPriceUncheckedCreateWithoutPriceListInput[]
    connectOrCreate?: SkuPriceCreateOrConnectWithoutPriceListInput | SkuPriceCreateOrConnectWithoutPriceListInput[]
    createMany?: SkuPriceCreateManyPriceListInputEnvelope
    connect?: SkuPriceWhereUniqueInput | SkuPriceWhereUniqueInput[]
  }

  export type SkuPriceUncheckedCreateNestedManyWithoutPriceListInput = {
    create?: XOR<SkuPriceCreateWithoutPriceListInput, SkuPriceUncheckedCreateWithoutPriceListInput> | SkuPriceCreateWithoutPriceListInput[] | SkuPriceUncheckedCreateWithoutPriceListInput[]
    connectOrCreate?: SkuPriceCreateOrConnectWithoutPriceListInput | SkuPriceCreateOrConnectWithoutPriceListInput[]
    createMany?: SkuPriceCreateManyPriceListInputEnvelope
    connect?: SkuPriceWhereUniqueInput | SkuPriceWhereUniqueInput[]
  }

  export type SkuPriceUpdateManyWithoutPriceListNestedInput = {
    create?: XOR<SkuPriceCreateWithoutPriceListInput, SkuPriceUncheckedCreateWithoutPriceListInput> | SkuPriceCreateWithoutPriceListInput[] | SkuPriceUncheckedCreateWithoutPriceListInput[]
    connectOrCreate?: SkuPriceCreateOrConnectWithoutPriceListInput | SkuPriceCreateOrConnectWithoutPriceListInput[]
    upsert?: SkuPriceUpsertWithWhereUniqueWithoutPriceListInput | SkuPriceUpsertWithWhereUniqueWithoutPriceListInput[]
    createMany?: SkuPriceCreateManyPriceListInputEnvelope
    set?: SkuPriceWhereUniqueInput | SkuPriceWhereUniqueInput[]
    disconnect?: SkuPriceWhereUniqueInput | SkuPriceWhereUniqueInput[]
    delete?: SkuPriceWhereUniqueInput | SkuPriceWhereUniqueInput[]
    connect?: SkuPriceWhereUniqueInput | SkuPriceWhereUniqueInput[]
    update?: SkuPriceUpdateWithWhereUniqueWithoutPriceListInput | SkuPriceUpdateWithWhereUniqueWithoutPriceListInput[]
    updateMany?: SkuPriceUpdateManyWithWhereWithoutPriceListInput | SkuPriceUpdateManyWithWhereWithoutPriceListInput[]
    deleteMany?: SkuPriceScalarWhereInput | SkuPriceScalarWhereInput[]
  }

  export type SkuPriceUncheckedUpdateManyWithoutPriceListNestedInput = {
    create?: XOR<SkuPriceCreateWithoutPriceListInput, SkuPriceUncheckedCreateWithoutPriceListInput> | SkuPriceCreateWithoutPriceListInput[] | SkuPriceUncheckedCreateWithoutPriceListInput[]
    connectOrCreate?: SkuPriceCreateOrConnectWithoutPriceListInput | SkuPriceCreateOrConnectWithoutPriceListInput[]
    upsert?: SkuPriceUpsertWithWhereUniqueWithoutPriceListInput | SkuPriceUpsertWithWhereUniqueWithoutPriceListInput[]
    createMany?: SkuPriceCreateManyPriceListInputEnvelope
    set?: SkuPriceWhereUniqueInput | SkuPriceWhereUniqueInput[]
    disconnect?: SkuPriceWhereUniqueInput | SkuPriceWhereUniqueInput[]
    delete?: SkuPriceWhereUniqueInput | SkuPriceWhereUniqueInput[]
    connect?: SkuPriceWhereUniqueInput | SkuPriceWhereUniqueInput[]
    update?: SkuPriceUpdateWithWhereUniqueWithoutPriceListInput | SkuPriceUpdateWithWhereUniqueWithoutPriceListInput[]
    updateMany?: SkuPriceUpdateManyWithWhereWithoutPriceListInput | SkuPriceUpdateManyWithWhereWithoutPriceListInput[]
    deleteMany?: SkuPriceScalarWhereInput | SkuPriceScalarWhereInput[]
  }

  export type CategoryCreateNestedOneWithoutChildrenInput = {
    create?: XOR<CategoryCreateWithoutChildrenInput, CategoryUncheckedCreateWithoutChildrenInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutChildrenInput
    connect?: CategoryWhereUniqueInput
  }

  export type CategoryCreateNestedManyWithoutParentInput = {
    create?: XOR<CategoryCreateWithoutParentInput, CategoryUncheckedCreateWithoutParentInput> | CategoryCreateWithoutParentInput[] | CategoryUncheckedCreateWithoutParentInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutParentInput | CategoryCreateOrConnectWithoutParentInput[]
    createMany?: CategoryCreateManyParentInputEnvelope
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
  }

  export type ProductCreateNestedManyWithoutCategoryInput = {
    create?: XOR<ProductCreateWithoutCategoryInput, ProductUncheckedCreateWithoutCategoryInput> | ProductCreateWithoutCategoryInput[] | ProductUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutCategoryInput | ProductCreateOrConnectWithoutCategoryInput[]
    createMany?: ProductCreateManyCategoryInputEnvelope
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
  }

  export type CategoryUncheckedCreateNestedManyWithoutParentInput = {
    create?: XOR<CategoryCreateWithoutParentInput, CategoryUncheckedCreateWithoutParentInput> | CategoryCreateWithoutParentInput[] | CategoryUncheckedCreateWithoutParentInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutParentInput | CategoryCreateOrConnectWithoutParentInput[]
    createMany?: CategoryCreateManyParentInputEnvelope
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
  }

  export type ProductUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<ProductCreateWithoutCategoryInput, ProductUncheckedCreateWithoutCategoryInput> | ProductCreateWithoutCategoryInput[] | ProductUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutCategoryInput | ProductCreateOrConnectWithoutCategoryInput[]
    createMany?: ProductCreateManyCategoryInputEnvelope
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
  }

  export type CategoryUpdateOneWithoutChildrenNestedInput = {
    create?: XOR<CategoryCreateWithoutChildrenInput, CategoryUncheckedCreateWithoutChildrenInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutChildrenInput
    upsert?: CategoryUpsertWithoutChildrenInput
    disconnect?: CategoryWhereInput | boolean
    delete?: CategoryWhereInput | boolean
    connect?: CategoryWhereUniqueInput
    update?: XOR<XOR<CategoryUpdateToOneWithWhereWithoutChildrenInput, CategoryUpdateWithoutChildrenInput>, CategoryUncheckedUpdateWithoutChildrenInput>
  }

  export type CategoryUpdateManyWithoutParentNestedInput = {
    create?: XOR<CategoryCreateWithoutParentInput, CategoryUncheckedCreateWithoutParentInput> | CategoryCreateWithoutParentInput[] | CategoryUncheckedCreateWithoutParentInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutParentInput | CategoryCreateOrConnectWithoutParentInput[]
    upsert?: CategoryUpsertWithWhereUniqueWithoutParentInput | CategoryUpsertWithWhereUniqueWithoutParentInput[]
    createMany?: CategoryCreateManyParentInputEnvelope
    set?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    disconnect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    delete?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    update?: CategoryUpdateWithWhereUniqueWithoutParentInput | CategoryUpdateWithWhereUniqueWithoutParentInput[]
    updateMany?: CategoryUpdateManyWithWhereWithoutParentInput | CategoryUpdateManyWithWhereWithoutParentInput[]
    deleteMany?: CategoryScalarWhereInput | CategoryScalarWhereInput[]
  }

  export type ProductUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<ProductCreateWithoutCategoryInput, ProductUncheckedCreateWithoutCategoryInput> | ProductCreateWithoutCategoryInput[] | ProductUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutCategoryInput | ProductCreateOrConnectWithoutCategoryInput[]
    upsert?: ProductUpsertWithWhereUniqueWithoutCategoryInput | ProductUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: ProductCreateManyCategoryInputEnvelope
    set?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    disconnect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    delete?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    update?: ProductUpdateWithWhereUniqueWithoutCategoryInput | ProductUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: ProductUpdateManyWithWhereWithoutCategoryInput | ProductUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: ProductScalarWhereInput | ProductScalarWhereInput[]
  }

  export type CategoryUncheckedUpdateManyWithoutParentNestedInput = {
    create?: XOR<CategoryCreateWithoutParentInput, CategoryUncheckedCreateWithoutParentInput> | CategoryCreateWithoutParentInput[] | CategoryUncheckedCreateWithoutParentInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutParentInput | CategoryCreateOrConnectWithoutParentInput[]
    upsert?: CategoryUpsertWithWhereUniqueWithoutParentInput | CategoryUpsertWithWhereUniqueWithoutParentInput[]
    createMany?: CategoryCreateManyParentInputEnvelope
    set?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    disconnect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    delete?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    update?: CategoryUpdateWithWhereUniqueWithoutParentInput | CategoryUpdateWithWhereUniqueWithoutParentInput[]
    updateMany?: CategoryUpdateManyWithWhereWithoutParentInput | CategoryUpdateManyWithWhereWithoutParentInput[]
    deleteMany?: CategoryScalarWhereInput | CategoryScalarWhereInput[]
  }

  export type ProductUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<ProductCreateWithoutCategoryInput, ProductUncheckedCreateWithoutCategoryInput> | ProductCreateWithoutCategoryInput[] | ProductUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutCategoryInput | ProductCreateOrConnectWithoutCategoryInput[]
    upsert?: ProductUpsertWithWhereUniqueWithoutCategoryInput | ProductUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: ProductCreateManyCategoryInputEnvelope
    set?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    disconnect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    delete?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    update?: ProductUpdateWithWhereUniqueWithoutCategoryInput | ProductUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: ProductUpdateManyWithWhereWithoutCategoryInput | ProductUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: ProductScalarWhereInput | ProductScalarWhereInput[]
  }

  export type ProductCreateNestedManyWithoutSyncJobInput = {
    create?: XOR<ProductCreateWithoutSyncJobInput, ProductUncheckedCreateWithoutSyncJobInput> | ProductCreateWithoutSyncJobInput[] | ProductUncheckedCreateWithoutSyncJobInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutSyncJobInput | ProductCreateOrConnectWithoutSyncJobInput[]
    createMany?: ProductCreateManySyncJobInputEnvelope
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
  }

  export type ProductUncheckedCreateNestedManyWithoutSyncJobInput = {
    create?: XOR<ProductCreateWithoutSyncJobInput, ProductUncheckedCreateWithoutSyncJobInput> | ProductCreateWithoutSyncJobInput[] | ProductUncheckedCreateWithoutSyncJobInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutSyncJobInput | ProductCreateOrConnectWithoutSyncJobInput[]
    createMany?: ProductCreateManySyncJobInputEnvelope
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
  }

  export type ProductUpdateManyWithoutSyncJobNestedInput = {
    create?: XOR<ProductCreateWithoutSyncJobInput, ProductUncheckedCreateWithoutSyncJobInput> | ProductCreateWithoutSyncJobInput[] | ProductUncheckedCreateWithoutSyncJobInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutSyncJobInput | ProductCreateOrConnectWithoutSyncJobInput[]
    upsert?: ProductUpsertWithWhereUniqueWithoutSyncJobInput | ProductUpsertWithWhereUniqueWithoutSyncJobInput[]
    createMany?: ProductCreateManySyncJobInputEnvelope
    set?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    disconnect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    delete?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    update?: ProductUpdateWithWhereUniqueWithoutSyncJobInput | ProductUpdateWithWhereUniqueWithoutSyncJobInput[]
    updateMany?: ProductUpdateManyWithWhereWithoutSyncJobInput | ProductUpdateManyWithWhereWithoutSyncJobInput[]
    deleteMany?: ProductScalarWhereInput | ProductScalarWhereInput[]
  }

  export type ProductUncheckedUpdateManyWithoutSyncJobNestedInput = {
    create?: XOR<ProductCreateWithoutSyncJobInput, ProductUncheckedCreateWithoutSyncJobInput> | ProductCreateWithoutSyncJobInput[] | ProductUncheckedCreateWithoutSyncJobInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutSyncJobInput | ProductCreateOrConnectWithoutSyncJobInput[]
    upsert?: ProductUpsertWithWhereUniqueWithoutSyncJobInput | ProductUpsertWithWhereUniqueWithoutSyncJobInput[]
    createMany?: ProductCreateManySyncJobInputEnvelope
    set?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    disconnect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    delete?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    update?: ProductUpdateWithWhereUniqueWithoutSyncJobInput | ProductUpdateWithWhereUniqueWithoutSyncJobInput[]
    updateMany?: ProductUpdateManyWithWhereWithoutSyncJobInput | ProductUpdateManyWithWhereWithoutSyncJobInput[]
    deleteMany?: ProductScalarWhereInput | ProductScalarWhereInput[]
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedDecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type SkuCreateWithoutProductInput = {
    id?: string
    code: string
    barcode?: string | null
    name: string
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    images?: SkuImageCreateNestedManyWithoutSkuInput
    prices?: SkuPriceCreateNestedManyWithoutSkuInput
    stocks?: SkuStockCreateNestedManyWithoutSkuInput
  }

  export type SkuUncheckedCreateWithoutProductInput = {
    id?: string
    code: string
    barcode?: string | null
    name: string
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    images?: SkuImageUncheckedCreateNestedManyWithoutSkuInput
    prices?: SkuPriceUncheckedCreateNestedManyWithoutSkuInput
    stocks?: SkuStockUncheckedCreateNestedManyWithoutSkuInput
  }

  export type SkuCreateOrConnectWithoutProductInput = {
    where: SkuWhereUniqueInput
    create: XOR<SkuCreateWithoutProductInput, SkuUncheckedCreateWithoutProductInput>
  }

  export type SkuCreateManyProductInputEnvelope = {
    data: SkuCreateManyProductInput | SkuCreateManyProductInput[]
    skipDuplicates?: boolean
  }

  export type CategoryCreateWithoutProductsInput = {
    id?: string
    name: string
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    parent?: CategoryCreateNestedOneWithoutChildrenInput
    children?: CategoryCreateNestedManyWithoutParentInput
  }

  export type CategoryUncheckedCreateWithoutProductsInput = {
    id?: string
    name: string
    parentId?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    children?: CategoryUncheckedCreateNestedManyWithoutParentInput
  }

  export type CategoryCreateOrConnectWithoutProductsInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutProductsInput, CategoryUncheckedCreateWithoutProductsInput>
  }

  export type SyncJobCreateWithoutProductsInput = {
    id?: string
    source: string
    status?: string
    startedAt?: Date | string
    completedAt?: Date | string | null
    errorLog?: string | null
    createdAt?: Date | string
  }

  export type SyncJobUncheckedCreateWithoutProductsInput = {
    id?: string
    source: string
    status?: string
    startedAt?: Date | string
    completedAt?: Date | string | null
    errorLog?: string | null
    createdAt?: Date | string
  }

  export type SyncJobCreateOrConnectWithoutProductsInput = {
    where: SyncJobWhereUniqueInput
    create: XOR<SyncJobCreateWithoutProductsInput, SyncJobUncheckedCreateWithoutProductsInput>
  }

  export type SkuUpsertWithWhereUniqueWithoutProductInput = {
    where: SkuWhereUniqueInput
    update: XOR<SkuUpdateWithoutProductInput, SkuUncheckedUpdateWithoutProductInput>
    create: XOR<SkuCreateWithoutProductInput, SkuUncheckedCreateWithoutProductInput>
  }

  export type SkuUpdateWithWhereUniqueWithoutProductInput = {
    where: SkuWhereUniqueInput
    data: XOR<SkuUpdateWithoutProductInput, SkuUncheckedUpdateWithoutProductInput>
  }

  export type SkuUpdateManyWithWhereWithoutProductInput = {
    where: SkuScalarWhereInput
    data: XOR<SkuUpdateManyMutationInput, SkuUncheckedUpdateManyWithoutProductInput>
  }

  export type SkuScalarWhereInput = {
    AND?: SkuScalarWhereInput | SkuScalarWhereInput[]
    OR?: SkuScalarWhereInput[]
    NOT?: SkuScalarWhereInput | SkuScalarWhereInput[]
    id?: StringFilter<"Sku"> | string
    productId?: StringFilter<"Sku"> | string
    code?: StringFilter<"Sku"> | string
    barcode?: StringNullableFilter<"Sku"> | string | null
    name?: StringFilter<"Sku"> | string
    status?: StringFilter<"Sku"> | string
    createdAt?: DateTimeFilter<"Sku"> | Date | string
    updatedAt?: DateTimeFilter<"Sku"> | Date | string
  }

  export type CategoryUpsertWithoutProductsInput = {
    update: XOR<CategoryUpdateWithoutProductsInput, CategoryUncheckedUpdateWithoutProductsInput>
    create: XOR<CategoryCreateWithoutProductsInput, CategoryUncheckedCreateWithoutProductsInput>
    where?: CategoryWhereInput
  }

  export type CategoryUpdateToOneWithWhereWithoutProductsInput = {
    where?: CategoryWhereInput
    data: XOR<CategoryUpdateWithoutProductsInput, CategoryUncheckedUpdateWithoutProductsInput>
  }

  export type CategoryUpdateWithoutProductsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parent?: CategoryUpdateOneWithoutChildrenNestedInput
    children?: CategoryUpdateManyWithoutParentNestedInput
  }

  export type CategoryUncheckedUpdateWithoutProductsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    children?: CategoryUncheckedUpdateManyWithoutParentNestedInput
  }

  export type SyncJobUpsertWithoutProductsInput = {
    update: XOR<SyncJobUpdateWithoutProductsInput, SyncJobUncheckedUpdateWithoutProductsInput>
    create: XOR<SyncJobCreateWithoutProductsInput, SyncJobUncheckedCreateWithoutProductsInput>
    where?: SyncJobWhereInput
  }

  export type SyncJobUpdateToOneWithWhereWithoutProductsInput = {
    where?: SyncJobWhereInput
    data: XOR<SyncJobUpdateWithoutProductsInput, SyncJobUncheckedUpdateWithoutProductsInput>
  }

  export type SyncJobUpdateWithoutProductsInput = {
    id?: StringFieldUpdateOperationsInput | string
    source?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    errorLog?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SyncJobUncheckedUpdateWithoutProductsInput = {
    id?: StringFieldUpdateOperationsInput | string
    source?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    errorLog?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductCreateWithoutSkusInput = {
    id?: string
    name: string
    description?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    category?: CategoryCreateNestedOneWithoutProductsInput
    syncJob?: SyncJobCreateNestedOneWithoutProductsInput
  }

  export type ProductUncheckedCreateWithoutSkusInput = {
    id?: string
    name: string
    description?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    categoryId?: string | null
    syncJobId?: string | null
  }

  export type ProductCreateOrConnectWithoutSkusInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutSkusInput, ProductUncheckedCreateWithoutSkusInput>
  }

  export type SkuImageCreateWithoutSkuInput = {
    id?: string
    url: string
    altText?: string | null
    order?: number
    createdAt?: Date | string
  }

  export type SkuImageUncheckedCreateWithoutSkuInput = {
    id?: string
    url: string
    altText?: string | null
    order?: number
    createdAt?: Date | string
  }

  export type SkuImageCreateOrConnectWithoutSkuInput = {
    where: SkuImageWhereUniqueInput
    create: XOR<SkuImageCreateWithoutSkuInput, SkuImageUncheckedCreateWithoutSkuInput>
  }

  export type SkuImageCreateManySkuInputEnvelope = {
    data: SkuImageCreateManySkuInput | SkuImageCreateManySkuInput[]
    skipDuplicates?: boolean
  }

  export type SkuPriceCreateWithoutSkuInput = {
    id?: string
    price: Decimal | DecimalJsLike | number | string
    validFrom?: Date | string
    validTo?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    priceList: PriceListCreateNestedOneWithoutPricesInput
  }

  export type SkuPriceUncheckedCreateWithoutSkuInput = {
    id?: string
    priceListId: string
    price: Decimal | DecimalJsLike | number | string
    validFrom?: Date | string
    validTo?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SkuPriceCreateOrConnectWithoutSkuInput = {
    where: SkuPriceWhereUniqueInput
    create: XOR<SkuPriceCreateWithoutSkuInput, SkuPriceUncheckedCreateWithoutSkuInput>
  }

  export type SkuPriceCreateManySkuInputEnvelope = {
    data: SkuPriceCreateManySkuInput | SkuPriceCreateManySkuInput[]
    skipDuplicates?: boolean
  }

  export type SkuStockCreateWithoutSkuInput = {
    id?: string
    quantity?: number
    reserved?: number
    available?: number
    updatedAt?: Date | string
    warehouse: WarehouseCreateNestedOneWithoutStocksInput
  }

  export type SkuStockUncheckedCreateWithoutSkuInput = {
    id?: string
    warehouseId: string
    quantity?: number
    reserved?: number
    available?: number
    updatedAt?: Date | string
  }

  export type SkuStockCreateOrConnectWithoutSkuInput = {
    where: SkuStockWhereUniqueInput
    create: XOR<SkuStockCreateWithoutSkuInput, SkuStockUncheckedCreateWithoutSkuInput>
  }

  export type SkuStockCreateManySkuInputEnvelope = {
    data: SkuStockCreateManySkuInput | SkuStockCreateManySkuInput[]
    skipDuplicates?: boolean
  }

  export type ProductUpsertWithoutSkusInput = {
    update: XOR<ProductUpdateWithoutSkusInput, ProductUncheckedUpdateWithoutSkusInput>
    create: XOR<ProductCreateWithoutSkusInput, ProductUncheckedCreateWithoutSkusInput>
    where?: ProductWhereInput
  }

  export type ProductUpdateToOneWithWhereWithoutSkusInput = {
    where?: ProductWhereInput
    data: XOR<ProductUpdateWithoutSkusInput, ProductUncheckedUpdateWithoutSkusInput>
  }

  export type ProductUpdateWithoutSkusInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: CategoryUpdateOneWithoutProductsNestedInput
    syncJob?: SyncJobUpdateOneWithoutProductsNestedInput
  }

  export type ProductUncheckedUpdateWithoutSkusInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    categoryId?: NullableStringFieldUpdateOperationsInput | string | null
    syncJobId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SkuImageUpsertWithWhereUniqueWithoutSkuInput = {
    where: SkuImageWhereUniqueInput
    update: XOR<SkuImageUpdateWithoutSkuInput, SkuImageUncheckedUpdateWithoutSkuInput>
    create: XOR<SkuImageCreateWithoutSkuInput, SkuImageUncheckedCreateWithoutSkuInput>
  }

  export type SkuImageUpdateWithWhereUniqueWithoutSkuInput = {
    where: SkuImageWhereUniqueInput
    data: XOR<SkuImageUpdateWithoutSkuInput, SkuImageUncheckedUpdateWithoutSkuInput>
  }

  export type SkuImageUpdateManyWithWhereWithoutSkuInput = {
    where: SkuImageScalarWhereInput
    data: XOR<SkuImageUpdateManyMutationInput, SkuImageUncheckedUpdateManyWithoutSkuInput>
  }

  export type SkuImageScalarWhereInput = {
    AND?: SkuImageScalarWhereInput | SkuImageScalarWhereInput[]
    OR?: SkuImageScalarWhereInput[]
    NOT?: SkuImageScalarWhereInput | SkuImageScalarWhereInput[]
    id?: StringFilter<"SkuImage"> | string
    skuId?: StringFilter<"SkuImage"> | string
    url?: StringFilter<"SkuImage"> | string
    altText?: StringNullableFilter<"SkuImage"> | string | null
    order?: IntFilter<"SkuImage"> | number
    createdAt?: DateTimeFilter<"SkuImage"> | Date | string
  }

  export type SkuPriceUpsertWithWhereUniqueWithoutSkuInput = {
    where: SkuPriceWhereUniqueInput
    update: XOR<SkuPriceUpdateWithoutSkuInput, SkuPriceUncheckedUpdateWithoutSkuInput>
    create: XOR<SkuPriceCreateWithoutSkuInput, SkuPriceUncheckedCreateWithoutSkuInput>
  }

  export type SkuPriceUpdateWithWhereUniqueWithoutSkuInput = {
    where: SkuPriceWhereUniqueInput
    data: XOR<SkuPriceUpdateWithoutSkuInput, SkuPriceUncheckedUpdateWithoutSkuInput>
  }

  export type SkuPriceUpdateManyWithWhereWithoutSkuInput = {
    where: SkuPriceScalarWhereInput
    data: XOR<SkuPriceUpdateManyMutationInput, SkuPriceUncheckedUpdateManyWithoutSkuInput>
  }

  export type SkuPriceScalarWhereInput = {
    AND?: SkuPriceScalarWhereInput | SkuPriceScalarWhereInput[]
    OR?: SkuPriceScalarWhereInput[]
    NOT?: SkuPriceScalarWhereInput | SkuPriceScalarWhereInput[]
    id?: StringFilter<"SkuPrice"> | string
    skuId?: StringFilter<"SkuPrice"> | string
    priceListId?: StringFilter<"SkuPrice"> | string
    price?: DecimalFilter<"SkuPrice"> | Decimal | DecimalJsLike | number | string
    validFrom?: DateTimeFilter<"SkuPrice"> | Date | string
    validTo?: DateTimeNullableFilter<"SkuPrice"> | Date | string | null
    createdAt?: DateTimeFilter<"SkuPrice"> | Date | string
    updatedAt?: DateTimeFilter<"SkuPrice"> | Date | string
  }

  export type SkuStockUpsertWithWhereUniqueWithoutSkuInput = {
    where: SkuStockWhereUniqueInput
    update: XOR<SkuStockUpdateWithoutSkuInput, SkuStockUncheckedUpdateWithoutSkuInput>
    create: XOR<SkuStockCreateWithoutSkuInput, SkuStockUncheckedCreateWithoutSkuInput>
  }

  export type SkuStockUpdateWithWhereUniqueWithoutSkuInput = {
    where: SkuStockWhereUniqueInput
    data: XOR<SkuStockUpdateWithoutSkuInput, SkuStockUncheckedUpdateWithoutSkuInput>
  }

  export type SkuStockUpdateManyWithWhereWithoutSkuInput = {
    where: SkuStockScalarWhereInput
    data: XOR<SkuStockUpdateManyMutationInput, SkuStockUncheckedUpdateManyWithoutSkuInput>
  }

  export type SkuStockScalarWhereInput = {
    AND?: SkuStockScalarWhereInput | SkuStockScalarWhereInput[]
    OR?: SkuStockScalarWhereInput[]
    NOT?: SkuStockScalarWhereInput | SkuStockScalarWhereInput[]
    id?: StringFilter<"SkuStock"> | string
    skuId?: StringFilter<"SkuStock"> | string
    warehouseId?: StringFilter<"SkuStock"> | string
    quantity?: IntFilter<"SkuStock"> | number
    reserved?: IntFilter<"SkuStock"> | number
    available?: IntFilter<"SkuStock"> | number
    updatedAt?: DateTimeFilter<"SkuStock"> | Date | string
  }

  export type SkuCreateWithoutImagesInput = {
    id?: string
    code: string
    barcode?: string | null
    name: string
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    product: ProductCreateNestedOneWithoutSkusInput
    prices?: SkuPriceCreateNestedManyWithoutSkuInput
    stocks?: SkuStockCreateNestedManyWithoutSkuInput
  }

  export type SkuUncheckedCreateWithoutImagesInput = {
    id?: string
    productId: string
    code: string
    barcode?: string | null
    name: string
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    prices?: SkuPriceUncheckedCreateNestedManyWithoutSkuInput
    stocks?: SkuStockUncheckedCreateNestedManyWithoutSkuInput
  }

  export type SkuCreateOrConnectWithoutImagesInput = {
    where: SkuWhereUniqueInput
    create: XOR<SkuCreateWithoutImagesInput, SkuUncheckedCreateWithoutImagesInput>
  }

  export type SkuUpsertWithoutImagesInput = {
    update: XOR<SkuUpdateWithoutImagesInput, SkuUncheckedUpdateWithoutImagesInput>
    create: XOR<SkuCreateWithoutImagesInput, SkuUncheckedCreateWithoutImagesInput>
    where?: SkuWhereInput
  }

  export type SkuUpdateToOneWithWhereWithoutImagesInput = {
    where?: SkuWhereInput
    data: XOR<SkuUpdateWithoutImagesInput, SkuUncheckedUpdateWithoutImagesInput>
  }

  export type SkuUpdateWithoutImagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    barcode?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    product?: ProductUpdateOneRequiredWithoutSkusNestedInput
    prices?: SkuPriceUpdateManyWithoutSkuNestedInput
    stocks?: SkuStockUpdateManyWithoutSkuNestedInput
  }

  export type SkuUncheckedUpdateWithoutImagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    barcode?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    prices?: SkuPriceUncheckedUpdateManyWithoutSkuNestedInput
    stocks?: SkuStockUncheckedUpdateManyWithoutSkuNestedInput
  }

  export type SkuCreateWithoutPricesInput = {
    id?: string
    code: string
    barcode?: string | null
    name: string
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    product: ProductCreateNestedOneWithoutSkusInput
    images?: SkuImageCreateNestedManyWithoutSkuInput
    stocks?: SkuStockCreateNestedManyWithoutSkuInput
  }

  export type SkuUncheckedCreateWithoutPricesInput = {
    id?: string
    productId: string
    code: string
    barcode?: string | null
    name: string
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    images?: SkuImageUncheckedCreateNestedManyWithoutSkuInput
    stocks?: SkuStockUncheckedCreateNestedManyWithoutSkuInput
  }

  export type SkuCreateOrConnectWithoutPricesInput = {
    where: SkuWhereUniqueInput
    create: XOR<SkuCreateWithoutPricesInput, SkuUncheckedCreateWithoutPricesInput>
  }

  export type PriceListCreateWithoutPricesInput = {
    id?: string
    name: string
    code: string
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PriceListUncheckedCreateWithoutPricesInput = {
    id?: string
    name: string
    code: string
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PriceListCreateOrConnectWithoutPricesInput = {
    where: PriceListWhereUniqueInput
    create: XOR<PriceListCreateWithoutPricesInput, PriceListUncheckedCreateWithoutPricesInput>
  }

  export type SkuUpsertWithoutPricesInput = {
    update: XOR<SkuUpdateWithoutPricesInput, SkuUncheckedUpdateWithoutPricesInput>
    create: XOR<SkuCreateWithoutPricesInput, SkuUncheckedCreateWithoutPricesInput>
    where?: SkuWhereInput
  }

  export type SkuUpdateToOneWithWhereWithoutPricesInput = {
    where?: SkuWhereInput
    data: XOR<SkuUpdateWithoutPricesInput, SkuUncheckedUpdateWithoutPricesInput>
  }

  export type SkuUpdateWithoutPricesInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    barcode?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    product?: ProductUpdateOneRequiredWithoutSkusNestedInput
    images?: SkuImageUpdateManyWithoutSkuNestedInput
    stocks?: SkuStockUpdateManyWithoutSkuNestedInput
  }

  export type SkuUncheckedUpdateWithoutPricesInput = {
    id?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    barcode?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    images?: SkuImageUncheckedUpdateManyWithoutSkuNestedInput
    stocks?: SkuStockUncheckedUpdateManyWithoutSkuNestedInput
  }

  export type PriceListUpsertWithoutPricesInput = {
    update: XOR<PriceListUpdateWithoutPricesInput, PriceListUncheckedUpdateWithoutPricesInput>
    create: XOR<PriceListCreateWithoutPricesInput, PriceListUncheckedCreateWithoutPricesInput>
    where?: PriceListWhereInput
  }

  export type PriceListUpdateToOneWithWhereWithoutPricesInput = {
    where?: PriceListWhereInput
    data: XOR<PriceListUpdateWithoutPricesInput, PriceListUncheckedUpdateWithoutPricesInput>
  }

  export type PriceListUpdateWithoutPricesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PriceListUncheckedUpdateWithoutPricesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SkuCreateWithoutStocksInput = {
    id?: string
    code: string
    barcode?: string | null
    name: string
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    product: ProductCreateNestedOneWithoutSkusInput
    images?: SkuImageCreateNestedManyWithoutSkuInput
    prices?: SkuPriceCreateNestedManyWithoutSkuInput
  }

  export type SkuUncheckedCreateWithoutStocksInput = {
    id?: string
    productId: string
    code: string
    barcode?: string | null
    name: string
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    images?: SkuImageUncheckedCreateNestedManyWithoutSkuInput
    prices?: SkuPriceUncheckedCreateNestedManyWithoutSkuInput
  }

  export type SkuCreateOrConnectWithoutStocksInput = {
    where: SkuWhereUniqueInput
    create: XOR<SkuCreateWithoutStocksInput, SkuUncheckedCreateWithoutStocksInput>
  }

  export type WarehouseCreateWithoutStocksInput = {
    id?: string
    name: string
    code: string
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WarehouseUncheckedCreateWithoutStocksInput = {
    id?: string
    name: string
    code: string
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WarehouseCreateOrConnectWithoutStocksInput = {
    where: WarehouseWhereUniqueInput
    create: XOR<WarehouseCreateWithoutStocksInput, WarehouseUncheckedCreateWithoutStocksInput>
  }

  export type SkuUpsertWithoutStocksInput = {
    update: XOR<SkuUpdateWithoutStocksInput, SkuUncheckedUpdateWithoutStocksInput>
    create: XOR<SkuCreateWithoutStocksInput, SkuUncheckedCreateWithoutStocksInput>
    where?: SkuWhereInput
  }

  export type SkuUpdateToOneWithWhereWithoutStocksInput = {
    where?: SkuWhereInput
    data: XOR<SkuUpdateWithoutStocksInput, SkuUncheckedUpdateWithoutStocksInput>
  }

  export type SkuUpdateWithoutStocksInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    barcode?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    product?: ProductUpdateOneRequiredWithoutSkusNestedInput
    images?: SkuImageUpdateManyWithoutSkuNestedInput
    prices?: SkuPriceUpdateManyWithoutSkuNestedInput
  }

  export type SkuUncheckedUpdateWithoutStocksInput = {
    id?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    barcode?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    images?: SkuImageUncheckedUpdateManyWithoutSkuNestedInput
    prices?: SkuPriceUncheckedUpdateManyWithoutSkuNestedInput
  }

  export type WarehouseUpsertWithoutStocksInput = {
    update: XOR<WarehouseUpdateWithoutStocksInput, WarehouseUncheckedUpdateWithoutStocksInput>
    create: XOR<WarehouseCreateWithoutStocksInput, WarehouseUncheckedCreateWithoutStocksInput>
    where?: WarehouseWhereInput
  }

  export type WarehouseUpdateToOneWithWhereWithoutStocksInput = {
    where?: WarehouseWhereInput
    data: XOR<WarehouseUpdateWithoutStocksInput, WarehouseUncheckedUpdateWithoutStocksInput>
  }

  export type WarehouseUpdateWithoutStocksInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WarehouseUncheckedUpdateWithoutStocksInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SkuStockCreateWithoutWarehouseInput = {
    id?: string
    quantity?: number
    reserved?: number
    available?: number
    updatedAt?: Date | string
    sku: SkuCreateNestedOneWithoutStocksInput
  }

  export type SkuStockUncheckedCreateWithoutWarehouseInput = {
    id?: string
    skuId: string
    quantity?: number
    reserved?: number
    available?: number
    updatedAt?: Date | string
  }

  export type SkuStockCreateOrConnectWithoutWarehouseInput = {
    where: SkuStockWhereUniqueInput
    create: XOR<SkuStockCreateWithoutWarehouseInput, SkuStockUncheckedCreateWithoutWarehouseInput>
  }

  export type SkuStockCreateManyWarehouseInputEnvelope = {
    data: SkuStockCreateManyWarehouseInput | SkuStockCreateManyWarehouseInput[]
    skipDuplicates?: boolean
  }

  export type SkuStockUpsertWithWhereUniqueWithoutWarehouseInput = {
    where: SkuStockWhereUniqueInput
    update: XOR<SkuStockUpdateWithoutWarehouseInput, SkuStockUncheckedUpdateWithoutWarehouseInput>
    create: XOR<SkuStockCreateWithoutWarehouseInput, SkuStockUncheckedCreateWithoutWarehouseInput>
  }

  export type SkuStockUpdateWithWhereUniqueWithoutWarehouseInput = {
    where: SkuStockWhereUniqueInput
    data: XOR<SkuStockUpdateWithoutWarehouseInput, SkuStockUncheckedUpdateWithoutWarehouseInput>
  }

  export type SkuStockUpdateManyWithWhereWithoutWarehouseInput = {
    where: SkuStockScalarWhereInput
    data: XOR<SkuStockUpdateManyMutationInput, SkuStockUncheckedUpdateManyWithoutWarehouseInput>
  }

  export type SkuPriceCreateWithoutPriceListInput = {
    id?: string
    price: Decimal | DecimalJsLike | number | string
    validFrom?: Date | string
    validTo?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sku: SkuCreateNestedOneWithoutPricesInput
  }

  export type SkuPriceUncheckedCreateWithoutPriceListInput = {
    id?: string
    skuId: string
    price: Decimal | DecimalJsLike | number | string
    validFrom?: Date | string
    validTo?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SkuPriceCreateOrConnectWithoutPriceListInput = {
    where: SkuPriceWhereUniqueInput
    create: XOR<SkuPriceCreateWithoutPriceListInput, SkuPriceUncheckedCreateWithoutPriceListInput>
  }

  export type SkuPriceCreateManyPriceListInputEnvelope = {
    data: SkuPriceCreateManyPriceListInput | SkuPriceCreateManyPriceListInput[]
    skipDuplicates?: boolean
  }

  export type SkuPriceUpsertWithWhereUniqueWithoutPriceListInput = {
    where: SkuPriceWhereUniqueInput
    update: XOR<SkuPriceUpdateWithoutPriceListInput, SkuPriceUncheckedUpdateWithoutPriceListInput>
    create: XOR<SkuPriceCreateWithoutPriceListInput, SkuPriceUncheckedCreateWithoutPriceListInput>
  }

  export type SkuPriceUpdateWithWhereUniqueWithoutPriceListInput = {
    where: SkuPriceWhereUniqueInput
    data: XOR<SkuPriceUpdateWithoutPriceListInput, SkuPriceUncheckedUpdateWithoutPriceListInput>
  }

  export type SkuPriceUpdateManyWithWhereWithoutPriceListInput = {
    where: SkuPriceScalarWhereInput
    data: XOR<SkuPriceUpdateManyMutationInput, SkuPriceUncheckedUpdateManyWithoutPriceListInput>
  }

  export type CategoryCreateWithoutChildrenInput = {
    id?: string
    name: string
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    parent?: CategoryCreateNestedOneWithoutChildrenInput
    products?: ProductCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUncheckedCreateWithoutChildrenInput = {
    id?: string
    name: string
    parentId?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    products?: ProductUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CategoryCreateOrConnectWithoutChildrenInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutChildrenInput, CategoryUncheckedCreateWithoutChildrenInput>
  }

  export type CategoryCreateWithoutParentInput = {
    id?: string
    name: string
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    children?: CategoryCreateNestedManyWithoutParentInput
    products?: ProductCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUncheckedCreateWithoutParentInput = {
    id?: string
    name: string
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    children?: CategoryUncheckedCreateNestedManyWithoutParentInput
    products?: ProductUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CategoryCreateOrConnectWithoutParentInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutParentInput, CategoryUncheckedCreateWithoutParentInput>
  }

  export type CategoryCreateManyParentInputEnvelope = {
    data: CategoryCreateManyParentInput | CategoryCreateManyParentInput[]
    skipDuplicates?: boolean
  }

  export type ProductCreateWithoutCategoryInput = {
    id?: string
    name: string
    description?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    skus?: SkuCreateNestedManyWithoutProductInput
    syncJob?: SyncJobCreateNestedOneWithoutProductsInput
  }

  export type ProductUncheckedCreateWithoutCategoryInput = {
    id?: string
    name: string
    description?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    syncJobId?: string | null
    skus?: SkuUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutCategoryInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutCategoryInput, ProductUncheckedCreateWithoutCategoryInput>
  }

  export type ProductCreateManyCategoryInputEnvelope = {
    data: ProductCreateManyCategoryInput | ProductCreateManyCategoryInput[]
    skipDuplicates?: boolean
  }

  export type CategoryUpsertWithoutChildrenInput = {
    update: XOR<CategoryUpdateWithoutChildrenInput, CategoryUncheckedUpdateWithoutChildrenInput>
    create: XOR<CategoryCreateWithoutChildrenInput, CategoryUncheckedCreateWithoutChildrenInput>
    where?: CategoryWhereInput
  }

  export type CategoryUpdateToOneWithWhereWithoutChildrenInput = {
    where?: CategoryWhereInput
    data: XOR<CategoryUpdateWithoutChildrenInput, CategoryUncheckedUpdateWithoutChildrenInput>
  }

  export type CategoryUpdateWithoutChildrenInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parent?: CategoryUpdateOneWithoutChildrenNestedInput
    products?: ProductUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUncheckedUpdateWithoutChildrenInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    products?: ProductUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUpsertWithWhereUniqueWithoutParentInput = {
    where: CategoryWhereUniqueInput
    update: XOR<CategoryUpdateWithoutParentInput, CategoryUncheckedUpdateWithoutParentInput>
    create: XOR<CategoryCreateWithoutParentInput, CategoryUncheckedCreateWithoutParentInput>
  }

  export type CategoryUpdateWithWhereUniqueWithoutParentInput = {
    where: CategoryWhereUniqueInput
    data: XOR<CategoryUpdateWithoutParentInput, CategoryUncheckedUpdateWithoutParentInput>
  }

  export type CategoryUpdateManyWithWhereWithoutParentInput = {
    where: CategoryScalarWhereInput
    data: XOR<CategoryUpdateManyMutationInput, CategoryUncheckedUpdateManyWithoutParentInput>
  }

  export type CategoryScalarWhereInput = {
    AND?: CategoryScalarWhereInput | CategoryScalarWhereInput[]
    OR?: CategoryScalarWhereInput[]
    NOT?: CategoryScalarWhereInput | CategoryScalarWhereInput[]
    id?: StringFilter<"Category"> | string
    name?: StringFilter<"Category"> | string
    parentId?: StringNullableFilter<"Category"> | string | null
    status?: StringFilter<"Category"> | string
    createdAt?: DateTimeFilter<"Category"> | Date | string
    updatedAt?: DateTimeFilter<"Category"> | Date | string
  }

  export type ProductUpsertWithWhereUniqueWithoutCategoryInput = {
    where: ProductWhereUniqueInput
    update: XOR<ProductUpdateWithoutCategoryInput, ProductUncheckedUpdateWithoutCategoryInput>
    create: XOR<ProductCreateWithoutCategoryInput, ProductUncheckedCreateWithoutCategoryInput>
  }

  export type ProductUpdateWithWhereUniqueWithoutCategoryInput = {
    where: ProductWhereUniqueInput
    data: XOR<ProductUpdateWithoutCategoryInput, ProductUncheckedUpdateWithoutCategoryInput>
  }

  export type ProductUpdateManyWithWhereWithoutCategoryInput = {
    where: ProductScalarWhereInput
    data: XOR<ProductUpdateManyMutationInput, ProductUncheckedUpdateManyWithoutCategoryInput>
  }

  export type ProductScalarWhereInput = {
    AND?: ProductScalarWhereInput | ProductScalarWhereInput[]
    OR?: ProductScalarWhereInput[]
    NOT?: ProductScalarWhereInput | ProductScalarWhereInput[]
    id?: StringFilter<"Product"> | string
    name?: StringFilter<"Product"> | string
    description?: StringNullableFilter<"Product"> | string | null
    status?: StringFilter<"Product"> | string
    createdAt?: DateTimeFilter<"Product"> | Date | string
    updatedAt?: DateTimeFilter<"Product"> | Date | string
    categoryId?: StringNullableFilter<"Product"> | string | null
    syncJobId?: StringNullableFilter<"Product"> | string | null
  }

  export type ProductCreateWithoutSyncJobInput = {
    id?: string
    name: string
    description?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    skus?: SkuCreateNestedManyWithoutProductInput
    category?: CategoryCreateNestedOneWithoutProductsInput
  }

  export type ProductUncheckedCreateWithoutSyncJobInput = {
    id?: string
    name: string
    description?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    categoryId?: string | null
    skus?: SkuUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutSyncJobInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutSyncJobInput, ProductUncheckedCreateWithoutSyncJobInput>
  }

  export type ProductCreateManySyncJobInputEnvelope = {
    data: ProductCreateManySyncJobInput | ProductCreateManySyncJobInput[]
    skipDuplicates?: boolean
  }

  export type ProductUpsertWithWhereUniqueWithoutSyncJobInput = {
    where: ProductWhereUniqueInput
    update: XOR<ProductUpdateWithoutSyncJobInput, ProductUncheckedUpdateWithoutSyncJobInput>
    create: XOR<ProductCreateWithoutSyncJobInput, ProductUncheckedCreateWithoutSyncJobInput>
  }

  export type ProductUpdateWithWhereUniqueWithoutSyncJobInput = {
    where: ProductWhereUniqueInput
    data: XOR<ProductUpdateWithoutSyncJobInput, ProductUncheckedUpdateWithoutSyncJobInput>
  }

  export type ProductUpdateManyWithWhereWithoutSyncJobInput = {
    where: ProductScalarWhereInput
    data: XOR<ProductUpdateManyMutationInput, ProductUncheckedUpdateManyWithoutSyncJobInput>
  }

  export type SkuCreateManyProductInput = {
    id?: string
    code: string
    barcode?: string | null
    name: string
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SkuUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    barcode?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    images?: SkuImageUpdateManyWithoutSkuNestedInput
    prices?: SkuPriceUpdateManyWithoutSkuNestedInput
    stocks?: SkuStockUpdateManyWithoutSkuNestedInput
  }

  export type SkuUncheckedUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    barcode?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    images?: SkuImageUncheckedUpdateManyWithoutSkuNestedInput
    prices?: SkuPriceUncheckedUpdateManyWithoutSkuNestedInput
    stocks?: SkuStockUncheckedUpdateManyWithoutSkuNestedInput
  }

  export type SkuUncheckedUpdateManyWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    barcode?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SkuImageCreateManySkuInput = {
    id?: string
    url: string
    altText?: string | null
    order?: number
    createdAt?: Date | string
  }

  export type SkuPriceCreateManySkuInput = {
    id?: string
    priceListId: string
    price: Decimal | DecimalJsLike | number | string
    validFrom?: Date | string
    validTo?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SkuStockCreateManySkuInput = {
    id?: string
    warehouseId: string
    quantity?: number
    reserved?: number
    available?: number
    updatedAt?: Date | string
  }

  export type SkuImageUpdateWithoutSkuInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    altText?: NullableStringFieldUpdateOperationsInput | string | null
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SkuImageUncheckedUpdateWithoutSkuInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    altText?: NullableStringFieldUpdateOperationsInput | string | null
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SkuImageUncheckedUpdateManyWithoutSkuInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    altText?: NullableStringFieldUpdateOperationsInput | string | null
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SkuPriceUpdateWithoutSkuInput = {
    id?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    validFrom?: DateTimeFieldUpdateOperationsInput | Date | string
    validTo?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    priceList?: PriceListUpdateOneRequiredWithoutPricesNestedInput
  }

  export type SkuPriceUncheckedUpdateWithoutSkuInput = {
    id?: StringFieldUpdateOperationsInput | string
    priceListId?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    validFrom?: DateTimeFieldUpdateOperationsInput | Date | string
    validTo?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SkuPriceUncheckedUpdateManyWithoutSkuInput = {
    id?: StringFieldUpdateOperationsInput | string
    priceListId?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    validFrom?: DateTimeFieldUpdateOperationsInput | Date | string
    validTo?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SkuStockUpdateWithoutSkuInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    reserved?: IntFieldUpdateOperationsInput | number
    available?: IntFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    warehouse?: WarehouseUpdateOneRequiredWithoutStocksNestedInput
  }

  export type SkuStockUncheckedUpdateWithoutSkuInput = {
    id?: StringFieldUpdateOperationsInput | string
    warehouseId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    reserved?: IntFieldUpdateOperationsInput | number
    available?: IntFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SkuStockUncheckedUpdateManyWithoutSkuInput = {
    id?: StringFieldUpdateOperationsInput | string
    warehouseId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    reserved?: IntFieldUpdateOperationsInput | number
    available?: IntFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SkuStockCreateManyWarehouseInput = {
    id?: string
    skuId: string
    quantity?: number
    reserved?: number
    available?: number
    updatedAt?: Date | string
  }

  export type SkuStockUpdateWithoutWarehouseInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    reserved?: IntFieldUpdateOperationsInput | number
    available?: IntFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sku?: SkuUpdateOneRequiredWithoutStocksNestedInput
  }

  export type SkuStockUncheckedUpdateWithoutWarehouseInput = {
    id?: StringFieldUpdateOperationsInput | string
    skuId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    reserved?: IntFieldUpdateOperationsInput | number
    available?: IntFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SkuStockUncheckedUpdateManyWithoutWarehouseInput = {
    id?: StringFieldUpdateOperationsInput | string
    skuId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    reserved?: IntFieldUpdateOperationsInput | number
    available?: IntFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SkuPriceCreateManyPriceListInput = {
    id?: string
    skuId: string
    price: Decimal | DecimalJsLike | number | string
    validFrom?: Date | string
    validTo?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SkuPriceUpdateWithoutPriceListInput = {
    id?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    validFrom?: DateTimeFieldUpdateOperationsInput | Date | string
    validTo?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sku?: SkuUpdateOneRequiredWithoutPricesNestedInput
  }

  export type SkuPriceUncheckedUpdateWithoutPriceListInput = {
    id?: StringFieldUpdateOperationsInput | string
    skuId?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    validFrom?: DateTimeFieldUpdateOperationsInput | Date | string
    validTo?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SkuPriceUncheckedUpdateManyWithoutPriceListInput = {
    id?: StringFieldUpdateOperationsInput | string
    skuId?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    validFrom?: DateTimeFieldUpdateOperationsInput | Date | string
    validTo?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CategoryCreateManyParentInput = {
    id?: string
    name: string
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProductCreateManyCategoryInput = {
    id?: string
    name: string
    description?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    syncJobId?: string | null
  }

  export type CategoryUpdateWithoutParentInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    children?: CategoryUpdateManyWithoutParentNestedInput
    products?: ProductUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUncheckedUpdateWithoutParentInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    children?: CategoryUncheckedUpdateManyWithoutParentNestedInput
    products?: ProductUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUncheckedUpdateManyWithoutParentInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductUpdateWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    skus?: SkuUpdateManyWithoutProductNestedInput
    syncJob?: SyncJobUpdateOneWithoutProductsNestedInput
  }

  export type ProductUncheckedUpdateWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    syncJobId?: NullableStringFieldUpdateOperationsInput | string | null
    skus?: SkuUncheckedUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateManyWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    syncJobId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProductCreateManySyncJobInput = {
    id?: string
    name: string
    description?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    categoryId?: string | null
  }

  export type ProductUpdateWithoutSyncJobInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    skus?: SkuUpdateManyWithoutProductNestedInput
    category?: CategoryUpdateOneWithoutProductsNestedInput
  }

  export type ProductUncheckedUpdateWithoutSyncJobInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    categoryId?: NullableStringFieldUpdateOperationsInput | string | null
    skus?: SkuUncheckedUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateManyWithoutSyncJobInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    categoryId?: NullableStringFieldUpdateOperationsInput | string | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}