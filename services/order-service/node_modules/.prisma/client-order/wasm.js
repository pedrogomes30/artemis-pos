
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('./runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.17.1
 * Query Engine version: 272a37d34178c2894197e17273bf937f25acdeac
 */
Prisma.prismaVersion = {
  client: "6.17.1",
  engine: "272a37d34178c2894197e17273bf937f25acdeac"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.OrderScalarFieldEnum = {
  id: 'id',
  orderNumber: 'orderNumber',
  customerId: 'customerId',
  status: 'status',
  subtotal: 'subtotal',
  discountTotal: 'discountTotal',
  taxTotal: 'taxTotal',
  total: 'total',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OrderItemScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  skuId: 'skuId',
  skuCode: 'skuCode',
  skuName: 'skuName',
  quantity: 'quantity',
  unitPrice: 'unitPrice',
  discount: 'discount',
  tax: 'tax',
  total: 'total',
  createdAt: 'createdAt'
};

exports.Prisma.OrderPaymentScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  method: 'method',
  amount: 'amount',
  transactionId: 'transactionId',
  status: 'status',
  paidAt: 'paidAt',
  createdAt: 'createdAt'
};

exports.Prisma.OrderDiscountScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  couponId: 'couponId',
  type: 'type',
  value: 'value',
  amount: 'amount',
  description: 'description',
  createdAt: 'createdAt'
};

exports.Prisma.OrderTaxScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  name: 'name',
  rate: 'rate',
  amount: 'amount',
  createdAt: 'createdAt'
};

exports.Prisma.CustomerScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  phone: 'phone',
  documentType: 'documentType',
  document: 'document',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CouponScalarFieldEnum = {
  id: 'id',
  code: 'code',
  type: 'type',
  value: 'value',
  minAmount: 'minAmount',
  maxAmount: 'maxAmount',
  maxUses: 'maxUses',
  currentUses: 'currentUses',
  validFrom: 'validFrom',
  validTo: 'validTo',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  Order: 'Order',
  OrderItem: 'OrderItem',
  OrderPayment: 'OrderPayment',
  OrderDiscount: 'OrderDiscount',
  OrderTax: 'OrderTax',
  Customer: 'Customer',
  Coupon: 'Coupon'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "/home/avanor/workspace/lab/artemis-pos/services/order-service/node_modules/.prisma/client-order",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "debian-openssl-3.0.x",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "/home/avanor/workspace/lab/artemis-pos/services/order-service/prisma/schema.prisma",
    "isCustomOutput": true
  },
  "relativeEnvPaths": {
    "rootEnvPath": null
  },
  "relativePath": "../../../prisma",
  "clientVersion": "6.17.1",
  "engineVersion": "272a37d34178c2894197e17273bf937f25acdeac",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "postgresql",
  "postinstall": false,
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "ORDER_DB_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "// ============================================\n// Order Service - Prisma Schema\n// ============================================\n\ngenerator client {\n  provider = \"prisma-client-js\"\n  output   = \"../node_modules/.prisma/client-order\"\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"ORDER_DB_URL\")\n  schemas  = [\"order_schema\"]\n}\n\n// ============================================\n// ORDER MANAGEMENT\n// ============================================\n\nmodel Order {\n  id            String   @id @default(uuid())\n  orderNumber   String   @unique\n  customerId    String?\n  status        String   @default(\"pending\") // pending, confirmed, processing, completed, cancelled\n  subtotal      Decimal  @db.Decimal(10, 2)\n  discountTotal Decimal  @default(0) @db.Decimal(10, 2)\n  taxTotal      Decimal  @default(0) @db.Decimal(10, 2)\n  total         Decimal  @db.Decimal(10, 2)\n  notes         String?\n  createdAt     DateTime @default(now())\n  updatedAt     DateTime @updatedAt\n\n  // Relations\n  customer  Customer?       @relation(fields: [customerId], references: [id])\n  items     OrderItem[]\n  payments  OrderPayment[]\n  discounts OrderDiscount[]\n  taxes     OrderTax[]\n\n  @@map(\"orders\")\n  @@schema(\"order_schema\")\n}\n\nmodel OrderItem {\n  id        String   @id @default(uuid())\n  orderId   String\n  skuId     String // Reference to SKU in catalog service\n  skuCode   String\n  skuName   String\n  quantity  Int\n  unitPrice Decimal  @db.Decimal(10, 2)\n  discount  Decimal  @default(0) @db.Decimal(10, 2)\n  tax       Decimal  @default(0) @db.Decimal(10, 2)\n  total     Decimal  @db.Decimal(10, 2)\n  createdAt DateTime @default(now())\n\n  // Relations\n  order Order @relation(fields: [orderId], references: [id])\n\n  @@map(\"order_items\")\n  @@schema(\"order_schema\")\n}\n\nmodel OrderPayment {\n  id            String    @id @default(uuid())\n  orderId       String\n  method        String // cash, credit_card, debit_card, pix, etc\n  amount        Decimal   @db.Decimal(10, 2)\n  transactionId String?\n  status        String    @default(\"pending\") // pending, approved, rejected, refunded\n  paidAt        DateTime?\n  createdAt     DateTime  @default(now())\n\n  // Relations\n  order Order @relation(fields: [orderId], references: [id])\n\n  @@map(\"order_payments\")\n  @@schema(\"order_schema\")\n}\n\nmodel OrderDiscount {\n  id          String   @id @default(uuid())\n  orderId     String\n  couponId    String?\n  type        String // percentage, fixed\n  value       Decimal  @db.Decimal(10, 2)\n  amount      Decimal  @db.Decimal(10, 2)\n  description String?\n  createdAt   DateTime @default(now())\n\n  // Relations\n  order  Order   @relation(fields: [orderId], references: [id])\n  coupon Coupon? @relation(fields: [couponId], references: [id])\n\n  @@map(\"order_discounts\")\n  @@schema(\"order_schema\")\n}\n\nmodel OrderTax {\n  id        String   @id @default(uuid())\n  orderId   String\n  name      String\n  rate      Decimal  @db.Decimal(5, 2)\n  amount    Decimal  @db.Decimal(10, 2)\n  createdAt DateTime @default(now())\n\n  // Relations\n  order Order @relation(fields: [orderId], references: [id])\n\n  @@map(\"order_taxes\")\n  @@schema(\"order_schema\")\n}\n\nmodel Customer {\n  id           String   @id @default(uuid())\n  name         String\n  email        String?\n  phone        String?\n  documentType String? // CPF, CNPJ\n  document     String?  @unique\n  status       String   @default(\"active\") // active, inactive, blocked\n  createdAt    DateTime @default(now())\n  updatedAt    DateTime @updatedAt\n\n  // Relations\n  orders Order[]\n\n  @@map(\"customers\")\n  @@schema(\"order_schema\")\n}\n\nmodel Coupon {\n  id          String    @id @default(uuid())\n  code        String    @unique\n  type        String // percentage, fixed\n  value       Decimal   @db.Decimal(10, 2)\n  minAmount   Decimal?  @db.Decimal(10, 2)\n  maxAmount   Decimal?  @db.Decimal(10, 2)\n  maxUses     Int?\n  currentUses Int       @default(0)\n  validFrom   DateTime  @default(now())\n  validTo     DateTime?\n  status      String    @default(\"active\") // active, inactive, expired\n  createdAt   DateTime  @default(now())\n  updatedAt   DateTime  @updatedAt\n\n  // Relations\n  orderDiscounts OrderDiscount[]\n\n  @@map(\"coupons\")\n  @@schema(\"order_schema\")\n}\n",
  "inlineSchemaHash": "b97e88b63ff949438e06b9533a8e13a7eff3069e57e06eb3c43327f509722c51",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"Order\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"orderNumber\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"customerId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"status\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"subtotal\",\"kind\":\"scalar\",\"type\":\"Decimal\"},{\"name\":\"discountTotal\",\"kind\":\"scalar\",\"type\":\"Decimal\"},{\"name\":\"taxTotal\",\"kind\":\"scalar\",\"type\":\"Decimal\"},{\"name\":\"total\",\"kind\":\"scalar\",\"type\":\"Decimal\"},{\"name\":\"notes\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"customer\",\"kind\":\"object\",\"type\":\"Customer\",\"relationName\":\"CustomerToOrder\"},{\"name\":\"items\",\"kind\":\"object\",\"type\":\"OrderItem\",\"relationName\":\"OrderToOrderItem\"},{\"name\":\"payments\",\"kind\":\"object\",\"type\":\"OrderPayment\",\"relationName\":\"OrderToOrderPayment\"},{\"name\":\"discounts\",\"kind\":\"object\",\"type\":\"OrderDiscount\",\"relationName\":\"OrderToOrderDiscount\"},{\"name\":\"taxes\",\"kind\":\"object\",\"type\":\"OrderTax\",\"relationName\":\"OrderToOrderTax\"}],\"dbName\":\"orders\"},\"OrderItem\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"orderId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"skuId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"skuCode\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"skuName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"quantity\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"unitPrice\",\"kind\":\"scalar\",\"type\":\"Decimal\"},{\"name\":\"discount\",\"kind\":\"scalar\",\"type\":\"Decimal\"},{\"name\":\"tax\",\"kind\":\"scalar\",\"type\":\"Decimal\"},{\"name\":\"total\",\"kind\":\"scalar\",\"type\":\"Decimal\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"order\",\"kind\":\"object\",\"type\":\"Order\",\"relationName\":\"OrderToOrderItem\"}],\"dbName\":\"order_items\"},\"OrderPayment\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"orderId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"method\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"amount\",\"kind\":\"scalar\",\"type\":\"Decimal\"},{\"name\":\"transactionId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"status\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"paidAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"order\",\"kind\":\"object\",\"type\":\"Order\",\"relationName\":\"OrderToOrderPayment\"}],\"dbName\":\"order_payments\"},\"OrderDiscount\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"orderId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"couponId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"type\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"value\",\"kind\":\"scalar\",\"type\":\"Decimal\"},{\"name\":\"amount\",\"kind\":\"scalar\",\"type\":\"Decimal\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"order\",\"kind\":\"object\",\"type\":\"Order\",\"relationName\":\"OrderToOrderDiscount\"},{\"name\":\"coupon\",\"kind\":\"object\",\"type\":\"Coupon\",\"relationName\":\"CouponToOrderDiscount\"}],\"dbName\":\"order_discounts\"},\"OrderTax\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"orderId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"rate\",\"kind\":\"scalar\",\"type\":\"Decimal\"},{\"name\":\"amount\",\"kind\":\"scalar\",\"type\":\"Decimal\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"order\",\"kind\":\"object\",\"type\":\"Order\",\"relationName\":\"OrderToOrderTax\"}],\"dbName\":\"order_taxes\"},\"Customer\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"phone\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"documentType\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"document\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"status\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"orders\",\"kind\":\"object\",\"type\":\"Order\",\"relationName\":\"CustomerToOrder\"}],\"dbName\":\"customers\"},\"Coupon\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"code\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"type\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"value\",\"kind\":\"scalar\",\"type\":\"Decimal\"},{\"name\":\"minAmount\",\"kind\":\"scalar\",\"type\":\"Decimal\"},{\"name\":\"maxAmount\",\"kind\":\"scalar\",\"type\":\"Decimal\"},{\"name\":\"maxUses\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"currentUses\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"validFrom\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"validTo\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"status\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"orderDiscounts\",\"kind\":\"object\",\"type\":\"OrderDiscount\",\"relationName\":\"CouponToOrderDiscount\"}],\"dbName\":\"coupons\"}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    ORDER_DB_URL: typeof globalThis !== 'undefined' && globalThis['ORDER_DB_URL'] || typeof process !== 'undefined' && process.env && process.env.ORDER_DB_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

